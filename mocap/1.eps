%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 26.0
%%For: Tom
%%CreationDate: 9/8/2022
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.0.2 x754 R agm 5.2 ct 6.2%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.a8731b9, 2021/09/09-00:37:38        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">iPhone 12</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2022-09-08T02:15:35+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2022-09-08T02:15:35+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2022-09-08T02:15:35+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 26.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAYABgAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAYAAAAAEA&#xA;AQBgAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9J4EuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2Kqc88NvBJPO6xQxKXkkY0VVUVJJOKvDvzB/5yOh028fTdAhM9yp4cqAvyrt9oMqH/&#xA;ACeLHx4nJUAyoDmxdPOv/OR1+ouYPLuomJ90b6tdR1B3BABjBHuFxvyRxeS7/E3/ADkr/wBS9qP/&#xA;ACJu/wDmvG14nf4m/wCclf8AqXtR/wCRN3/zXja8Tv8AE3/OSv8A1L2o/wDIm7/5rxteJ3+Jv+cl&#xA;f+pe1H/kTd/8142vE7/E3/OSv/Uvaj/yJu/+a8bXid/ib/nJX/qXtR/5E3f/ADXja8Tv8Tf85K/9&#xA;S9qP/Im7/wCa8bXid/ib/nJX/qXtR/5E3f8AzXja8TR83f8AOSVsDM/lzUSqCp/0a7fb/V5NX7sb&#xA;XiTnyZ/zkleDURpfmq1aCcMI3MgEbq3QivGNVP8Akuo/18dinYve9P1Cz1GzivLOQS28wqjgEdDQ&#xA;gg0IIIoQdxgIYkIjArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeOf85Hed59E0CLTb&#xA;R+FzdUckGh+IsEPyXg7f6wXJDYWyGwtN/wDnH/8AJ7S/Lnl2z8x6rbpc+Z9TjW59aUcmtYpQGSOP&#xA;l9l+Jq7danj0G4YPYsVdirsVeL/85Jfml5t8kWOjW/lxltZtTadptQaJJeAg9OkaLIHSreoSeS9t&#xA;sVeC/wDQyP50f9TF/wBOdj/1QwK2P+ckPzqY0XzDVj0H1OwH4mADCN1Jp73/AM44/md5v86Wut2v&#xA;mNku5dKkh9HUo0jjEnreoCjCILGePp1BUdDv2xV7NirsVdirzz84fyh0bz7oUxWFIfMVtGzabqCg&#xA;KxcCohlb9qNjtv8AZ6jvVV5Z/wA41ec76R7ny3qDN6sJKBH+0HRSVqPHhG6t/qrh5hnzD6AyLF2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvmH/AJytY/p3TBXb0zt8gKfrOS6JPJ9Zqqoo&#xA;RAFVRRVGwAHQAYGLeKuxV2KoDWtA0TXLP6lrNhb6jacg4guY1lQMNgwDg0Ir1GKsf/5VB+Vv/Uq6&#xA;Z/0jR/0xV3/KoPyt/wCpV0z/AKRo/wCmKsg0XQNE0Oz+paNYW+nWnIuYLaNYkLHYsQgFSadTiqPx&#xA;V2KuxV2Kvk38tqQ/85E+ZoYhwjXVNQCqNqAXUiAD/YsRhHIso8i+nMih2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KvmD/nK3/jvaZ/xjb9QyXRJ5PrXAxdirsVdirsVdirsVdirsVdirsVd&#xA;ir5N/Lz/ANaO80f9tTUf+ox8I6so8i+nMih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KvlT/nJ3UlvPMkcQjMf1GRrYkkHmfRil5Dw/vafRkjyZHk+wcDB2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2Kvk38vP/WjvNH/bU1H/AKjHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq+UP+cmbK5t/M5knKlbudpoOJqfT+rwRjlsN+UZyR5Midn2LgYOxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV8m/l5/wCtHeaP+2pqP/UY+EdWUeRfTmRQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXyn/zk5qa3vmSOIRlDYytbMSa8j6MUvIeH97TJHkyPJ9hYGDsVdirsVdirsVdirsVdirsVdirs&#xA;VfJv5ef+tHeaP+2pqP8A1GPhHVlHkX05kUOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V8k/85IrGPNdzwNQbsk/6xs7av45M8gzl9IfZmRa3Yq7FXYq7FXYq7FXYq7FXYq7FXYq+QPKUs8X&#xA;/OQnmVoW4udcuEJ/yX1QI/j+yxwx6s49X1TkWLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVfJ3/ADktYXNp5naSYqVvLhriDiSfg+rwR/FUCh5RnJHkyPJ9j4GDsVdirsVdirsVdirsVdir&#xA;sVdirsVfH/lT/wBaD8yf9t6f/uqjDHqzj1fVWRYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV8lf85IXFzL5pnWaQusN20cAP7Mf1W3biPbkxOSPJkeT7LwMHYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq+P/ACp/60H5k/7b0/8A3VRhHVnHkX1VkWLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVfJP/OSMnqebLo0pxuyu3+TZ2wyZ5BmfpD7MyLW7FXYq7FXYq7FXYq7FXYq7FXYq7FXyH5Nt&#xA;ZLr/AJyG8yxxsEZdaupatuKQ6l6hG3iEphHVnHkX1NkWLsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVfK/8AzlFp9taeYreSEENeM1xPU1+P0449vAcYxkjyZHk+vsDB2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2Kvk38vP/WjvNH/AG1NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq+YP8AnK3/AI72mf8AGNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP&#xA;/WjvNH/bU1H/AKjHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+cr&#xA;f+O9pn/GNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP/AFo7zR/21NR/6jHwjqyj&#xA;yL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/GNv1DJdEnk+tcD&#xA;F2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP8A1o7zR/21NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/GNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2Kvk38vP/WjvNH/AG1NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq+YP8AnK3/AI72mf8AGNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP/Wjv&#xA;NH/bU1H/AKjHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9&#xA;pn/GNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP/AFo7zR/21NR/6jHwjqyjyL6c&#xA;yKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/GNv1DJdEnk+tcDF2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2Kvk38vP8A1o7zR/21NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/GNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2Kvk38vP/WjvNH/AG1NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq+YP8AnK3/AI72mf8AGNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP/WjvNH/b&#xA;U1H/AKjHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/G&#xA;Nv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP/AFo7zR/21NR/6jHwjqyjyL6cyKHY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/GNv1DJdEnk+tcDF2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kvk38vP8A1o7zR/21NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq+YP+crf+O9pn/GNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kv&#xA;k38vP/WjvNH/AG1NR/6jHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+&#xA;YP8AnK3/AI72mf8AGNv1DJdEnk+tcDF2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk38vP/WjvNH/bU1H/&#xA;AKjHwjqyjyL6cyKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+Yv+cro3/TemPQ8fTO&#xA;/wDrbD/iByXRPR9YxSxzRJLEweORQ6MOhVhUHAxXYq7FXYq7FXYq7FXYq7FXYq7FXYq+TPyyZbr/&#xA;AJyF8yXMB5wyanfsjDuGuZJAf+BQnCORZR5F9O5FDsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVeS/8AOQnkWbzD5cW9tFrc2g3/ANiSYyfAfE6n/WB6DJDuZDfZR/IL87tJvNGtfKHme5XT&#xA;9e0xVtLaW6YRpcxx/DGvJqUlQAKVbduoqagBg92xV2KuxV2KuxV2KuxV2KuxV2KvKvzn/PDQ/Juk&#xA;XOnaXdR3fmydDFbW0REn1ZmFPVnpUKU6qh3JptSpxVg//ONvkO80+3n17UI2WeapTn15sKD3qqM3&#xA;L3anVThOwZnYU93yLF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtOiupRwGRgQykVBB&#xA;6gjFXj35gf8AOO+i6/O97pcgtLpv2SStPbkA3IDsGWv+VTbJXfNlYPNgQ/5x+/NG3AhtdZuUt02j&#xA;VZlUAeyi42xod6KHe3/yoX82v+r3d/8AI8f9lONDvWh3u/5UL+bX/V7u/wDkeP8Aspxod60O93/K&#xA;hfza/wCr3d/8jx/2U40O9aHe7/lQv5tf9Xu7/wCR4/7KcaHetDvd/wAqF/Nr/q93f/I8f9lONDvW&#xA;h3u/5UL+bX/V7u/+R4/7KcaHetDvd/yoX82v+r3d/wDI8f8AZTjQ71od7v8AlQv5tf8AV7u/+R4/&#xA;7KcaHetDvcfyC/NZxwk1q6MbbODOCCD12NzjQ71od7LPIv8AzjVp2lXMd7rM/wBYmjPJVXc19tuK&#xA;H/gj4EHGwE2Bye22trb2tvHb28axQRKFjjUUAAyLFVxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxVqoxVoyoOpxVYbqAdWxVTbUbRer4qotrenr1kxVRfzLpKfamAxVSbzhoK/auAMVUW89eW&#xA;l63aD5kYq5fPfllul4h+kYqqr5x0Bvs3IOKqyeZtIf7MwOKqy65pzdJK4qqrqVo3R8VVFuoG6Niq&#xA;8SxnocVXch44q3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaKg4qtMUZ6jFVjWkDdRiqk2&#xA;l2jdVxVRfQdPfqp+/FUO/lTSX+0h+/FVB/JGhP8Aair9OKqLfl55aY1NuDirS/l35aBqLcDFVZPI&#xA;2gp9mKn04qiE8p6Qn2UP34qrp5f05OiH78VVl0qzXouKqq2cC9FxVUEMY6DFVwUDFW8VdirsVdir&#xA;sVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:2a8bfaea-aa89-c746-b0ca-24f27677bd76</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:2a8bfaea-aa89-c746-b0ca-24f27677bd76</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:ca5ee88a-010b-cf47-b597-1d5acc32ef67</stRef:instanceID>
            <stRef:documentID>xmp.did:ca5ee88a-010b-cf47-b597-1d5acc32ef67</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9fd3dfa8-dbe9-4841-b882-43003030479f</stEvt:instanceID>
                  <stEvt:when>2021-02-26T15:12:26+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e0ba1688-6ce1-3748-b94f-55a8359945ea</stEvt:instanceID>
                  <stEvt:when>2021-02-26T16:06:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ca5ee88a-010b-cf47-b597-1d5acc32ef67</stEvt:instanceID>
                  <stEvt:when>2022-09-08T02:15:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 26.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2a8bfaea-aa89-c746-b0ca-24f27677bd76</stEvt:instanceID>
                  <stEvt:when>2022-09-08T02:15:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 26.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>112</xmpG:red>
                           <xmpG:green>111</xmpG:green>
                           <xmpG:blue>111</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>135</xmpG:red>
                           <xmpG:green>135</xmpG:green>
                           <xmpG:blue>135</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>178</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>178</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>218</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>246</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
250.908 476.83 mo
172.889 476.83 109.642 480.378 109.642 484.755 cv
109.642 489.133 172.889 492.681 250.908 492.681 cv
328.927 492.681 392.174 489.133 392.174 484.755 cv
392.174 480.378 328.927 476.83 250.908 476.83 cv
146.208 207.545 mo
146.208 430.641 li
146.208 449.181 161.237 464.21 179.777 464.21 cv
322.039 464.21 li
340.579 464.21 355.608 449.181 355.608 430.641 cv
355.608 68.1725 li
355.608 49.6329 340.579 34.6037 322.039 34.6037 cv
179.777 34.6037 li
161.237 34.6037 146.208 49.6329 146.208 68.1725 cv
146.208 102.487 li
145.458 102.487 li
145.458 119.324 li
146.208 119.324 li
146.208 133.478 li
145.458 133.478 li
145.458 166.279 li
146.208 166.279 li
146.208 174.744 li
145.458 174.744 li
145.458 207.545 li
146.208 207.545 li
144.758 174.744 mo
144.408 175.17 li
144.585 178.661 144.573 203.627 144.408 207.111 cv
144.758 207.537 li
144.758 207.535 li
145.458 207.535 li
145.458 174.735 li
144.758 174.735 li
144.758 174.744 li
356.834 144.382 mo
356.834 196.149 li
357.447 195.477 li
357.158 189.977 357.137 150.566 357.447 145.054 cv
356.834 144.382 li
355.608 144.368 mo
355.608 196.147 li
356.834 196.147 li
356.834 144.368 li
355.608 144.368 li
144.758 133.478 mo
144.408 133.904 li
144.585 137.395 144.573 162.361 144.408 165.845 cv
144.758 166.271 li
144.758 166.269 li
145.458 166.269 li
145.458 133.469 li
144.758 133.469 li
144.758 133.478 li
144.758 102.487 mo
144.408 102.889 li
144.585 106.192 144.573 115.618 144.408 118.913 cv
144.758 119.316 li
144.758 119.314 li
145.458 119.314 li
145.458 102.479 li
144.758 102.479 li
144.758 102.487 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.937255 .933333 .929412 rgb
f
250.908 492.681 mo
172.889 492.681 109.642 489.133 109.642 484.755 cv
109.642 480.378 172.889 476.83 250.908 476.83 cv
328.927 476.83 392.174 480.378 392.174 484.755 cv
392.174 489.133 328.927 492.681 250.908 492.681 cv
250.908 476.864 mo
173.225 476.864 110.25 480.397 110.25 484.755 cv
110.25 489.114 173.225 492.647 250.908 492.647 cv
328.591 492.647 391.566 489.114 391.566 484.755 cv
391.566 480.397 328.591 476.864 250.908 476.864 cv
f
250.908 492.647 mo
173.225 492.647 110.25 489.114 110.25 484.755 cv
110.25 480.397 173.225 476.864 250.908 476.864 cv
328.591 476.864 391.566 480.397 391.566 484.755 cv
391.566 489.114 328.591 492.647 250.908 492.647 cv
250.908 476.898 mo
173.56 476.898 110.857 480.416 110.857 484.755 cv
110.857 489.095 173.56 492.613 250.908 492.613 cv
328.256 492.613 390.959 489.095 390.959 484.755 cv
390.959 480.416 328.256 476.898 250.908 476.898 cv
f
250.908 492.613 mo
173.56 492.613 110.857 489.095 110.857 484.755 cv
110.857 480.416 173.56 476.898 250.908 476.898 cv
328.256 476.898 390.959 480.416 390.959 484.755 cv
390.959 489.095 328.256 492.613 250.908 492.613 cv
250.908 476.932 mo
173.895 476.932 111.464 480.435 111.464 484.755 cv
111.464 489.076 173.895 492.579 250.908 492.579 cv
327.921 492.579 390.352 489.076 390.352 484.755 cv
390.352 480.435 327.921 476.932 250.908 476.932 cv
f
250.908 492.579 mo
173.895 492.579 111.464 489.076 111.464 484.755 cv
111.464 480.435 173.895 476.932 250.908 476.932 cv
327.921 476.932 390.352 480.435 390.352 484.755 cv
390.352 489.076 327.921 492.579 250.908 492.579 cv
250.908 476.966 mo
174.231 476.966 112.072 480.453 112.072 484.755 cv
112.072 489.057 174.231 492.545 250.908 492.545 cv
327.585 492.545 389.744 489.057 389.744 484.755 cv
389.744 480.453 327.585 476.966 250.908 476.966 cv
f
250.908 492.545 mo
174.231 492.545 112.072 489.057 112.072 484.755 cv
112.072 480.453 174.231 476.966 250.908 476.966 cv
327.585 476.966 389.744 480.453 389.744 484.755 cv
389.744 489.057 327.585 492.545 250.908 492.545 cv
250.908 477 mo
174.566 477 112.679 480.472 112.679 484.755 cv
112.679 489.038 174.566 492.51 250.908 492.51 cv
327.25 492.51 389.137 489.038 389.137 484.755 cv
389.137 480.472 327.25 477 250.908 477 cv
f
250.908 492.51 mo
174.566 492.51 112.679 489.038 112.679 484.755 cv
112.679 480.472 174.566 477 250.908 477 cv
327.25 477 389.137 480.472 389.137 484.755 cv
389.137 489.038 327.25 492.51 250.908 492.51 cv
250.908 477.034 mo
174.901 477.034 113.286 480.491 113.286 484.755 cv
113.286 489.02 174.901 492.476 250.908 492.476 cv
326.915 492.476 388.53 489.02 388.53 484.755 cv
388.53 480.491 326.915 477.034 250.908 477.034 cv
f
250.908 492.476 mo
174.901 492.476 113.286 489.02 113.286 484.755 cv
113.286 480.491 174.901 477.034 250.908 477.034 cv
326.915 477.034 388.53 480.491 388.53 484.755 cv
388.53 489.02 326.915 492.476 250.908 492.476 cv
250.908 477.068 mo
175.237 477.068 113.893 480.51 113.893 484.755 cv
113.893 489.001 175.237 492.442 250.908 492.442 cv
326.579 492.442 387.923 489.001 387.923 484.755 cv
387.923 480.51 326.579 477.068 250.908 477.068 cv
f
250.908 492.442 mo
175.237 492.442 113.893 489.001 113.893 484.755 cv
113.893 480.51 175.237 477.068 250.908 477.068 cv
326.579 477.068 387.923 480.51 387.923 484.755 cv
387.923 489.001 326.579 492.442 250.908 492.442 cv
250.908 477.102 mo
175.572 477.102 114.501 480.529 114.501 484.755 cv
114.501 488.982 175.572 492.408 250.908 492.408 cv
326.244 492.408 387.315 488.982 387.315 484.755 cv
387.315 480.529 326.244 477.102 250.908 477.102 cv
.937255 .929412 .92549 rgb
f
250.908 492.408 mo
175.572 492.408 114.501 488.982 114.501 484.755 cv
114.501 480.529 175.572 477.102 250.908 477.102 cv
326.244 477.102 387.315 480.529 387.315 484.755 cv
387.315 488.982 326.244 492.408 250.908 492.408 cv
250.908 477.136 mo
175.908 477.136 115.108 480.548 115.108 484.755 cv
115.108 488.963 175.908 492.374 250.908 492.374 cv
325.908 492.374 386.708 488.963 386.708 484.755 cv
386.708 480.548 325.908 477.136 250.908 477.136 cv
.933333 .929412 .92549 rgb
f
250.908 492.374 mo
175.908 492.374 115.108 488.963 115.108 484.755 cv
115.108 480.548 175.908 477.136 250.908 477.136 cv
325.908 477.136 386.708 480.548 386.708 484.755 cv
386.708 488.963 325.908 492.374 250.908 492.374 cv
250.908 477.17 mo
176.243 477.17 115.715 480.566 115.715 484.755 cv
115.715 488.944 176.243 492.34 250.908 492.34 cv
325.573 492.34 386.101 488.944 386.101 484.755 cv
386.101 480.566 325.573 477.17 250.908 477.17 cv
.933333 .929412 .929412 rgb
f
250.908 492.34 mo
176.243 492.34 115.715 488.944 115.715 484.755 cv
115.715 480.566 176.243 477.17 250.908 477.17 cv
325.573 477.17 386.101 480.566 386.101 484.755 cv
386.101 488.944 325.573 492.34 250.908 492.34 cv
250.908 477.204 mo
176.578 477.204 116.322 480.585 116.322 484.755 cv
116.322 488.926 176.578 492.306 250.908 492.306 cv
325.238 492.306 385.494 488.926 385.494 484.755 cv
385.494 480.585 325.238 477.204 250.908 477.204 cv
.937255 .933333 .929412 rgb
f
250.908 492.306 mo
176.578 492.306 116.322 488.926 116.322 484.755 cv
116.322 480.585 176.578 477.204 250.908 477.204 cv
325.238 477.204 385.494 480.585 385.494 484.755 cv
385.494 488.926 325.238 492.306 250.908 492.306 cv
250.908 477.239 mo
176.914 477.239 116.929 480.604 116.929 484.755 cv
116.929 488.907 176.914 492.272 250.908 492.272 cv
324.902 492.272 384.887 488.907 384.887 484.755 cv
384.887 480.604 324.902 477.239 250.908 477.239 cv
f
250.908 492.272 mo
176.914 492.272 116.929 488.907 116.929 484.755 cv
116.929 480.604 176.914 477.239 250.908 477.239 cv
324.902 477.239 384.887 480.604 384.887 484.755 cv
384.887 488.907 324.902 492.272 250.908 492.272 cv
250.908 477.273 mo
177.249 477.273 117.537 480.623 117.537 484.755 cv
117.537 488.888 177.249 492.238 250.908 492.238 cv
324.567 492.238 384.279 488.888 384.279 484.755 cv
384.279 480.623 324.567 477.273 250.908 477.273 cv
.933333 .933333 .929412 rgb
f
250.908 492.238 mo
177.249 492.238 117.537 488.888 117.537 484.755 cv
117.537 480.623 177.249 477.273 250.908 477.273 cv
324.567 477.273 384.279 480.623 384.279 484.755 cv
384.279 488.888 324.567 492.238 250.908 492.238 cv
250.908 477.307 mo
177.584 477.307 118.144 480.642 118.144 484.755 cv
118.144 488.869 177.584 492.204 250.908 492.204 cv
324.232 492.204 383.672 488.869 383.672 484.755 cv
383.672 480.642 324.232 477.307 250.908 477.307 cv
.937255 .933333 .929412 rgb
f
250.908 492.204 mo
177.584 492.204 118.144 488.869 118.144 484.755 cv
118.144 480.642 177.584 477.307 250.908 477.307 cv
324.232 477.307 383.672 480.642 383.672 484.755 cv
383.672 488.869 324.232 492.204 250.908 492.204 cv
250.908 477.341 mo
177.92 477.341 118.751 480.66 118.751 484.755 cv
118.751 488.85 177.92 492.17 250.908 492.17 cv
323.896 492.17 383.065 488.85 383.065 484.755 cv
383.065 480.66 323.896 477.341 250.908 477.341 cv
f
250.908 492.17 mo
177.92 492.17 118.751 488.85 118.751 484.755 cv
118.751 480.66 177.92 477.341 250.908 477.341 cv
323.896 477.341 383.065 480.66 383.065 484.755 cv
383.065 488.85 323.896 492.17 250.908 492.17 cv
250.908 477.375 mo
178.255 477.375 119.359 480.679 119.359 484.755 cv
119.359 488.831 178.255 492.136 250.908 492.136 cv
323.561 492.136 382.457 488.831 382.457 484.755 cv
382.457 480.679 323.561 477.375 250.908 477.375 cv
f
250.908 492.136 mo
178.255 492.136 119.359 488.831 119.359 484.755 cv
119.359 480.679 178.255 477.375 250.908 477.375 cv
323.561 477.375 382.457 480.679 382.457 484.755 cv
382.457 488.831 323.561 492.136 250.908 492.136 cv
250.908 477.409 mo
178.591 477.409 119.966 480.698 119.966 484.755 cv
119.966 488.813 178.591 492.102 250.908 492.102 cv
323.225 492.102 381.85 488.813 381.85 484.755 cv
381.85 480.698 323.225 477.409 250.908 477.409 cv
.933333 .933333 .929412 rgb
f
250.908 492.102 mo
178.591 492.102 119.966 488.813 119.966 484.755 cv
119.966 480.698 178.591 477.409 250.908 477.409 cv
323.225 477.409 381.85 480.698 381.85 484.755 cv
381.85 488.813 323.225 492.102 250.908 492.102 cv
250.908 477.443 mo
178.926 477.443 120.573 480.717 120.573 484.755 cv
120.573 488.794 178.926 492.068 250.908 492.068 cv
322.89 492.068 381.243 488.794 381.243 484.755 cv
381.243 480.717 322.89 477.443 250.908 477.443 cv
.937255 .933333 .929412 rgb
f
250.908 492.068 mo
178.926 492.068 120.573 488.794 120.573 484.755 cv
120.573 480.717 178.926 477.443 250.908 477.443 cv
322.89 477.443 381.243 480.717 381.243 484.755 cv
381.243 488.794 322.89 492.068 250.908 492.068 cv
250.908 477.477 mo
179.261 477.477 121.18 480.736 121.18 484.755 cv
121.18 488.775 179.261 492.033 250.908 492.033 cv
322.555 492.033 380.636 488.775 380.636 484.755 cv
380.636 480.736 322.555 477.477 250.908 477.477 cv
.933333 .933333 .929412 rgb
f
250.908 492.033 mo
179.261 492.033 121.18 488.775 121.18 484.755 cv
121.18 480.736 179.261 477.477 250.908 477.477 cv
322.555 477.477 380.636 480.736 380.636 484.755 cv
380.636 488.775 322.555 492.033 250.908 492.033 cv
250.908 477.511 mo
179.597 477.511 121.788 480.754 121.788 484.755 cv
121.788 488.756 179.597 492 250.908 492 cv
322.219 492 380.028 488.756 380.028 484.755 cv
380.028 480.754 322.219 477.511 250.908 477.511 cv
.937255 .929412 .92549 rgb
f
250.908 492 mo
179.597 492 121.788 488.756 121.788 484.755 cv
121.788 480.754 179.597 477.511 250.908 477.511 cv
322.219 477.511 380.028 480.754 380.028 484.755 cv
380.028 488.756 322.219 492 250.908 492 cv
250.908 477.545 mo
179.932 477.545 122.395 480.773 122.395 484.755 cv
122.395 488.737 179.932 491.965 250.908 491.965 cv
321.884 491.965 379.421 488.737 379.421 484.755 cv
379.421 480.773 321.884 477.545 250.908 477.545 cv
.933333 .929412 .92549 rgb
f
250.908 491.965 mo
179.932 491.965 122.395 488.737 122.395 484.755 cv
122.395 480.773 179.932 477.545 250.908 477.545 cv
321.884 477.545 379.421 480.773 379.421 484.755 cv
379.421 488.737 321.884 491.965 250.908 491.965 cv
250.908 477.579 mo
180.267 477.579 123.002 480.792 123.002 484.755 cv
123.002 488.718 180.267 491.931 250.908 491.931 cv
321.548 491.931 378.814 488.718 378.814 484.755 cv
378.814 480.792 321.548 477.579 250.908 477.579 cv
f
250.908 491.931 mo
180.267 491.931 123.002 488.718 123.002 484.755 cv
123.002 480.792 180.267 477.579 250.908 477.579 cv
321.548 477.579 378.814 480.792 378.814 484.755 cv
378.814 488.718 321.548 491.931 250.908 491.931 cv
250.908 477.613 mo
180.603 477.613 123.609 480.811 123.609 484.755 cv
123.609 488.7 180.603 491.897 250.908 491.897 cv
321.213 491.897 378.207 488.7 378.207 484.755 cv
378.207 480.811 321.213 477.613 250.908 477.613 cv
.933333 .92549 .92549 rgb
f
250.908 491.897 mo
180.603 491.897 123.609 488.7 123.609 484.755 cv
123.609 480.811 180.603 477.613 250.908 477.613 cv
321.213 477.613 378.207 480.811 378.207 484.755 cv
378.207 488.7 321.213 491.897 250.908 491.897 cv
250.908 477.647 mo
180.938 477.647 124.216 480.83 124.216 484.755 cv
124.216 488.681 180.938 491.863 250.908 491.863 cv
320.878 491.863 377.6 488.681 377.6 484.755 cv
377.6 480.83 320.878 477.647 250.908 477.647 cv
.929412 .929412 .92549 rgb
f
250.908 491.863 mo
180.938 491.863 124.216 488.681 124.216 484.755 cv
124.216 480.83 180.938 477.647 250.908 477.647 cv
320.878 477.647 377.6 480.83 377.6 484.755 cv
377.6 488.681 320.878 491.863 250.908 491.863 cv
250.908 477.681 mo
181.274 477.681 124.824 480.849 124.824 484.755 cv
124.824 488.662 181.274 491.829 250.908 491.829 cv
320.542 491.829 376.992 488.662 376.992 484.755 cv
376.992 480.849 320.542 477.681 250.908 477.681 cv
.929412 .92549 .92549 rgb
f
250.908 491.829 mo
181.274 491.829 124.824 488.662 124.824 484.755 cv
124.824 480.849 181.274 477.681 250.908 477.681 cv
320.542 477.681 376.992 480.849 376.992 484.755 cv
376.992 488.662 320.542 491.829 250.908 491.829 cv
250.908 477.716 mo
181.609 477.716 125.431 480.867 125.431 484.755 cv
125.431 488.643 181.609 491.795 250.908 491.795 cv
320.207 491.795 376.385 488.643 376.385 484.755 cv
376.385 480.867 320.207 477.716 250.908 477.716 cv
.929412 .92549 .921569 rgb
f
250.908 491.795 mo
181.609 491.795 125.431 488.643 125.431 484.755 cv
125.431 480.867 181.609 477.716 250.908 477.716 cv
320.207 477.716 376.385 480.867 376.385 484.755 cv
376.385 488.643 320.207 491.795 250.908 491.795 cv
250.908 477.75 mo
181.944 477.75 126.038 480.886 126.038 484.755 cv
126.038 488.624 181.944 491.761 250.908 491.761 cv
319.872 491.761 375.778 488.624 375.778 484.755 cv
375.778 480.886 319.872 477.75 250.908 477.75 cv
f
250.908 491.761 mo
181.944 491.761 126.038 488.624 126.038 484.755 cv
126.038 480.886 181.944 477.75 250.908 477.75 cv
319.872 477.75 375.778 480.886 375.778 484.755 cv
375.778 488.624 319.872 491.761 250.908 491.761 cv
250.908 477.784 mo
182.28 477.784 126.646 480.905 126.646 484.755 cv
126.646 488.606 182.28 491.727 250.908 491.727 cv
319.536 491.727 375.17 488.606 375.17 484.755 cv
375.17 480.905 319.536 477.784 250.908 477.784 cv
f
250.908 491.727 mo
182.28 491.727 126.646 488.606 126.646 484.755 cv
126.646 480.905 182.28 477.784 250.908 477.784 cv
319.536 477.784 375.17 480.905 375.17 484.755 cv
375.17 488.606 319.536 491.727 250.908 491.727 cv
250.908 477.818 mo
182.615 477.818 127.253 480.924 127.253 484.755 cv
127.253 488.587 182.615 491.693 250.908 491.693 cv
319.201 491.693 374.563 488.587 374.563 484.755 cv
374.563 480.924 319.201 477.818 250.908 477.818 cv
f
250.908 491.693 mo
182.615 491.693 127.253 488.587 127.253 484.755 cv
127.253 480.924 182.615 477.818 250.908 477.818 cv
319.201 477.818 374.563 480.924 374.563 484.755 cv
374.563 488.587 319.201 491.693 250.908 491.693 cv
250.908 477.852 mo
182.951 477.852 127.86 480.943 127.86 484.755 cv
127.86 488.568 182.951 491.659 250.908 491.659 cv
318.865 491.659 373.956 488.568 373.956 484.755 cv
373.956 480.943 318.865 477.852 250.908 477.852 cv
f
250.908 491.659 mo
182.951 491.659 127.86 488.568 127.86 484.755 cv
127.86 480.943 182.951 477.852 250.908 477.852 cv
318.865 477.852 373.956 480.943 373.956 484.755 cv
373.956 488.568 318.865 491.659 250.908 491.659 cv
250.908 477.886 mo
183.286 477.886 128.467 480.961 128.467 484.755 cv
128.467 488.549 183.286 491.625 250.908 491.625 cv
318.53 491.625 373.349 488.549 373.349 484.755 cv
373.349 480.961 318.53 477.886 250.908 477.886 cv
f
250.908 491.625 mo
183.286 491.625 128.467 488.549 128.467 484.755 cv
128.467 480.961 183.286 477.886 250.908 477.886 cv
318.53 477.886 373.349 480.961 373.349 484.755 cv
373.349 488.549 318.53 491.625 250.908 491.625 cv
250.908 477.92 mo
183.621 477.92 129.074 480.98 129.074 484.755 cv
129.074 488.53 183.621 491.591 250.908 491.591 cv
318.195 491.591 372.741 488.53 372.741 484.755 cv
372.741 480.98 318.195 477.92 250.908 477.92 cv
f
250.908 491.591 mo
183.621 491.591 129.074 488.53 129.074 484.755 cv
129.074 480.98 183.621 477.92 250.908 477.92 cv
318.195 477.92 372.741 480.98 372.741 484.755 cv
372.741 488.53 318.195 491.591 250.908 491.591 cv
250.908 477.954 mo
183.957 477.954 129.682 480.999 129.682 484.755 cv
129.682 488.511 183.957 491.557 250.908 491.557 cv
317.859 491.557 372.134 488.511 372.134 484.755 cv
372.134 480.999 317.859 477.954 250.908 477.954 cv
f
250.908 491.557 mo
183.957 491.557 129.682 488.511 129.682 484.755 cv
129.682 480.999 183.957 477.954 250.908 477.954 cv
317.859 477.954 372.134 480.999 372.134 484.755 cv
372.134 488.511 317.859 491.557 250.908 491.557 cv
250.908 477.988 mo
184.292 477.988 130.289 481.018 130.289 484.755 cv
130.289 488.493 184.292 491.523 250.908 491.523 cv
317.524 491.523 371.527 488.493 371.527 484.755 cv
371.527 481.018 317.524 477.988 250.908 477.988 cv
.929412 .92549 .917647 rgb
f
250.908 491.523 mo
184.292 491.523 130.289 488.493 130.289 484.755 cv
130.289 481.018 184.292 477.988 250.908 477.988 cv
317.524 477.988 371.527 481.018 371.527 484.755 cv
371.527 488.493 317.524 491.523 250.908 491.523 cv
250.908 478.022 mo
184.627 478.022 130.896 481.037 130.896 484.755 cv
130.896 488.474 184.627 491.488 250.908 491.488 cv
317.189 491.488 370.92 488.474 370.92 484.755 cv
370.92 481.037 317.189 478.022 250.908 478.022 cv
f
250.908 491.488 mo
184.627 491.488 130.896 488.474 130.896 484.755 cv
130.896 481.037 184.627 478.022 250.908 478.022 cv
317.189 478.022 370.92 481.037 370.92 484.755 cv
370.92 488.474 317.189 491.488 250.908 491.488 cv
250.908 478.056 mo
184.963 478.056 131.503 481.055 131.503 484.755 cv
131.503 488.455 184.963 491.454 250.908 491.454 cv
316.853 491.454 370.313 488.455 370.313 484.755 cv
370.313 481.055 316.853 478.056 250.908 478.056 cv
.929412 .921569 .917647 rgb
f
250.908 491.454 mo
184.963 491.454 131.503 488.455 131.503 484.755 cv
131.503 481.055 184.963 478.056 250.908 478.056 cv
316.853 478.056 370.313 481.055 370.313 484.755 cv
370.313 488.455 316.853 491.454 250.908 491.454 cv
250.908 478.09 mo
185.298 478.09 132.111 481.074 132.111 484.755 cv
132.111 488.436 185.298 491.42 250.908 491.42 cv
316.518 491.42 369.705 488.436 369.705 484.755 cv
369.705 481.074 316.518 478.09 250.908 478.09 cv
.921569 .921569 .917647 rgb
f
250.908 491.42 mo
185.298 491.42 132.111 488.436 132.111 484.755 cv
132.111 481.074 185.298 478.09 250.908 478.09 cv
316.518 478.09 369.705 481.074 369.705 484.755 cv
369.705 488.436 316.518 491.42 250.908 491.42 cv
250.908 478.124 mo
185.634 478.124 132.718 481.093 132.718 484.755 cv
132.718 488.417 185.634 491.386 250.908 491.386 cv
316.182 491.386 369.098 488.417 369.098 484.755 cv
369.098 481.093 316.182 478.124 250.908 478.124 cv
.921569 .917647 .917647 rgb
f
250.908 491.386 mo
185.634 491.386 132.718 488.417 132.718 484.755 cv
132.718 481.093 185.634 478.124 250.908 478.124 cv
316.182 478.124 369.098 481.093 369.098 484.755 cv
369.098 488.417 316.182 491.386 250.908 491.386 cv
250.908 478.159 mo
185.969 478.159 133.325 481.112 133.325 484.755 cv
133.325 488.399 185.969 491.352 250.908 491.352 cv
315.847 491.352 368.491 488.399 368.491 484.755 cv
368.491 481.112 315.847 478.159 250.908 478.159 cv
.921569 .917647 .913725 rgb
f
250.908 491.352 mo
185.969 491.352 133.325 488.399 133.325 484.755 cv
133.325 481.112 185.969 478.159 250.908 478.159 cv
315.847 478.159 368.491 481.112 368.491 484.755 cv
368.491 488.399 315.847 491.352 250.908 491.352 cv
250.908 478.192 mo
186.304 478.192 133.933 481.131 133.933 484.755 cv
133.933 488.38 186.304 491.318 250.908 491.318 cv
315.512 491.318 367.883 488.38 367.883 484.755 cv
367.883 481.131 315.512 478.192 250.908 478.192 cv
f
250.908 491.318 mo
186.304 491.318 133.933 488.38 133.933 484.755 cv
133.933 481.131 186.304 478.192 250.908 478.192 cv
315.512 478.192 367.883 481.131 367.883 484.755 cv
367.883 488.38 315.512 491.318 250.908 491.318 cv
250.908 478.227 mo
186.64 478.227 134.54 481.15 134.54 484.755 cv
134.54 488.361 186.64 491.284 250.908 491.284 cv
315.176 491.284 367.276 488.361 367.276 484.755 cv
367.276 481.15 315.176 478.227 250.908 478.227 cv
f
250.908 491.284 mo
186.64 491.284 134.54 488.361 134.54 484.755 cv
134.54 481.15 186.64 478.227 250.908 478.227 cv
315.176 478.227 367.276 481.15 367.276 484.755 cv
367.276 488.361 315.176 491.284 250.908 491.284 cv
250.908 478.261 mo
186.975 478.261 135.147 481.168 135.147 484.755 cv
135.147 488.342 186.975 491.25 250.908 491.25 cv
314.841 491.25 366.669 488.342 366.669 484.755 cv
366.669 481.168 314.841 478.261 250.908 478.261 cv
f
250.908 491.25 mo
186.975 491.25 135.147 488.342 135.147 484.755 cv
135.147 481.168 186.975 478.261 250.908 478.261 cv
314.841 478.261 366.669 481.168 366.669 484.755 cv
366.669 488.342 314.841 491.25 250.908 491.25 cv
250.908 478.295 mo
187.31 478.295 135.754 481.187 135.754 484.755 cv
135.754 488.323 187.31 491.216 250.908 491.216 cv
314.506 491.216 366.062 488.323 366.062 484.755 cv
366.062 481.187 314.506 478.295 250.908 478.295 cv
f
250.908 491.216 mo
187.31 491.216 135.754 488.323 135.754 484.755 cv
135.754 481.187 187.31 478.295 250.908 478.295 cv
314.506 478.295 366.062 481.187 366.062 484.755 cv
366.062 488.323 314.506 491.216 250.908 491.216 cv
250.908 478.329 mo
187.646 478.329 136.361 481.206 136.361 484.755 cv
136.361 488.305 187.646 491.182 250.908 491.182 cv
314.17 491.182 365.455 488.305 365.455 484.755 cv
365.455 481.206 314.17 478.329 250.908 478.329 cv
f
250.908 491.182 mo
187.646 491.182 136.361 488.305 136.361 484.755 cv
136.361 481.206 187.646 478.329 250.908 478.329 cv
314.17 478.329 365.455 481.206 365.455 484.755 cv
365.455 488.305 314.17 491.182 250.908 491.182 cv
250.908 478.363 mo
187.981 478.363 136.969 481.225 136.969 484.755 cv
136.969 488.286 187.981 491.148 250.908 491.148 cv
313.835 491.148 364.847 488.286 364.847 484.755 cv
364.847 481.225 313.835 478.363 250.908 478.363 cv
.917647 .917647 .913725 rgb
f
250.908 491.148 mo
187.981 491.148 136.969 488.286 136.969 484.755 cv
136.969 481.225 187.981 478.363 250.908 478.363 cv
313.835 478.363 364.847 481.225 364.847 484.755 cv
364.847 488.286 313.835 491.148 250.908 491.148 cv
250.908 478.397 mo
188.317 478.397 137.576 481.244 137.576 484.755 cv
137.576 488.267 188.317 491.114 250.908 491.114 cv
313.499 491.114 364.24 488.267 364.24 484.755 cv
364.24 481.244 313.499 478.397 250.908 478.397 cv
f
250.908 491.114 mo
188.317 491.114 137.576 488.267 137.576 484.755 cv
137.576 481.244 188.317 478.397 250.908 478.397 cv
313.499 478.397 364.24 481.244 364.24 484.755 cv
364.24 488.267 313.499 491.114 250.908 491.114 cv
250.908 478.431 mo
188.652 478.431 138.183 481.262 138.183 484.755 cv
138.183 488.248 188.652 491.08 250.908 491.08 cv
313.164 491.08 363.633 488.248 363.633 484.755 cv
363.633 481.262 313.164 478.431 250.908 478.431 cv
.917647 .913725 .913725 rgb
f
250.908 491.08 mo
188.652 491.08 138.183 488.248 138.183 484.755 cv
138.183 481.262 188.652 478.431 250.908 478.431 cv
313.164 478.431 363.633 481.262 363.633 484.755 cv
363.633 488.248 313.164 491.08 250.908 491.08 cv
250.908 478.465 mo
188.987 478.465 138.79 481.281 138.79 484.755 cv
138.79 488.229 188.987 491.046 250.908 491.046 cv
312.829 491.046 363.025 488.229 363.025 484.755 cv
363.025 481.281 312.829 478.465 250.908 478.465 cv
.917647 .913725 .905882 rgb
f
250.908 491.046 mo
188.987 491.046 138.79 488.229 138.79 484.755 cv
138.79 481.281 188.987 478.465 250.908 478.465 cv
312.829 478.465 363.025 481.281 363.025 484.755 cv
363.025 488.229 312.829 491.046 250.908 491.046 cv
250.908 478.499 mo
189.323 478.499 139.398 481.3 139.398 484.755 cv
139.398 488.211 189.323 491.011 250.908 491.011 cv
312.493 491.011 362.418 488.211 362.418 484.755 cv
362.418 481.3 312.493 478.499 250.908 478.499 cv
f
250.908 491.011 mo
189.323 491.011 139.398 488.211 139.398 484.755 cv
139.398 481.3 189.323 478.499 250.908 478.499 cv
312.493 478.499 362.418 481.3 362.418 484.755 cv
362.418 488.211 312.493 491.011 250.908 491.011 cv
250.908 478.533 mo
189.658 478.533 140.005 481.319 140.005 484.755 cv
140.005 488.192 189.658 490.977 250.908 490.977 cv
312.158 490.977 361.811 488.192 361.811 484.755 cv
361.811 481.319 312.158 478.533 250.908 478.533 cv
f
250.908 490.977 mo
189.658 490.977 140.005 488.192 140.005 484.755 cv
140.005 481.319 189.658 478.533 250.908 478.533 cv
312.158 478.533 361.811 481.319 361.811 484.755 cv
361.811 488.192 312.158 490.977 250.908 490.977 cv
250.908 478.567 mo
189.993 478.567 140.612 481.338 140.612 484.755 cv
140.612 488.173 189.993 490.943 250.908 490.943 cv
311.823 490.943 361.204 488.173 361.204 484.755 cv
361.204 481.338 311.823 478.567 250.908 478.567 cv
.913725 .913725 .905882 rgb
f
250.908 490.943 mo
189.993 490.943 140.612 488.173 140.612 484.755 cv
140.612 481.338 189.993 478.567 250.908 478.567 cv
311.823 478.567 361.204 481.338 361.204 484.755 cv
361.204 488.173 311.823 490.943 250.908 490.943 cv
250.908 478.601 mo
190.329 478.601 141.22 481.357 141.22 484.755 cv
141.22 488.154 190.329 490.909 250.908 490.909 cv
311.487 490.909 360.596 488.154 360.596 484.755 cv
360.596 481.357 311.487 478.601 250.908 478.601 cv
.913725 .909804 .905882 rgb
f
250.908 490.909 mo
190.329 490.909 141.22 488.154 141.22 484.755 cv
141.22 481.357 190.329 478.601 250.908 478.601 cv
311.487 478.601 360.596 481.357 360.596 484.755 cv
360.596 488.154 311.487 490.909 250.908 490.909 cv
250.908 478.635 mo
190.664 478.635 141.827 481.375 141.827 484.755 cv
141.827 488.135 190.664 490.875 250.908 490.875 cv
311.152 490.875 359.989 488.135 359.989 484.755 cv
359.989 481.375 311.152 478.635 250.908 478.635 cv
.913725 .905882 .905882 rgb
f
250.908 490.875 mo
190.664 490.875 141.827 488.135 141.827 484.755 cv
141.827 481.375 190.664 478.635 250.908 478.635 cv
311.152 478.635 359.989 481.375 359.989 484.755 cv
359.989 488.135 311.152 490.875 250.908 490.875 cv
250.908 478.669 mo
191 478.669 142.434 481.394 142.434 484.755 cv
142.434 488.116 191 490.841 250.908 490.841 cv
310.816 490.841 359.382 488.116 359.382 484.755 cv
359.382 481.394 310.816 478.669 250.908 478.669 cv
.913725 .905882 .901961 rgb
f
250.908 490.841 mo
191 490.841 142.434 488.116 142.434 484.755 cv
142.434 481.394 191 478.669 250.908 478.669 cv
310.816 478.669 359.382 481.394 359.382 484.755 cv
359.382 488.116 310.816 490.841 250.908 490.841 cv
250.908 478.704 mo
191.335 478.704 143.041 481.413 143.041 484.755 cv
143.041 488.098 191.335 490.807 250.908 490.807 cv
310.481 490.807 358.775 488.098 358.775 484.755 cv
358.775 481.413 310.481 478.704 250.908 478.704 cv
.909804 .905882 .901961 rgb
f
250.908 490.807 mo
191.335 490.807 143.041 488.098 143.041 484.755 cv
143.041 481.413 191.335 478.704 250.908 478.704 cv
310.481 478.704 358.775 481.413 358.775 484.755 cv
358.775 488.098 310.481 490.807 250.908 490.807 cv
250.908 478.738 mo
191.67 478.738 143.648 481.432 143.648 484.755 cv
143.648 488.079 191.67 490.773 250.908 490.773 cv
310.146 490.773 358.168 488.079 358.168 484.755 cv
358.168 481.432 310.146 478.738 250.908 478.738 cv
f
250.908 490.773 mo
191.67 490.773 143.648 488.079 143.648 484.755 cv
143.648 481.432 191.67 478.738 250.908 478.738 cv
310.146 478.738 358.168 481.432 358.168 484.755 cv
358.168 488.079 310.146 490.773 250.908 490.773 cv
250.908 478.772 mo
192.006 478.772 144.256 481.451 144.256 484.755 cv
144.256 488.06 192.006 490.739 250.908 490.739 cv
309.81 490.739 357.56 488.06 357.56 484.755 cv
357.56 481.451 309.81 478.772 250.908 478.772 cv
.905882 .905882 .901961 rgb
f
250.908 490.739 mo
192.006 490.739 144.256 488.06 144.256 484.755 cv
144.256 481.451 192.006 478.772 250.908 478.772 cv
309.81 478.772 357.56 481.451 357.56 484.755 cv
357.56 488.06 309.81 490.739 250.908 490.739 cv
250.908 478.806 mo
192.341 478.806 144.863 481.47 144.863 484.755 cv
144.863 488.041 192.341 490.705 250.908 490.705 cv
309.475 490.705 356.953 488.041 356.953 484.755 cv
356.953 481.47 309.475 478.806 250.908 478.806 cv
.905882 .901961 .901961 rgb
f
250.908 490.705 mo
192.341 490.705 144.863 488.041 144.863 484.755 cv
144.863 481.47 192.341 478.806 250.908 478.806 cv
309.475 478.806 356.953 481.47 356.953 484.755 cv
356.953 488.041 309.475 490.705 250.908 490.705 cv
250.908 478.84 mo
192.676 478.84 145.47 481.488 145.47 484.755 cv
145.47 488.022 192.676 490.671 250.908 490.671 cv
309.14 490.671 356.346 488.022 356.346 484.755 cv
356.346 481.488 309.14 478.84 250.908 478.84 cv
f
250.908 490.671 mo
192.676 490.671 145.47 488.022 145.47 484.755 cv
145.47 481.488 192.676 478.84 250.908 478.84 cv
309.14 478.84 356.346 481.488 356.346 484.755 cv
356.346 488.022 309.14 490.671 250.908 490.671 cv
250.908 478.874 mo
193.012 478.874 146.077 481.507 146.077 484.755 cv
146.077 488.004 193.012 490.637 250.908 490.637 cv
308.804 490.637 355.738 488.004 355.738 484.755 cv
355.738 481.507 308.804 478.874 250.908 478.874 cv
.905882 .901961 .898039 rgb
f
250.908 490.637 mo
193.012 490.637 146.077 488.004 146.077 484.755 cv
146.077 481.507 193.012 478.874 250.908 478.874 cv
308.804 478.874 355.738 481.507 355.738 484.755 cv
355.738 488.004 308.804 490.637 250.908 490.637 cv
250.908 478.908 mo
193.347 478.908 146.685 481.526 146.685 484.755 cv
146.685 487.985 193.347 490.603 250.908 490.603 cv
308.469 490.603 355.131 487.985 355.131 484.755 cv
355.131 481.526 308.469 478.908 250.908 478.908 cv
.901961 .901961 .898039 rgb
f
250.908 490.603 mo
193.347 490.603 146.685 487.985 146.685 484.755 cv
146.685 481.526 193.347 478.908 250.908 478.908 cv
308.469 478.908 355.131 481.526 355.131 484.755 cv
355.131 487.985 308.469 490.603 250.908 490.603 cv
250.908 478.942 mo
193.682 478.942 147.292 481.545 147.292 484.755 cv
147.292 487.966 193.682 490.569 250.908 490.569 cv
308.133 490.569 354.524 487.966 354.524 484.755 cv
354.524 481.545 308.133 478.942 250.908 478.942 cv
.901961 .901961 .894118 rgb
f
250.908 490.569 mo
193.682 490.569 147.292 487.966 147.292 484.755 cv
147.292 481.545 193.682 478.942 250.908 478.942 cv
308.133 478.942 354.524 481.545 354.524 484.755 cv
354.524 487.966 308.133 490.569 250.908 490.569 cv
250.908 478.976 mo
194.018 478.976 147.899 481.564 147.899 484.755 cv
147.899 487.947 194.018 490.534 250.908 490.534 cv
307.798 490.534 353.917 487.947 353.917 484.755 cv
353.917 481.564 307.798 478.976 250.908 478.976 cv
.901961 .898039 .894118 rgb
f
250.908 490.534 mo
194.018 490.534 147.899 487.947 147.899 484.755 cv
147.899 481.564 194.018 478.976 250.908 478.976 cv
307.798 478.976 353.917 481.564 353.917 484.755 cv
353.917 487.947 307.798 490.534 250.908 490.534 cv
250.908 479.01 mo
194.353 479.01 148.507 481.582 148.507 484.755 cv
148.507 487.928 194.353 490.5 250.908 490.5 cv
307.463 490.5 353.309 487.928 353.309 484.755 cv
353.309 481.582 307.463 479.01 250.908 479.01 cv
f
250.908 490.5 mo
194.353 490.5 148.507 487.928 148.507 484.755 cv
148.507 481.582 194.353 479.01 250.908 479.01 cv
307.463 479.01 353.309 481.582 353.309 484.755 cv
353.309 487.928 307.463 490.5 250.908 490.5 cv
250.908 479.044 mo
194.689 479.044 149.114 481.601 149.114 484.755 cv
149.114 487.909 194.689 490.466 250.908 490.466 cv
307.127 490.466 352.702 487.909 352.702 484.755 cv
352.702 481.601 307.127 479.044 250.908 479.044 cv
.898039 .894118 .890196 rgb
f
250.908 490.466 mo
194.689 490.466 149.114 487.909 149.114 484.755 cv
149.114 481.601 194.689 479.044 250.908 479.044 cv
307.127 479.044 352.702 481.601 352.702 484.755 cv
352.702 487.909 307.127 490.466 250.908 490.466 cv
250.908 479.078 mo
195.024 479.078 149.721 481.62 149.721 484.755 cv
149.721 487.891 195.024 490.432 250.908 490.432 cv
306.792 490.432 352.095 487.891 352.095 484.755 cv
352.095 481.62 306.792 479.078 250.908 479.078 cv
.898039 .898039 .890196 rgb
f
250.908 490.432 mo
195.024 490.432 149.721 487.891 149.721 484.755 cv
149.721 481.62 195.024 479.078 250.908 479.078 cv
306.792 479.078 352.095 481.62 352.095 484.755 cv
352.095 487.891 306.792 490.432 250.908 490.432 cv
250.908 479.112 mo
195.359 479.112 150.328 481.639 150.328 484.755 cv
150.328 487.872 195.359 490.398 250.908 490.398 cv
306.457 490.398 351.488 487.872 351.488 484.755 cv
351.488 481.639 306.457 479.112 250.908 479.112 cv
.898039 .894118 .890196 rgb
f
250.908 490.398 mo
195.359 490.398 150.328 487.872 150.328 484.755 cv
150.328 481.639 195.359 479.112 250.908 479.112 cv
306.457 479.112 351.488 481.639 351.488 484.755 cv
351.488 487.872 306.457 490.398 250.908 490.398 cv
250.908 479.146 mo
195.695 479.146 150.935 481.658 150.935 484.755 cv
150.935 487.853 195.695 490.364 250.908 490.364 cv
306.121 490.364 350.881 487.853 350.881 484.755 cv
350.881 481.658 306.121 479.146 250.908 479.146 cv
.898039 .890196 .890196 rgb
f
250.908 490.364 mo
195.695 490.364 150.935 487.853 150.935 484.755 cv
150.935 481.658 195.695 479.146 250.908 479.146 cv
306.121 479.146 350.881 481.658 350.881 484.755 cv
350.881 487.853 306.121 490.364 250.908 490.364 cv
250.908 479.181 mo
196.03 479.181 151.543 481.677 151.543 484.755 cv
151.543 487.834 196.03 490.33 250.908 490.33 cv
305.786 490.33 350.273 487.834 350.273 484.755 cv
350.273 481.677 305.786 479.181 250.908 479.181 cv
.898039 .890196 .886274 rgb
f
250.908 490.33 mo
196.03 490.33 151.543 487.834 151.543 484.755 cv
151.543 481.677 196.03 479.181 250.908 479.181 cv
305.786 479.181 350.273 481.677 350.273 484.755 cv
350.273 487.834 305.786 490.33 250.908 490.33 cv
250.908 479.215 mo
196.365 479.215 152.15 481.695 152.15 484.755 cv
152.15 487.815 196.365 490.296 250.908 490.296 cv
305.451 490.296 349.666 487.815 349.666 484.755 cv
349.666 481.695 305.451 479.215 250.908 479.215 cv
.890196 .890196 .886274 rgb
f
250.908 490.296 mo
196.365 490.296 152.15 487.815 152.15 484.755 cv
152.15 481.695 196.365 479.215 250.908 479.215 cv
305.451 479.215 349.666 481.695 349.666 484.755 cv
349.666 487.815 305.451 490.296 250.908 490.296 cv
250.908 479.249 mo
196.701 479.249 152.757 481.714 152.757 484.755 cv
152.757 487.796 196.701 490.262 250.908 490.262 cv
305.115 490.262 349.059 487.796 349.059 484.755 cv
349.059 481.714 305.115 479.249 250.908 479.249 cv
.890196 .886274 .886274 rgb
f
250.908 490.262 mo
196.701 490.262 152.757 487.796 152.757 484.755 cv
152.757 481.714 196.701 479.249 250.908 479.249 cv
305.115 479.249 349.059 481.714 349.059 484.755 cv
349.059 487.796 305.115 490.262 250.908 490.262 cv
250.908 479.283 mo
197.036 479.283 153.365 481.733 153.365 484.755 cv
153.365 487.778 197.036 490.228 250.908 490.228 cv
304.78 490.228 348.451 487.778 348.451 484.755 cv
348.451 481.733 304.78 479.283 250.908 479.283 cv
.890196 .886274 .882353 rgb
f
250.908 490.228 mo
197.036 490.228 153.365 487.778 153.365 484.755 cv
153.365 481.733 197.036 479.283 250.908 479.283 cv
304.78 479.283 348.451 481.733 348.451 484.755 cv
348.451 487.778 304.78 490.228 250.908 490.228 cv
250.908 479.317 mo
197.372 479.317 153.972 481.752 153.972 484.755 cv
153.972 487.759 197.372 490.194 250.908 490.194 cv
304.444 490.194 347.844 487.759 347.844 484.755 cv
347.844 481.752 304.444 479.317 250.908 479.317 cv
f
250.908 490.194 mo
197.372 490.194 153.972 487.759 153.972 484.755 cv
153.972 481.752 197.372 479.317 250.908 479.317 cv
304.444 479.317 347.844 481.752 347.844 484.755 cv
347.844 487.759 304.444 490.194 250.908 490.194 cv
250.908 479.351 mo
197.707 479.351 154.579 481.771 154.579 484.755 cv
154.579 487.74 197.707 490.16 250.908 490.16 cv
304.109 490.16 347.237 487.74 347.237 484.755 cv
347.237 481.771 304.109 479.351 250.908 479.351 cv
.886274 .882353 .882353 rgb
f
250.908 490.16 mo
197.707 490.16 154.579 487.74 154.579 484.755 cv
154.579 481.771 197.707 479.351 250.908 479.351 cv
304.109 479.351 347.237 481.771 347.237 484.755 cv
347.237 487.74 304.109 490.16 250.908 490.16 cv
250.908 479.385 mo
198.042 479.385 155.186 481.789 155.186 484.755 cv
155.186 487.721 198.042 490.126 250.908 490.126 cv
303.774 490.126 346.63 487.721 346.63 484.755 cv
346.63 481.789 303.774 479.385 250.908 479.385 cv
.890196 .882353 .882353 rgb
f
250.908 490.126 mo
198.042 490.126 155.186 487.721 155.186 484.755 cv
155.186 481.789 198.042 479.385 250.908 479.385 cv
303.774 479.385 346.63 481.789 346.63 484.755 cv
346.63 487.721 303.774 490.126 250.908 490.126 cv
250.908 479.419 mo
198.378 479.419 155.794 481.808 155.794 484.755 cv
155.794 487.702 198.378 490.092 250.908 490.092 cv
303.438 490.092 346.022 487.702 346.022 484.755 cv
346.022 481.808 303.438 479.419 250.908 479.419 cv
.882353 .882353 .878431 rgb
f
250.908 490.092 mo
198.378 490.092 155.794 487.702 155.794 484.755 cv
155.794 481.808 198.378 479.419 250.908 479.419 cv
303.438 479.419 346.022 481.808 346.022 484.755 cv
346.022 487.702 303.438 490.092 250.908 490.092 cv
250.908 479.453 mo
198.713 479.453 156.401 481.827 156.401 484.755 cv
156.401 487.684 198.713 490.058 250.908 490.058 cv
303.103 490.058 345.415 487.684 345.415 484.755 cv
345.415 481.827 303.103 479.453 250.908 479.453 cv
f
250.908 490.058 mo
198.713 490.058 156.401 487.684 156.401 484.755 cv
156.401 481.827 198.713 479.453 250.908 479.453 cv
303.103 479.453 345.415 481.827 345.415 484.755 cv
345.415 487.684 303.103 490.058 250.908 490.058 cv
250.908 479.487 mo
199.048 479.487 157.008 481.846 157.008 484.755 cv
157.008 487.665 199.048 490.023 250.908 490.023 cv
302.768 490.023 344.808 487.665 344.808 484.755 cv
344.808 481.846 302.768 479.487 250.908 479.487 cv
.882353 .878431 .878431 rgb
f
250.908 490.023 mo
199.048 490.023 157.008 487.665 157.008 484.755 cv
157.008 481.846 199.048 479.487 250.908 479.487 cv
302.768 479.487 344.808 481.846 344.808 484.755 cv
344.808 487.665 302.768 490.023 250.908 490.023 cv
250.908 479.521 mo
199.384 479.521 157.615 481.865 157.615 484.755 cv
157.615 487.646 199.384 489.989 250.908 489.989 cv
302.432 489.989 344.201 487.646 344.201 484.755 cv
344.201 481.865 302.432 479.521 250.908 479.521 cv
f
250.908 489.989 mo
199.384 489.989 157.615 487.646 157.615 484.755 cv
157.615 481.865 199.384 479.521 250.908 479.521 cv
302.432 479.521 344.201 481.865 344.201 484.755 cv
344.201 487.646 302.432 489.989 250.908 489.989 cv
250.908 479.555 mo
199.719 479.555 158.222 481.883 158.222 484.755 cv
158.222 487.627 199.719 489.955 250.908 489.955 cv
302.097 489.955 343.594 487.627 343.594 484.755 cv
343.594 481.883 302.097 479.555 250.908 479.555 cv
.878431 .878431 .870588 rgb
f
250.908 489.955 mo
199.719 489.955 158.222 487.627 158.222 484.755 cv
158.222 481.883 199.719 479.555 250.908 479.555 cv
302.097 479.555 343.594 481.883 343.594 484.755 cv
343.594 487.627 302.097 489.955 250.908 489.955 cv
250.908 479.589 mo
200.055 479.589 158.83 481.902 158.83 484.755 cv
158.83 487.608 200.055 489.921 250.908 489.921 cv
301.761 489.921 342.986 487.608 342.986 484.755 cv
342.986 481.902 301.761 479.589 250.908 479.589 cv
.878431 .878431 .87451 rgb
f
250.908 489.921 mo
200.055 489.921 158.83 487.608 158.83 484.755 cv
158.83 481.902 200.055 479.589 250.908 479.589 cv
301.761 479.589 342.986 481.902 342.986 484.755 cv
342.986 487.608 301.761 489.921 250.908 489.921 cv
250.908 479.623 mo
200.39 479.623 159.437 481.921 159.437 484.755 cv
159.437 487.59 200.39 489.887 250.908 489.887 cv
301.426 489.887 342.379 487.59 342.379 484.755 cv
342.379 481.921 301.426 479.623 250.908 479.623 cv
.878431 .87451 .870588 rgb
f
250.908 489.887 mo
200.39 489.887 159.437 487.59 159.437 484.755 cv
159.437 481.921 200.39 479.623 250.908 479.623 cv
301.426 479.623 342.379 481.921 342.379 484.755 cv
342.379 487.59 301.426 489.887 250.908 489.887 cv
250.908 479.657 mo
200.725 479.657 160.044 481.94 160.044 484.755 cv
160.044 487.571 200.725 489.853 250.908 489.853 cv
301.091 489.853 341.772 487.571 341.772 484.755 cv
341.772 481.94 301.091 479.657 250.908 479.657 cv
.87451 .87451 .866667 rgb
f
250.908 489.853 mo
200.725 489.853 160.044 487.571 160.044 484.755 cv
160.044 481.94 200.725 479.657 250.908 479.657 cv
301.091 479.657 341.772 481.94 341.772 484.755 cv
341.772 487.571 301.091 489.853 250.908 489.853 cv
250.908 479.692 mo
201.061 479.692 160.652 481.959 160.652 484.755 cv
160.652 487.552 201.061 489.819 250.908 489.819 cv
300.755 489.819 341.164 487.552 341.164 484.755 cv
341.164 481.959 300.755 479.692 250.908 479.692 cv
.87451 .866667 .866667 rgb
f
250.908 489.819 mo
201.061 489.819 160.652 487.552 160.652 484.755 cv
160.652 481.959 201.061 479.692 250.908 479.692 cv
300.755 479.692 341.164 481.959 341.164 484.755 cv
341.164 487.552 300.755 489.819 250.908 489.819 cv
250.908 479.726 mo
201.396 479.726 161.259 481.977 161.259 484.755 cv
161.259 487.533 201.396 489.785 250.908 489.785 cv
300.42 489.785 340.557 487.533 340.557 484.755 cv
340.557 481.977 300.42 479.726 250.908 479.726 cv
.87451 .870588 .862745 rgb
f
250.908 489.785 mo
201.396 489.785 161.259 487.533 161.259 484.755 cv
161.259 481.977 201.396 479.726 250.908 479.726 cv
300.42 479.726 340.557 481.977 340.557 484.755 cv
340.557 487.533 300.42 489.785 250.908 489.785 cv
250.908 479.76 mo
201.731 479.76 161.866 481.996 161.866 484.755 cv
161.866 487.514 201.731 489.751 250.908 489.751 cv
300.085 489.751 339.95 487.514 339.95 484.755 cv
339.95 481.996 300.085 479.76 250.908 479.76 cv
.870588 .866667 .862745 rgb
f
250.908 489.751 mo
201.731 489.751 161.866 487.514 161.866 484.755 cv
161.866 481.996 201.731 479.76 250.908 479.76 cv
300.085 479.76 339.95 481.996 339.95 484.755 cv
339.95 487.514 300.085 489.751 250.908 489.751 cv
250.908 479.794 mo
202.067 479.794 162.473 482.015 162.473 484.755 cv
162.473 487.495 202.067 489.717 250.908 489.717 cv
299.749 489.717 339.343 487.495 339.343 484.755 cv
339.343 482.015 299.749 479.794 250.908 479.794 cv
f
250.908 489.717 mo
202.067 489.717 162.473 487.495 162.473 484.755 cv
162.473 482.015 202.067 479.794 250.908 479.794 cv
299.749 479.794 339.343 482.015 339.343 484.755 cv
339.343 487.495 299.749 489.717 250.908 489.717 cv
250.908 479.828 mo
202.402 479.828 163.08 482.034 163.08 484.755 cv
163.08 487.477 202.402 489.683 250.908 489.683 cv
299.414 489.683 338.736 487.477 338.736 484.755 cv
338.736 482.034 299.414 479.828 250.908 479.828 cv
.870588 .862745 .862745 rgb
f
250.908 489.683 mo
202.402 489.683 163.08 487.477 163.08 484.755 cv
163.08 482.034 202.402 479.828 250.908 479.828 cv
299.414 479.828 338.736 482.034 338.736 484.755 cv
338.736 487.477 299.414 489.683 250.908 489.683 cv
250.908 479.862 mo
202.738 479.862 163.688 482.053 163.688 484.755 cv
163.688 487.458 202.738 489.649 250.908 489.649 cv
299.078 489.649 338.128 487.458 338.128 484.755 cv
338.128 482.053 299.078 479.862 250.908 479.862 cv
.866667 .862745 .858823 rgb
f
250.908 489.649 mo
202.738 489.649 163.688 487.458 163.688 484.755 cv
163.688 482.053 202.738 479.862 250.908 479.862 cv
299.078 479.862 338.128 482.053 338.128 484.755 cv
338.128 487.458 299.078 489.649 250.908 489.649 cv
250.908 479.896 mo
203.073 479.896 164.295 482.072 164.295 484.755 cv
164.295 487.439 203.073 489.615 250.908 489.615 cv
298.743 489.615 337.521 487.439 337.521 484.755 cv
337.521 482.072 298.743 479.896 250.908 479.896 cv
.862745 .858823 .858823 rgb
f
250.908 489.615 mo
203.073 489.615 164.295 487.439 164.295 484.755 cv
164.295 482.072 203.073 479.896 250.908 479.896 cv
298.743 479.896 337.521 482.072 337.521 484.755 cv
337.521 487.439 298.743 489.615 250.908 489.615 cv
250.908 479.93 mo
203.408 479.93 164.902 482.09 164.902 484.755 cv
164.902 487.42 203.408 489.581 250.908 489.581 cv
298.408 489.581 336.914 487.42 336.914 484.755 cv
336.914 482.09 298.408 479.93 250.908 479.93 cv
.866667 .858823 .854902 rgb
f
250.908 489.581 mo
203.408 489.581 164.902 487.42 164.902 484.755 cv
164.902 482.09 203.408 479.93 250.908 479.93 cv
298.408 479.93 336.914 482.09 336.914 484.755 cv
336.914 487.42 298.408 489.581 250.908 489.581 cv
250.908 479.964 mo
203.744 479.964 165.509 482.109 165.509 484.755 cv
165.509 487.401 203.744 489.546 250.908 489.546 cv
298.072 489.546 336.306 487.401 336.306 484.755 cv
336.306 482.109 298.072 479.964 250.908 479.964 cv
.862745 .858823 .854902 rgb
f
250.908 489.546 mo
203.744 489.546 165.509 487.401 165.509 484.755 cv
165.509 482.109 203.744 479.964 250.908 479.964 cv
298.072 479.964 336.306 482.109 336.306 484.755 cv
336.306 487.401 298.072 489.546 250.908 489.546 cv
250.908 479.998 mo
204.079 479.998 166.117 482.128 166.117 484.755 cv
166.117 487.383 204.079 489.512 250.908 489.512 cv
297.737 489.512 335.699 487.383 335.699 484.755 cv
335.699 482.128 297.737 479.998 250.908 479.998 cv
.858823 .854902 .854902 rgb
f
250.908 489.512 mo
204.079 489.512 166.117 487.383 166.117 484.755 cv
166.117 482.128 204.079 479.998 250.908 479.998 cv
297.737 479.998 335.699 482.128 335.699 484.755 cv
335.699 487.383 297.737 489.512 250.908 489.512 cv
250.908 480.032 mo
204.414 480.032 166.724 482.147 166.724 484.755 cv
166.724 487.364 204.414 489.478 250.908 489.478 cv
297.401 489.478 335.092 487.364 335.092 484.755 cv
335.092 482.147 297.401 480.032 250.908 480.032 cv
f
250.908 489.478 mo
204.414 489.478 166.724 487.364 166.724 484.755 cv
166.724 482.147 204.414 480.032 250.908 480.032 cv
297.401 480.032 335.092 482.147 335.092 484.755 cv
335.092 487.364 297.401 489.478 250.908 489.478 cv
250.908 480.066 mo
204.75 480.066 167.331 482.166 167.331 484.755 cv
167.331 487.345 204.75 489.444 250.908 489.444 cv
297.066 489.444 334.485 487.345 334.485 484.755 cv
334.485 482.166 297.066 480.066 250.908 480.066 cv
.854902 .854902 .85098 rgb
f
250.908 489.444 mo
204.75 489.444 167.331 487.345 167.331 484.755 cv
167.331 482.166 204.75 480.066 250.908 480.066 cv
297.066 480.066 334.485 482.166 334.485 484.755 cv
334.485 487.345 297.066 489.444 250.908 489.444 cv
250.908 480.1 mo
205.085 480.1 167.939 482.184 167.939 484.755 cv
167.939 487.326 205.085 489.41 250.908 489.41 cv
296.731 489.41 333.877 487.326 333.877 484.755 cv
333.877 482.184 296.731 480.1 250.908 480.1 cv
.85098 .85098 .847059 rgb
f
250.908 489.41 mo
205.085 489.41 167.939 487.326 167.939 484.755 cv
167.939 482.184 205.085 480.1 250.908 480.1 cv
296.731 480.1 333.877 482.184 333.877 484.755 cv
333.877 487.326 296.731 489.41 250.908 489.41 cv
250.908 480.134 mo
205.421 480.134 168.546 482.203 168.546 484.755 cv
168.546 487.307 205.421 489.376 250.908 489.376 cv
296.395 489.376 333.27 487.307 333.27 484.755 cv
333.27 482.203 296.395 480.134 250.908 480.134 cv
f
250.908 489.376 mo
205.421 489.376 168.546 487.307 168.546 484.755 cv
168.546 482.203 205.421 480.134 250.908 480.134 cv
296.395 480.134 333.27 482.203 333.27 484.755 cv
333.27 487.307 296.395 489.376 250.908 489.376 cv
250.908 480.169 mo
205.756 480.169 169.153 482.222 169.153 484.755 cv
169.153 487.289 205.756 489.342 250.908 489.342 cv
296.06 489.342 332.663 487.289 332.663 484.755 cv
332.663 482.222 296.06 480.169 250.908 480.169 cv
.85098 .847059 .843137 rgb
f
250.908 489.342 mo
205.756 489.342 169.153 487.289 169.153 484.755 cv
169.153 482.222 205.756 480.169 250.908 480.169 cv
296.06 480.169 332.663 482.222 332.663 484.755 cv
332.663 487.289 296.06 489.342 250.908 489.342 cv
250.908 480.203 mo
206.091 480.203 169.76 482.241 169.76 484.755 cv
169.76 487.27 206.091 489.308 250.908 489.308 cv
295.725 489.308 332.056 487.27 332.056 484.755 cv
332.056 482.241 295.725 480.203 250.908 480.203 cv
.85098 .847059 .839216 rgb
f
250.908 489.308 mo
206.091 489.308 169.76 487.27 169.76 484.755 cv
169.76 482.241 206.091 480.203 250.908 480.203 cv
295.725 480.203 332.056 482.241 332.056 484.755 cv
332.056 487.27 295.725 489.308 250.908 489.308 cv
250.908 480.237 mo
206.427 480.237 170.367 482.26 170.367 484.755 cv
170.367 487.251 206.427 489.274 250.908 489.274 cv
295.389 489.274 331.448 487.251 331.448 484.755 cv
331.448 482.26 295.389 480.237 250.908 480.237 cv
.847059 .843137 .843137 rgb
f
250.908 489.274 mo
206.427 489.274 170.367 487.251 170.367 484.755 cv
170.367 482.26 206.427 480.237 250.908 480.237 cv
295.389 480.237 331.448 482.26 331.448 484.755 cv
331.448 487.251 295.389 489.274 250.908 489.274 cv
250.908 480.271 mo
206.762 480.271 170.975 482.279 170.975 484.755 cv
170.975 487.232 206.762 489.24 250.908 489.24 cv
295.054 489.24 330.841 487.232 330.841 484.755 cv
330.841 482.279 295.054 480.271 250.908 480.271 cv
.847059 .843137 .839216 rgb
f
250.908 489.24 mo
206.762 489.24 170.975 487.232 170.975 484.755 cv
170.975 482.279 206.762 480.271 250.908 480.271 cv
295.054 480.271 330.841 482.279 330.841 484.755 cv
330.841 487.232 295.054 489.24 250.908 489.24 cv
250.908 480.305 mo
207.098 480.305 171.582 482.297 171.582 484.755 cv
171.582 487.213 207.098 489.206 250.908 489.206 cv
294.718 489.206 330.234 487.213 330.234 484.755 cv
330.234 482.297 294.718 480.305 250.908 480.305 cv
.843137 .843137 .835294 rgb
f
250.908 489.206 mo
207.098 489.206 171.582 487.213 171.582 484.755 cv
171.582 482.297 207.098 480.305 250.908 480.305 cv
294.718 480.305 330.234 482.297 330.234 484.755 cv
330.234 487.213 294.718 489.206 250.908 489.206 cv
250.908 480.339 mo
207.433 480.339 172.189 482.316 172.189 484.755 cv
172.189 487.194 207.433 489.172 250.908 489.172 cv
294.383 489.172 329.627 487.194 329.627 484.755 cv
329.627 482.316 294.383 480.339 250.908 480.339 cv
.843137 .839216 .835294 rgb
f
250.908 489.172 mo
207.433 489.172 172.189 487.194 172.189 484.755 cv
172.189 482.316 207.433 480.339 250.908 480.339 cv
294.383 480.339 329.627 482.316 329.627 484.755 cv
329.627 487.194 294.383 489.172 250.908 489.172 cv
250.908 480.373 mo
207.768 480.373 172.796 482.335 172.796 484.755 cv
172.796 487.176 207.768 489.138 250.908 489.138 cv
294.048 489.138 329.02 487.176 329.02 484.755 cv
329.02 482.335 294.048 480.373 250.908 480.373 cv
.839216 .839216 .831372 rgb
f
250.908 489.138 mo
207.768 489.138 172.796 487.176 172.796 484.755 cv
172.796 482.335 207.768 480.373 250.908 480.373 cv
294.048 480.373 329.02 482.335 329.02 484.755 cv
329.02 487.176 294.048 489.138 250.908 489.138 cv
250.908 480.407 mo
208.104 480.407 173.404 482.354 173.404 484.755 cv
173.404 487.157 208.104 489.104 250.908 489.104 cv
293.712 489.104 328.412 487.157 328.412 484.755 cv
328.412 482.354 293.712 480.407 250.908 480.407 cv
f
250.908 489.104 mo
208.104 489.104 173.404 487.157 173.404 484.755 cv
173.404 482.354 208.104 480.407 250.908 480.407 cv
293.712 480.407 328.412 482.354 328.412 484.755 cv
328.412 487.157 293.712 489.104 250.908 489.104 cv
250.908 480.441 mo
208.439 480.441 174.011 482.373 174.011 484.755 cv
174.011 487.138 208.439 489.069 250.908 489.069 cv
293.377 489.069 327.805 487.138 327.805 484.755 cv
327.805 482.373 293.377 480.441 250.908 480.441 cv
.839216 .831372 .827451 rgb
f
250.908 489.069 mo
208.439 489.069 174.011 487.138 174.011 484.755 cv
174.011 482.373 208.439 480.441 250.908 480.441 cv
293.377 480.441 327.805 482.373 327.805 484.755 cv
327.805 487.138 293.377 489.069 250.908 489.069 cv
250.908 480.475 mo
208.774 480.475 174.618 482.392 174.618 484.755 cv
174.618 487.119 208.774 489.036 250.908 489.036 cv
293.042 489.036 327.198 487.119 327.198 484.755 cv
327.198 482.392 293.042 480.475 250.908 480.475 cv
.835294 .831372 .827451 rgb
f
250.908 489.036 mo
208.774 489.036 174.618 487.119 174.618 484.755 cv
174.618 482.392 208.774 480.475 250.908 480.475 cv
293.042 480.475 327.198 482.392 327.198 484.755 cv
327.198 487.119 293.042 489.036 250.908 489.036 cv
250.908 480.509 mo
209.11 480.509 175.226 482.41 175.226 484.755 cv
175.226 487.1 209.11 489.001 250.908 489.001 cv
292.706 489.001 326.59 487.1 326.59 484.755 cv
326.59 482.41 292.706 480.509 250.908 480.509 cv
.835294 .827451 .827451 rgb
f
250.908 489.001 mo
209.11 489.001 175.226 487.1 175.226 484.755 cv
175.226 482.41 209.11 480.509 250.908 480.509 cv
292.706 480.509 326.59 482.41 326.59 484.755 cv
326.59 487.1 292.706 489.001 250.908 489.001 cv
250.908 480.543 mo
209.445 480.543 175.833 482.429 175.833 484.755 cv
175.833 487.082 209.445 488.967 250.908 488.967 cv
292.371 488.967 325.983 487.082 325.983 484.755 cv
325.983 482.429 292.371 480.543 250.908 480.543 cv
.831372 .827451 .823529 rgb
f
250.908 488.967 mo
209.445 488.967 175.833 487.082 175.833 484.755 cv
175.833 482.429 209.445 480.543 250.908 480.543 cv
292.371 480.543 325.983 482.429 325.983 484.755 cv
325.983 487.082 292.371 488.967 250.908 488.967 cv
250.908 480.577 mo
209.781 480.577 176.44 482.448 176.44 484.755 cv
176.44 487.063 209.781 488.933 250.908 488.933 cv
292.035 488.933 325.376 487.063 325.376 484.755 cv
325.376 482.448 292.035 480.577 250.908 480.577 cv
.831372 .823529 .823529 rgb
f
250.908 488.933 mo
209.781 488.933 176.44 487.063 176.44 484.755 cv
176.44 482.448 209.781 480.577 250.908 480.577 cv
292.035 480.577 325.376 482.448 325.376 484.755 cv
325.376 487.063 292.035 488.933 250.908 488.933 cv
250.908 480.611 mo
210.116 480.611 177.047 482.467 177.047 484.755 cv
177.047 487.044 210.116 488.899 250.908 488.899 cv
291.7 488.899 324.769 487.044 324.769 484.755 cv
324.769 482.467 291.7 480.611 250.908 480.611 cv
.827451 .823529 .819608 rgb
f
250.908 488.899 mo
210.116 488.899 177.047 487.044 177.047 484.755 cv
177.047 482.467 210.116 480.611 250.908 480.611 cv
291.7 480.611 324.769 482.467 324.769 484.755 cv
324.769 487.044 291.7 488.899 250.908 488.899 cv
250.908 480.646 mo
210.451 480.646 177.654 482.486 177.654 484.755 cv
177.654 487.025 210.451 488.865 250.908 488.865 cv
291.365 488.865 324.162 487.025 324.162 484.755 cv
324.162 482.486 291.365 480.646 250.908 480.646 cv
.827451 .819608 .819608 rgb
f
250.908 488.865 mo
210.451 488.865 177.654 487.025 177.654 484.755 cv
177.654 482.486 210.451 480.646 250.908 480.646 cv
291.365 480.646 324.162 482.486 324.162 484.755 cv
324.162 487.025 291.365 488.865 250.908 488.865 cv
250.908 480.68 mo
210.787 480.68 178.262 482.504 178.262 484.755 cv
178.262 487.006 210.787 488.831 250.908 488.831 cv
291.029 488.831 323.554 487.006 323.554 484.755 cv
323.554 482.504 291.029 480.68 250.908 480.68 cv
.823529 .819608 .815686 rgb
f
250.908 488.831 mo
210.787 488.831 178.262 487.006 178.262 484.755 cv
178.262 482.504 210.787 480.68 250.908 480.68 cv
291.029 480.68 323.554 482.504 323.554 484.755 cv
323.554 487.006 291.029 488.831 250.908 488.831 cv
250.908 480.714 mo
211.122 480.714 178.869 482.523 178.869 484.755 cv
178.869 486.987 211.122 488.797 250.908 488.797 cv
290.694 488.797 322.947 486.987 322.947 484.755 cv
322.947 482.523 290.694 480.714 250.908 480.714 cv
.819608 .819608 .811765 rgb
f
250.908 488.797 mo
211.122 488.797 178.869 486.987 178.869 484.755 cv
178.869 482.523 211.122 480.714 250.908 480.714 cv
290.694 480.714 322.947 482.523 322.947 484.755 cv
322.947 486.987 290.694 488.797 250.908 488.797 cv
250.908 480.748 mo
211.457 480.748 179.476 482.542 179.476 484.755 cv
179.476 486.969 211.457 488.763 250.908 488.763 cv
290.359 488.763 322.34 486.969 322.34 484.755 cv
322.34 482.542 290.359 480.748 250.908 480.748 cv
.815686 .815686 .807843 rgb
f
250.908 488.763 mo
211.457 488.763 179.476 486.969 179.476 484.755 cv
179.476 482.542 211.457 480.748 250.908 480.748 cv
290.359 480.748 322.34 482.542 322.34 484.755 cv
322.34 486.969 290.359 488.763 250.908 488.763 cv
250.908 480.782 mo
211.793 480.782 180.083 482.561 180.083 484.755 cv
180.083 486.95 211.793 488.729 250.908 488.729 cv
290.023 488.729 321.732 486.95 321.732 484.755 cv
321.732 482.561 290.023 480.782 250.908 480.782 cv
f
250.908 488.729 mo
211.793 488.729 180.083 486.95 180.083 484.755 cv
180.083 482.561 211.793 480.782 250.908 480.782 cv
290.023 480.782 321.732 482.561 321.732 484.755 cv
321.732 486.95 290.023 488.729 250.908 488.729 cv
250.908 480.816 mo
212.128 480.816 180.691 482.58 180.691 484.755 cv
180.691 486.931 212.128 488.695 250.908 488.695 cv
289.688 488.695 321.125 486.931 321.125 484.755 cv
321.125 482.58 289.688 480.816 250.908 480.816 cv
.811765 .811765 .807843 rgb
f
250.908 488.695 mo
212.128 488.695 180.691 486.931 180.691 484.755 cv
180.691 482.58 212.128 480.816 250.908 480.816 cv
289.688 480.816 321.125 482.58 321.125 484.755 cv
321.125 486.931 289.688 488.695 250.908 488.695 cv
250.908 480.85 mo
212.464 480.85 181.298 482.598 181.298 484.755 cv
181.298 486.912 212.464 488.661 250.908 488.661 cv
289.352 488.661 320.518 486.912 320.518 484.755 cv
320.518 482.598 289.352 480.85 250.908 480.85 cv
.811765 .807843 .807843 rgb
f
250.908 488.661 mo
212.464 488.661 181.298 486.912 181.298 484.755 cv
181.298 482.598 212.464 480.85 250.908 480.85 cv
289.352 480.85 320.518 482.598 320.518 484.755 cv
320.518 486.912 289.352 488.661 250.908 488.661 cv
250.908 480.884 mo
212.799 480.884 181.905 482.617 181.905 484.755 cv
181.905 486.893 212.799 488.627 250.908 488.627 cv
289.017 488.627 319.911 486.893 319.911 484.755 cv
319.911 482.617 289.017 480.884 250.908 480.884 cv
.807843 .807843 .803922 rgb
f
250.908 488.627 mo
212.799 488.627 181.905 486.893 181.905 484.755 cv
181.905 482.617 212.799 480.884 250.908 480.884 cv
289.017 480.884 319.911 482.617 319.911 484.755 cv
319.911 486.893 289.017 488.627 250.908 488.627 cv
250.908 480.918 mo
213.134 480.918 182.513 482.636 182.513 484.755 cv
182.513 486.875 213.134 488.593 250.908 488.593 cv
288.682 488.593 319.303 486.875 319.303 484.755 cv
319.303 482.636 288.682 480.918 250.908 480.918 cv
.807843 .803922 .803922 rgb
f
250.908 488.593 mo
213.134 488.593 182.513 486.875 182.513 484.755 cv
182.513 482.636 213.134 480.918 250.908 480.918 cv
288.682 480.918 319.303 482.636 319.303 484.755 cv
319.303 486.875 288.682 488.593 250.908 488.593 cv
250.908 480.952 mo
213.47 480.952 183.12 482.655 183.12 484.755 cv
183.12 486.856 213.47 488.559 250.908 488.559 cv
288.346 488.559 318.696 486.856 318.696 484.755 cv
318.696 482.655 288.346 480.952 250.908 480.952 cv
.803922 .8 .803922 rgb
f
250.908 488.559 mo
213.47 488.559 183.12 486.856 183.12 484.755 cv
183.12 482.655 213.47 480.952 250.908 480.952 cv
288.346 480.952 318.696 482.655 318.696 484.755 cv
318.696 486.856 288.346 488.559 250.908 488.559 cv
250.908 480.986 mo
213.805 480.986 183.727 482.674 183.727 484.755 cv
183.727 486.837 213.805 488.524 250.908 488.524 cv
288.011 488.524 318.089 486.837 318.089 484.755 cv
318.089 482.674 288.011 480.986 250.908 480.986 cv
.803922 .796078 .8 rgb
f
250.908 488.524 mo
213.805 488.524 183.727 486.837 183.727 484.755 cv
183.727 482.674 213.805 480.986 250.908 480.986 cv
288.011 480.986 318.089 482.674 318.089 484.755 cv
318.089 486.837 288.011 488.524 250.908 488.524 cv
250.908 481.02 mo
214.14 481.02 184.334 482.693 184.334 484.755 cv
184.334 486.818 214.14 488.49 250.908 488.49 cv
287.676 488.49 317.482 486.818 317.482 484.755 cv
317.482 482.693 287.676 481.02 250.908 481.02 cv
.8 .8 .796078 rgb
f
250.908 488.49 mo
214.14 488.49 184.334 486.818 184.334 484.755 cv
184.334 482.693 214.14 481.02 250.908 481.02 cv
287.676 481.02 317.482 482.693 317.482 484.755 cv
317.482 486.818 287.676 488.49 250.908 488.49 cv
250.908 481.054 mo
214.476 481.054 184.941 482.711 184.941 484.755 cv
184.941 486.799 214.476 488.456 250.908 488.456 cv
287.34 488.456 316.875 486.799 316.875 484.755 cv
316.875 482.711 287.34 481.054 250.908 481.054 cv
.8 .796078 .792157 rgb
f
250.908 488.456 mo
214.476 488.456 184.941 486.799 184.941 484.755 cv
184.941 482.711 214.476 481.054 250.908 481.054 cv
287.34 481.054 316.875 482.711 316.875 484.755 cv
316.875 486.799 287.34 488.456 250.908 488.456 cv
250.908 481.088 mo
214.811 481.088 185.549 482.73 185.549 484.755 cv
185.549 486.78 214.811 488.422 250.908 488.422 cv
287.005 488.422 316.267 486.78 316.267 484.755 cv
316.267 482.73 287.005 481.088 250.908 481.088 cv
.796078 .796078 .792157 rgb
f
250.908 488.422 mo
214.811 488.422 185.549 486.78 185.549 484.755 cv
185.549 482.73 214.811 481.088 250.908 481.088 cv
287.005 481.088 316.267 482.73 316.267 484.755 cv
316.267 486.78 287.005 488.422 250.908 488.422 cv
250.908 481.123 mo
215.147 481.123 186.156 482.749 186.156 484.755 cv
186.156 486.762 215.147 488.388 250.908 488.388 cv
286.669 488.388 315.66 486.762 315.66 484.755 cv
315.66 482.749 286.669 481.123 250.908 481.123 cv
.796078 .792157 .788235 rgb
f
250.908 488.388 mo
215.147 488.388 186.156 486.762 186.156 484.755 cv
186.156 482.749 215.147 481.123 250.908 481.123 cv
286.669 481.123 315.66 482.749 315.66 484.755 cv
315.66 486.762 286.669 488.388 250.908 488.388 cv
250.908 481.157 mo
215.482 481.157 186.763 482.768 186.763 484.755 cv
186.763 486.743 215.482 488.354 250.908 488.354 cv
286.334 488.354 315.053 486.743 315.053 484.755 cv
315.053 482.768 286.334 481.157 250.908 481.157 cv
.792157 .792157 .788235 rgb
f
250.908 488.354 mo
215.482 488.354 186.763 486.743 186.763 484.755 cv
186.763 482.768 215.482 481.157 250.908 481.157 cv
286.334 481.157 315.053 482.768 315.053 484.755 cv
315.053 486.743 286.334 488.354 250.908 488.354 cv
250.908 481.191 mo
215.817 481.191 187.37 482.787 187.37 484.755 cv
187.37 486.724 215.817 488.32 250.908 488.32 cv
285.999 488.32 314.445 486.724 314.445 484.755 cv
314.445 482.787 285.999 481.191 250.908 481.191 cv
.788235 .788235 .784314 rgb
f
250.908 488.32 mo
215.817 488.32 187.37 486.724 187.37 484.755 cv
187.37 482.787 215.817 481.191 250.908 481.191 cv
285.999 481.191 314.445 482.787 314.445 484.755 cv
314.445 486.724 285.999 488.32 250.908 488.32 cv
250.908 481.225 mo
216.153 481.225 187.978 482.805 187.978 484.755 cv
187.978 486.705 216.153 488.286 250.908 488.286 cv
285.663 488.286 313.838 486.705 313.838 484.755 cv
313.838 482.805 285.663 481.225 250.908 481.225 cv
.788235 .784314 .780392 rgb
f
250.908 488.286 mo
216.153 488.286 187.978 486.705 187.978 484.755 cv
187.978 482.805 216.153 481.225 250.908 481.225 cv
285.663 481.225 313.838 482.805 313.838 484.755 cv
313.838 486.705 285.663 488.286 250.908 488.286 cv
250.908 481.259 mo
216.488 481.259 188.585 482.824 188.585 484.755 cv
188.585 486.686 216.488 488.252 250.908 488.252 cv
285.328 488.252 313.231 486.686 313.231 484.755 cv
313.231 482.824 285.328 481.259 250.908 481.259 cv
.784314 .780392 .780392 rgb
f
250.908 488.252 mo
216.488 488.252 188.585 486.686 188.585 484.755 cv
188.585 482.824 216.488 481.259 250.908 481.259 cv
285.328 481.259 313.231 482.824 313.231 484.755 cv
313.231 486.686 285.328 488.252 250.908 488.252 cv
250.908 481.293 mo
216.823 481.293 189.192 482.843 189.192 484.755 cv
189.192 486.668 216.823 488.218 250.908 488.218 cv
284.993 488.218 312.624 486.668 312.624 484.755 cv
312.624 482.843 284.993 481.293 250.908 481.293 cv
.784314 .780392 .776471 rgb
f
250.908 488.218 mo
216.823 488.218 189.192 486.668 189.192 484.755 cv
189.192 482.843 216.823 481.293 250.908 481.293 cv
284.993 481.293 312.624 482.843 312.624 484.755 cv
312.624 486.668 284.993 488.218 250.908 488.218 cv
250.908 481.327 mo
217.159 481.327 189.8 482.862 189.8 484.755 cv
189.8 486.649 217.159 488.184 250.908 488.184 cv
284.657 488.184 312.016 486.649 312.016 484.755 cv
312.016 482.862 284.657 481.327 250.908 481.327 cv
.780392 .776471 .776471 rgb
f
250.908 488.184 mo
217.159 488.184 189.8 486.649 189.8 484.755 cv
189.8 482.862 217.159 481.327 250.908 481.327 cv
284.657 481.327 312.016 482.862 312.016 484.755 cv
312.016 486.649 284.657 488.184 250.908 488.184 cv
250.908 481.361 mo
217.494 481.361 190.407 482.881 190.407 484.755 cv
190.407 486.63 217.494 488.15 250.908 488.15 cv
284.322 488.15 311.409 486.63 311.409 484.755 cv
311.409 482.881 284.322 481.361 250.908 481.361 cv
.780392 .772549 .772549 rgb
f
250.908 488.15 mo
217.494 488.15 190.407 486.63 190.407 484.755 cv
190.407 482.881 217.494 481.361 250.908 481.361 cv
284.322 481.361 311.409 482.881 311.409 484.755 cv
311.409 486.63 284.322 488.15 250.908 488.15 cv
250.908 481.395 mo
217.829 481.395 191.014 482.899 191.014 484.755 cv
191.014 486.611 217.829 488.116 250.908 488.116 cv
283.986 488.116 310.802 486.611 310.802 484.755 cv
310.802 482.899 283.986 481.395 250.908 481.395 cv
.776471 .776471 .772549 rgb
f
250.908 488.116 mo
217.829 488.116 191.014 486.611 191.014 484.755 cv
191.014 482.899 217.829 481.395 250.908 481.395 cv
283.986 481.395 310.802 482.899 310.802 484.755 cv
310.802 486.611 283.986 488.116 250.908 488.116 cv
250.908 481.429 mo
218.165 481.429 191.621 482.918 191.621 484.755 cv
191.621 486.592 218.165 488.081 250.908 488.081 cv
283.651 488.081 310.195 486.592 310.195 484.755 cv
310.195 482.918 283.651 481.429 250.908 481.429 cv
.772549 .772549 .768627 rgb
f
250.908 488.081 mo
218.165 488.081 191.621 486.592 191.621 484.755 cv
191.621 482.918 218.165 481.429 250.908 481.429 cv
283.651 481.429 310.195 482.918 310.195 484.755 cv
310.195 486.592 283.651 488.081 250.908 488.081 cv
250.908 481.463 mo
218.5 481.463 192.228 482.937 192.228 484.755 cv
192.228 486.573 218.5 488.047 250.908 488.047 cv
283.316 488.047 309.588 486.573 309.588 484.755 cv
309.588 482.937 283.316 481.463 250.908 481.463 cv
.772549 .768627 .764706 rgb
f
250.908 488.047 mo
218.5 488.047 192.228 486.573 192.228 484.755 cv
192.228 482.937 218.5 481.463 250.908 481.463 cv
283.316 481.463 309.588 482.937 309.588 484.755 cv
309.588 486.573 283.316 488.047 250.908 488.047 cv
250.908 481.497 mo
218.836 481.497 192.836 482.956 192.836 484.755 cv
192.836 486.555 218.836 488.013 250.908 488.013 cv
282.98 488.013 308.98 486.555 308.98 484.755 cv
308.98 482.956 282.98 481.497 250.908 481.497 cv
.768627 .768627 .764706 rgb
f
250.908 488.013 mo
218.836 488.013 192.836 486.555 192.836 484.755 cv
192.836 482.956 218.836 481.497 250.908 481.497 cv
282.98 481.497 308.98 482.956 308.98 484.755 cv
308.98 486.555 282.98 488.013 250.908 488.013 cv
250.908 481.531 mo
219.171 481.531 193.443 482.975 193.443 484.755 cv
193.443 486.536 219.171 487.979 250.908 487.979 cv
282.645 487.979 308.373 486.536 308.373 484.755 cv
308.373 482.975 282.645 481.531 250.908 481.531 cv
.768627 .764706 .760784 rgb
f
250.908 487.979 mo
219.171 487.979 193.443 486.536 193.443 484.755 cv
193.443 482.975 219.171 481.531 250.908 481.531 cv
282.645 481.531 308.373 482.975 308.373 484.755 cv
308.373 486.536 282.645 487.979 250.908 487.979 cv
250.908 481.565 mo
219.506 481.565 194.05 482.994 194.05 484.755 cv
194.05 486.517 219.506 487.945 250.908 487.945 cv
282.31 487.945 307.766 486.517 307.766 484.755 cv
307.766 482.994 282.31 481.565 250.908 481.565 cv
.764706 .760784 .756863 rgb
f
250.908 487.945 mo
219.506 487.945 194.05 486.517 194.05 484.755 cv
194.05 482.994 219.506 481.565 250.908 481.565 cv
282.31 481.565 307.766 482.994 307.766 484.755 cv
307.766 486.517 282.31 487.945 250.908 487.945 cv
250.908 481.599 mo
219.842 481.599 194.658 483.012 194.658 484.755 cv
194.658 486.498 219.842 487.911 250.908 487.911 cv
281.974 487.911 307.158 486.498 307.158 484.755 cv
307.158 483.012 281.974 481.599 250.908 481.599 cv
.764706 .760784 .752941 rgb
f
250.908 487.911 mo
219.842 487.911 194.658 486.498 194.658 484.755 cv
194.658 483.012 219.842 481.599 250.908 481.599 cv
281.974 481.599 307.158 483.012 307.158 484.755 cv
307.158 486.498 281.974 487.911 250.908 487.911 cv
250.908 481.633 mo
220.177 481.633 195.265 483.031 195.265 484.755 cv
195.265 486.479 220.177 487.877 250.908 487.877 cv
281.639 487.877 306.551 486.479 306.551 484.755 cv
306.551 483.031 281.639 481.633 250.908 481.633 cv
.760784 .756863 .74902 rgb
f
250.908 487.877 mo
220.177 487.877 195.265 486.479 195.265 484.755 cv
195.265 483.031 220.177 481.633 250.908 481.633 cv
281.639 481.633 306.551 483.031 306.551 484.755 cv
306.551 486.479 281.639 487.877 250.908 487.877 cv
250.908 481.668 mo
220.512 481.668 195.872 483.05 195.872 484.755 cv
195.872 486.461 220.512 487.843 250.908 487.843 cv
281.304 487.843 305.944 486.461 305.944 484.755 cv
305.944 483.05 281.304 481.668 250.908 481.668 cv
.752941 .752941 .74902 rgb
f
250.908 487.843 mo
220.512 487.843 195.872 486.461 195.872 484.755 cv
195.872 483.05 220.512 481.668 250.908 481.668 cv
281.304 481.668 305.944 483.05 305.944 484.755 cv
305.944 486.461 281.304 487.843 250.908 487.843 cv
250.908 481.702 mo
220.848 481.702 196.479 483.069 196.479 484.755 cv
196.479 486.442 220.848 487.809 250.908 487.809 cv
280.968 487.809 305.337 486.442 305.337 484.755 cv
305.337 483.069 280.968 481.702 250.908 481.702 cv
.756863 .74902 .74902 rgb
f
250.908 487.809 mo
220.848 487.809 196.479 486.442 196.479 484.755 cv
196.479 483.069 220.848 481.702 250.908 481.702 cv
280.968 481.702 305.337 483.069 305.337 484.755 cv
305.337 486.442 280.968 487.809 250.908 487.809 cv
250.908 481.736 mo
221.183 481.736 197.087 483.088 197.087 484.755 cv
197.087 486.423 221.183 487.775 250.908 487.775 cv
280.633 487.775 304.729 486.423 304.729 484.755 cv
304.729 483.088 280.633 481.736 250.908 481.736 cv
.752941 .74902 .745098 rgb
f
250.908 487.775 mo
221.183 487.775 197.087 486.423 197.087 484.755 cv
197.087 483.088 221.183 481.736 250.908 481.736 cv
280.633 481.736 304.729 483.088 304.729 484.755 cv
304.729 486.423 280.633 487.775 250.908 487.775 cv
250.908 481.77 mo
221.519 481.77 197.694 483.106 197.694 484.755 cv
197.694 486.404 221.519 487.741 250.908 487.741 cv
280.297 487.741 304.122 486.404 304.122 484.755 cv
304.122 483.106 280.297 481.77 250.908 481.77 cv
.74902 .745098 .745098 rgb
f
250.908 487.741 mo
221.519 487.741 197.694 486.404 197.694 484.755 cv
197.694 483.106 221.519 481.77 250.908 481.77 cv
280.297 481.77 304.122 483.106 304.122 484.755 cv
304.122 486.404 280.297 487.741 250.908 487.741 cv
250.908 481.804 mo
221.854 481.804 198.301 483.125 198.301 484.755 cv
198.301 486.385 221.854 487.707 250.908 487.707 cv
279.962 487.707 303.515 486.385 303.515 484.755 cv
303.515 483.125 279.962 481.804 250.908 481.804 cv
.74902 .741176 .741176 rgb
f
250.908 487.707 mo
221.854 487.707 198.301 486.385 198.301 484.755 cv
198.301 483.125 221.854 481.804 250.908 481.804 cv
279.962 481.804 303.515 483.125 303.515 484.755 cv
303.515 486.385 279.962 487.707 250.908 487.707 cv
250.908 481.838 mo
222.189 481.838 198.908 483.144 198.908 484.755 cv
198.908 486.367 222.189 487.673 250.908 487.673 cv
279.627 487.673 302.908 486.367 302.908 484.755 cv
302.908 483.144 279.627 481.838 250.908 481.838 cv
.745098 .741176 .741176 rgb
f
250.908 487.673 mo
222.189 487.673 198.908 486.367 198.908 484.755 cv
198.908 483.144 222.189 481.838 250.908 481.838 cv
279.627 481.838 302.908 483.144 302.908 484.755 cv
302.908 486.367 279.627 487.673 250.908 487.673 cv
250.908 481.872 mo
222.525 481.872 199.515 483.163 199.515 484.755 cv
199.515 486.348 222.525 487.639 250.908 487.639 cv
279.291 487.639 302.301 486.348 302.301 484.755 cv
302.301 483.163 279.291 481.872 250.908 481.872 cv
.737255 .737255 .737255 rgb
f
250.908 487.639 mo
222.525 487.639 199.515 486.348 199.515 484.755 cv
199.515 483.163 222.525 481.872 250.908 481.872 cv
279.291 481.872 302.301 483.163 302.301 484.755 cv
302.301 486.348 279.291 487.639 250.908 487.639 cv
250.908 481.906 mo
222.86 481.906 200.123 483.182 200.123 484.755 cv
200.123 486.329 222.86 487.605 250.908 487.605 cv
278.956 487.605 301.693 486.329 301.693 484.755 cv
301.693 483.182 278.956 481.906 250.908 481.906 cv
.737255 .737255 .733333 rgb
f
250.908 487.605 mo
222.86 487.605 200.123 486.329 200.123 484.755 cv
200.123 483.182 222.86 481.906 250.908 481.906 cv
278.956 481.906 301.693 483.182 301.693 484.755 cv
301.693 486.329 278.956 487.605 250.908 487.605 cv
250.908 481.94 mo
223.195 481.94 200.73 483.201 200.73 484.755 cv
200.73 486.31 223.195 487.571 250.908 487.571 cv
278.621 487.571 301.086 486.31 301.086 484.755 cv
301.086 483.201 278.621 481.94 250.908 481.94 cv
.733333 .733333 .729412 rgb
f
250.908 487.571 mo
223.195 487.571 200.73 486.31 200.73 484.755 cv
200.73 483.201 223.195 481.94 250.908 481.94 cv
278.621 481.94 301.086 483.201 301.086 484.755 cv
301.086 486.31 278.621 487.571 250.908 487.571 cv
250.908 481.974 mo
223.531 481.974 201.337 483.219 201.337 484.755 cv
201.337 486.291 223.531 487.536 250.908 487.536 cv
278.285 487.536 300.479 486.291 300.479 484.755 cv
300.479 483.219 278.285 481.974 250.908 481.974 cv
.733333 .729412 .72549 rgb
f
250.908 487.536 mo
223.531 487.536 201.337 486.291 201.337 484.755 cv
201.337 483.219 223.531 481.974 250.908 481.974 cv
278.285 481.974 300.479 483.219 300.479 484.755 cv
300.479 486.291 278.285 487.536 250.908 487.536 cv
250.908 482.008 mo
223.866 482.008 201.945 483.238 201.945 484.755 cv
201.945 486.273 223.866 487.502 250.908 487.502 cv
277.95 487.502 299.871 486.273 299.871 484.755 cv
299.871 483.238 277.95 482.008 250.908 482.008 cv
.729412 .72549 .721569 rgb
f
250.908 487.502 mo
223.866 487.502 201.945 486.273 201.945 484.755 cv
201.945 483.238 223.866 482.008 250.908 482.008 cv
277.95 482.008 299.871 483.238 299.871 484.755 cv
299.871 486.273 277.95 487.502 250.908 487.502 cv
250.908 482.042 mo
224.202 482.042 202.552 483.257 202.552 484.755 cv
202.552 486.254 224.202 487.468 250.908 487.468 cv
277.614 487.468 299.264 486.254 299.264 484.755 cv
299.264 483.257 277.614 482.042 250.908 482.042 cv
.72549 .72549 .717647 rgb
f
250.908 487.468 mo
224.202 487.468 202.552 486.254 202.552 484.755 cv
202.552 483.257 224.202 482.042 250.908 482.042 cv
277.614 482.042 299.264 483.257 299.264 484.755 cv
299.264 486.254 277.614 487.468 250.908 487.468 cv
250.908 482.076 mo
224.537 482.076 203.159 483.276 203.159 484.755 cv
203.159 486.235 224.537 487.434 250.908 487.434 cv
277.279 487.434 298.657 486.235 298.657 484.755 cv
298.657 483.276 277.279 482.076 250.908 482.076 cv
.721569 .721569 .721569 rgb
f
250.908 487.434 mo
224.537 487.434 203.159 486.235 203.159 484.755 cv
203.159 483.276 224.537 482.076 250.908 482.076 cv
277.279 482.076 298.657 483.276 298.657 484.755 cv
298.657 486.235 277.279 487.434 250.908 487.434 cv
250.908 482.111 mo
224.872 482.111 203.766 483.295 203.766 484.755 cv
203.766 486.216 224.872 487.4 250.908 487.4 cv
276.944 487.4 298.05 486.216 298.05 484.755 cv
298.05 483.295 276.944 482.111 250.908 482.111 cv
.721569 .717647 .717647 rgb
f
250.908 487.4 mo
224.872 487.4 203.766 486.216 203.766 484.755 cv
203.766 483.295 224.872 482.111 250.908 482.111 cv
276.944 482.111 298.05 483.295 298.05 484.755 cv
298.05 486.216 276.944 487.4 250.908 487.4 cv
250.908 482.145 mo
225.208 482.145 204.373 483.313 204.373 484.755 cv
204.373 486.197 225.208 487.366 250.908 487.366 cv
276.608 487.366 297.443 486.197 297.443 484.755 cv
297.443 483.313 276.608 482.145 250.908 482.145 cv
.717647 .717647 .713725 rgb
f
250.908 487.366 mo
225.208 487.366 204.373 486.197 204.373 484.755 cv
204.373 483.313 225.208 482.145 250.908 482.145 cv
276.608 482.145 297.443 483.313 297.443 484.755 cv
297.443 486.197 276.608 487.366 250.908 487.366 cv
250.908 482.179 mo
225.543 482.179 204.981 483.332 204.981 484.755 cv
204.981 486.178 225.543 487.332 250.908 487.332 cv
276.273 487.332 296.835 486.178 296.835 484.755 cv
296.835 483.332 276.273 482.179 250.908 482.179 cv
.713725 .713725 .709804 rgb
f
250.908 487.332 mo
225.543 487.332 204.981 486.178 204.981 484.755 cv
204.981 483.332 225.543 482.179 250.908 482.179 cv
276.273 482.179 296.835 483.332 296.835 484.755 cv
296.835 486.178 276.273 487.332 250.908 487.332 cv
250.908 482.213 mo
225.878 482.213 205.588 483.351 205.588 484.755 cv
205.588 486.16 225.878 487.298 250.908 487.298 cv
275.938 487.298 296.228 486.16 296.228 484.755 cv
296.228 483.351 275.938 482.213 250.908 482.213 cv
.713725 .713725 .705882 rgb
f
250.908 487.298 mo
225.878 487.298 205.588 486.16 205.588 484.755 cv
205.588 483.351 225.878 482.213 250.908 482.213 cv
275.938 482.213 296.228 483.351 296.228 484.755 cv
296.228 486.16 275.938 487.298 250.908 487.298 cv
250.908 482.247 mo
226.214 482.247 206.195 483.37 206.195 484.755 cv
206.195 486.141 226.214 487.264 250.908 487.264 cv
275.602 487.264 295.621 486.141 295.621 484.755 cv
295.621 483.37 275.602 482.247 250.908 482.247 cv
.705882 .709804 .701961 rgb
f
250.908 487.264 mo
226.214 487.264 206.195 486.141 206.195 484.755 cv
206.195 483.37 226.214 482.247 250.908 482.247 cv
275.602 482.247 295.621 483.37 295.621 484.755 cv
295.621 486.141 275.602 487.264 250.908 487.264 cv
250.908 482.281 mo
226.549 482.281 206.802 483.389 206.802 484.755 cv
206.802 486.122 226.549 487.23 250.908 487.23 cv
275.267 487.23 295.013 486.122 295.013 484.755 cv
295.013 483.389 275.267 482.281 250.908 482.281 cv
.709804 .705882 .701961 rgb
f
250.908 487.23 mo
226.549 487.23 206.802 486.122 206.802 484.755 cv
206.802 483.389 226.549 482.281 250.908 482.281 cv
275.267 482.281 295.013 483.389 295.013 484.755 cv
295.013 486.122 275.267 487.23 250.908 487.23 cv
250.908 482.315 mo
226.885 482.315 207.41 483.408 207.41 484.755 cv
207.41 486.103 226.885 487.196 250.908 487.196 cv
274.931 487.196 294.406 486.103 294.406 484.755 cv
294.406 483.408 274.931 482.315 250.908 482.315 cv
.705882 .701961 .698039 rgb
f
250.908 487.196 mo
226.885 487.196 207.41 486.103 207.41 484.755 cv
207.41 483.408 226.885 482.315 250.908 482.315 cv
274.931 482.315 294.406 483.408 294.406 484.755 cv
294.406 486.103 274.931 487.196 250.908 487.196 cv
250.908 482.349 mo
227.22 482.349 208.017 483.426 208.017 484.755 cv
208.017 486.084 227.22 487.162 250.908 487.162 cv
274.596 487.162 293.799 486.084 293.799 484.755 cv
293.799 483.426 274.596 482.349 250.908 482.349 cv
.701961 .701961 .698039 rgb
f
250.908 487.162 mo
227.22 487.162 208.017 486.084 208.017 484.755 cv
208.017 483.426 227.22 482.349 250.908 482.349 cv
274.596 482.349 293.799 483.426 293.799 484.755 cv
293.799 486.084 274.596 487.162 250.908 487.162 cv
250.908 482.383 mo
227.555 482.383 208.624 483.445 208.624 484.755 cv
208.624 486.065 227.555 487.128 250.908 487.128 cv
274.261 487.128 293.192 486.065 293.192 484.755 cv
293.192 483.445 274.261 482.383 250.908 482.383 cv
.698039 .698039 .694118 rgb
f
250.908 487.128 mo
227.555 487.128 208.624 486.065 208.624 484.755 cv
208.624 483.445 227.555 482.383 250.908 482.383 cv
274.261 482.383 293.192 483.445 293.192 484.755 cv
293.192 486.065 274.261 487.128 250.908 487.128 cv
250.908 482.417 mo
227.891 482.417 209.232 483.464 209.232 484.755 cv
209.232 486.047 227.891 487.094 250.908 487.094 cv
273.925 487.094 292.584 486.047 292.584 484.755 cv
292.584 483.464 273.925 482.417 250.908 482.417 cv
.694118 .694118 .690196 rgb
f
250.908 487.094 mo
227.891 487.094 209.232 486.047 209.232 484.755 cv
209.232 483.464 227.891 482.417 250.908 482.417 cv
273.925 482.417 292.584 483.464 292.584 484.755 cv
292.584 486.047 273.925 487.094 250.908 487.094 cv
250.908 482.451 mo
228.226 482.451 209.839 483.483 209.839 484.755 cv
209.839 486.028 228.226 487.059 250.908 487.059 cv
273.59 487.059 291.977 486.028 291.977 484.755 cv
291.977 483.483 273.59 482.451 250.908 482.451 cv
.694118 .690196 .686274 rgb
f
250.908 487.059 mo
228.226 487.059 209.839 486.028 209.839 484.755 cv
209.839 483.483 228.226 482.451 250.908 482.451 cv
273.59 482.451 291.977 483.483 291.977 484.755 cv
291.977 486.028 273.59 487.059 250.908 487.059 cv
250.908 482.485 mo
228.561 482.485 210.446 483.502 210.446 484.755 cv
210.446 486.009 228.561 487.025 250.908 487.025 cv
273.254 487.025 291.37 486.009 291.37 484.755 cv
291.37 483.502 273.254 482.485 250.908 482.485 cv
.690196 .686274 .682353 rgb
f
250.908 487.025 mo
228.561 487.025 210.446 486.009 210.446 484.755 cv
210.446 483.502 228.561 482.485 250.908 482.485 cv
273.254 482.485 291.37 483.502 291.37 484.755 cv
291.37 486.009 273.254 487.025 250.908 487.025 cv
250.908 482.519 mo
228.897 482.519 211.053 483.52 211.053 484.755 cv
211.053 485.99 228.897 486.991 250.908 486.991 cv
272.919 486.991 290.763 485.99 290.763 484.755 cv
290.763 483.52 272.919 482.519 250.908 482.519 cv
.686274 .682353 .682353 rgb
f
250.908 486.991 mo
228.897 486.991 211.053 485.99 211.053 484.755 cv
211.053 483.52 228.897 482.519 250.908 482.519 cv
272.919 482.519 290.763 483.52 290.763 484.755 cv
290.763 485.99 272.919 486.991 250.908 486.991 cv
250.908 482.553 mo
229.232 482.553 211.66 483.539 211.66 484.755 cv
211.66 485.971 229.232 486.957 250.908 486.957 cv
272.584 486.957 290.156 485.971 290.156 484.755 cv
290.156 483.539 272.584 482.553 250.908 482.553 cv
.682353 .682353 .678431 rgb
f
250.908 486.957 mo
229.232 486.957 211.66 485.971 211.66 484.755 cv
211.66 483.539 229.232 482.553 250.908 482.553 cv
272.584 482.553 290.156 483.539 290.156 484.755 cv
290.156 485.971 272.584 486.957 250.908 486.957 cv
250.908 482.588 mo
229.568 482.588 212.268 483.558 212.268 484.755 cv
212.268 485.953 229.568 486.923 250.908 486.923 cv
272.248 486.923 289.548 485.953 289.548 484.755 cv
289.548 483.558 272.248 482.588 250.908 482.588 cv
.682353 .678431 .67451 rgb
f
250.908 486.923 mo
229.568 486.923 212.268 485.953 212.268 484.755 cv
212.268 483.558 229.568 482.588 250.908 482.588 cv
272.248 482.588 289.548 483.558 289.548 484.755 cv
289.548 485.953 272.248 486.923 250.908 486.923 cv
250.908 482.621 mo
229.903 482.621 212.875 483.577 212.875 484.755 cv
212.875 485.934 229.903 486.889 250.908 486.889 cv
271.913 486.889 288.941 485.934 288.941 484.755 cv
288.941 483.577 271.913 482.621 250.908 482.621 cv
.678431 .67451 .670588 rgb
f
250.908 486.889 mo
229.903 486.889 212.875 485.934 212.875 484.755 cv
212.875 483.577 229.903 482.621 250.908 482.621 cv
271.913 482.621 288.941 483.577 288.941 484.755 cv
288.941 485.934 271.913 486.889 250.908 486.889 cv
250.908 482.656 mo
230.238 482.656 213.482 483.596 213.482 484.755 cv
213.482 485.915 230.238 486.855 250.908 486.855 cv
271.578 486.855 288.334 485.915 288.334 484.755 cv
288.334 483.596 271.578 482.656 250.908 482.656 cv
.678431 .670588 .670588 rgb
f
250.908 486.855 mo
230.238 486.855 213.482 485.915 213.482 484.755 cv
213.482 483.596 230.238 482.656 250.908 482.656 cv
271.578 482.656 288.334 483.596 288.334 484.755 cv
288.334 485.915 271.578 486.855 250.908 486.855 cv
250.908 482.69 mo
230.574 482.69 214.089 483.615 214.089 484.755 cv
214.089 485.896 230.574 486.821 250.908 486.821 cv
271.242 486.821 287.726 485.896 287.726 484.755 cv
287.726 483.615 271.242 482.69 250.908 482.69 cv
.67451 .666667 .666667 rgb
f
250.908 486.821 mo
230.574 486.821 214.089 485.896 214.089 484.755 cv
214.089 483.615 230.574 482.69 250.908 482.69 cv
271.242 482.69 287.726 483.615 287.726 484.755 cv
287.726 485.896 271.242 486.821 250.908 486.821 cv
250.908 482.724 mo
230.909 482.724 214.697 483.633 214.697 484.755 cv
214.697 485.877 230.909 486.787 250.908 486.787 cv
270.907 486.787 287.119 485.877 287.119 484.755 cv
287.119 483.633 270.907 482.724 250.908 482.724 cv
.670588 .666667 .666667 rgb
f
250.908 486.787 mo
230.909 486.787 214.697 485.877 214.697 484.755 cv
214.697 483.633 230.909 482.724 250.908 482.724 cv
270.907 482.724 287.119 483.633 287.119 484.755 cv
287.119 485.877 270.907 486.787 250.908 486.787 cv
250.908 482.758 mo
231.244 482.758 215.304 483.652 215.304 484.755 cv
215.304 485.858 231.244 486.753 250.908 486.753 cv
270.571 486.753 286.512 485.858 286.512 484.755 cv
286.512 483.652 270.571 482.758 250.908 482.758 cv
.666667 .662745 .658823 rgb
f
250.908 486.753 mo
231.244 486.753 215.304 485.858 215.304 484.755 cv
215.304 483.652 231.244 482.758 250.908 482.758 cv
270.571 482.758 286.512 483.652 286.512 484.755 cv
286.512 485.858 270.571 486.753 250.908 486.753 cv
250.908 482.792 mo
231.58 482.792 215.911 483.671 215.911 484.755 cv
215.911 485.84 231.58 486.719 250.908 486.719 cv
270.236 486.719 285.905 485.84 285.905 484.755 cv
285.905 483.671 270.236 482.792 250.908 482.792 cv
.666667 .658823 .658823 rgb
f
250.908 486.719 mo
231.58 486.719 215.911 485.84 215.911 484.755 cv
215.911 483.671 231.58 482.792 250.908 482.792 cv
270.236 482.792 285.905 483.671 285.905 484.755 cv
285.905 485.84 270.236 486.719 250.908 486.719 cv
250.908 482.826 mo
231.915 482.826 216.519 483.69 216.519 484.755 cv
216.519 485.821 231.915 486.685 250.908 486.685 cv
269.901 486.685 285.297 485.821 285.297 484.755 cv
285.297 483.69 269.901 482.826 250.908 482.826 cv
.658823 .654902 .65098 rgb
f
250.908 486.685 mo
231.915 486.685 216.519 485.821 216.519 484.755 cv
216.519 483.69 231.915 482.826 250.908 482.826 cv
269.901 482.826 285.297 483.69 285.297 484.755 cv
285.297 485.821 269.901 486.685 250.908 486.685 cv
250.908 482.86 mo
232.251 482.86 217.126 483.709 217.126 484.755 cv
217.126 485.802 232.251 486.651 250.908 486.651 cv
269.565 486.651 284.69 485.802 284.69 484.755 cv
284.69 483.709 269.565 482.86 250.908 482.86 cv
.654902 .65098 .65098 rgb
f
250.908 486.651 mo
232.251 486.651 217.126 485.802 217.126 484.755 cv
217.126 483.709 232.251 482.86 250.908 482.86 cv
269.565 482.86 284.69 483.709 284.69 484.755 cv
284.69 485.802 269.565 486.651 250.908 486.651 cv
250.908 482.894 mo
232.586 482.894 217.733 483.727 217.733 484.755 cv
217.733 485.783 232.586 486.617 250.908 486.617 cv
269.23 486.617 284.083 485.783 284.083 484.755 cv
284.083 483.727 269.23 482.894 250.908 482.894 cv
f
250.908 486.617 mo
232.586 486.617 217.733 485.783 217.733 484.755 cv
217.733 483.727 232.586 482.894 250.908 482.894 cv
269.23 482.894 284.083 483.727 284.083 484.755 cv
284.083 485.783 269.23 486.617 250.908 486.617 cv
250.908 482.928 mo
232.921 482.928 218.34 483.746 218.34 484.755 cv
218.34 485.764 232.921 486.582 250.908 486.582 cv
268.895 486.582 283.476 485.764 283.476 484.755 cv
283.476 483.746 268.895 482.928 250.908 482.928 cv
.65098 .647059 .643137 rgb
f
250.908 486.582 mo
232.921 486.582 218.34 485.764 218.34 484.755 cv
218.34 483.746 232.921 482.928 250.908 482.928 cv
268.895 482.928 283.476 483.746 283.476 484.755 cv
283.476 485.764 268.895 486.582 250.908 486.582 cv
250.908 482.962 mo
233.257 482.962 218.947 483.765 218.947 484.755 cv
218.947 485.746 233.257 486.548 250.908 486.548 cv
268.559 486.548 282.869 485.746 282.869 484.755 cv
282.869 483.765 268.559 482.962 250.908 482.962 cv
.643137 .643137 .643137 rgb
f
250.908 486.548 mo
233.257 486.548 218.947 485.746 218.947 484.755 cv
218.947 483.765 233.257 482.962 250.908 482.962 cv
268.559 482.962 282.869 483.765 282.869 484.755 cv
282.869 485.746 268.559 486.548 250.908 486.548 cv
250.908 482.996 mo
233.592 482.996 219.555 483.784 219.555 484.755 cv
219.555 485.727 233.592 486.514 250.908 486.514 cv
268.224 486.514 282.261 485.727 282.261 484.755 cv
282.261 483.784 268.224 482.996 250.908 482.996 cv
.639216 .643137 .639216 rgb
f
250.908 486.514 mo
233.592 486.514 219.555 485.727 219.555 484.755 cv
219.555 483.784 233.592 482.996 250.908 482.996 cv
268.224 482.996 282.261 483.784 282.261 484.755 cv
282.261 485.727 268.224 486.514 250.908 486.514 cv
250.908 483.03 mo
233.927 483.03 220.162 483.803 220.162 484.755 cv
220.162 485.708 233.927 486.48 250.908 486.48 cv
267.888 486.48 281.654 485.708 281.654 484.755 cv
281.654 483.803 267.888 483.03 250.908 483.03 cv
.643137 .639216 .635294 rgb
f
250.908 486.48 mo
233.927 486.48 220.162 485.708 220.162 484.755 cv
220.162 483.803 233.927 483.03 250.908 483.03 cv
267.888 483.03 281.654 483.803 281.654 484.755 cv
281.654 485.708 267.888 486.48 250.908 486.48 cv
250.908 483.064 mo
234.263 483.064 220.769 483.821 220.769 484.755 cv
220.769 485.689 234.263 486.446 250.908 486.446 cv
267.553 486.446 281.047 485.689 281.047 484.755 cv
281.047 483.821 267.553 483.064 250.908 483.064 cv
.635294 .631373 .627451 rgb
f
250.908 486.446 mo
234.263 486.446 220.769 485.689 220.769 484.755 cv
220.769 483.821 234.263 483.064 250.908 483.064 cv
267.553 483.064 281.047 483.821 281.047 484.755 cv
281.047 485.689 267.553 486.446 250.908 486.446 cv
250.908 483.098 mo
234.598 483.098 221.376 483.84 221.376 484.755 cv
221.376 485.67 234.598 486.412 250.908 486.412 cv
267.218 486.412 280.439 485.67 280.439 484.755 cv
280.439 483.84 267.218 483.098 250.908 483.098 cv
.631373 .631373 .631373 rgb
f
250.908 486.412 mo
234.598 486.412 221.376 485.67 221.376 484.755 cv
221.376 483.84 234.598 483.098 250.908 483.098 cv
267.218 483.098 280.439 483.84 280.439 484.755 cv
280.439 485.67 267.218 486.412 250.908 486.412 cv
250.908 483.133 mo
234.934 483.133 221.984 483.859 221.984 484.755 cv
221.984 485.651 234.934 486.378 250.908 486.378 cv
266.882 486.378 279.832 485.651 279.832 484.755 cv
279.832 483.859 266.882 483.133 250.908 483.133 cv
.627451 .631373 .627451 rgb
f
250.908 486.378 mo
234.934 486.378 221.984 485.651 221.984 484.755 cv
221.984 483.859 234.934 483.133 250.908 483.133 cv
266.882 483.133 279.832 483.859 279.832 484.755 cv
279.832 485.651 266.882 486.378 250.908 486.378 cv
250.908 483.167 mo
235.269 483.167 222.591 483.878 222.591 484.755 cv
222.591 485.633 235.269 486.344 250.908 486.344 cv
266.547 486.344 279.225 485.633 279.225 484.755 cv
279.225 483.878 266.547 483.167 250.908 483.167 cv
.627451 .627451 .623529 rgb
f
250.908 486.344 mo
235.269 486.344 222.591 485.633 222.591 484.755 cv
222.591 483.878 235.269 483.167 250.908 483.167 cv
266.547 483.167 279.225 483.878 279.225 484.755 cv
279.225 485.633 266.547 486.344 250.908 486.344 cv
250.908 483.201 mo
235.604 483.201 223.198 483.897 223.198 484.755 cv
223.198 485.614 235.604 486.31 250.908 486.31 cv
266.212 486.31 278.618 485.614 278.618 484.755 cv
278.618 483.897 266.212 483.201 250.908 483.201 cv
.619608 .619608 .615686 rgb
f
250.908 486.31 mo
235.604 486.31 223.198 485.614 223.198 484.755 cv
223.198 483.897 235.604 483.201 250.908 483.201 cv
266.212 483.201 278.618 483.897 278.618 484.755 cv
278.618 485.614 266.212 486.31 250.908 486.31 cv
250.908 483.235 mo
235.94 483.235 223.806 483.915 223.806 484.755 cv
223.806 485.595 235.94 486.276 250.908 486.276 cv
265.876 486.276 278.01 485.595 278.01 484.755 cv
278.01 483.915 265.876 483.235 250.908 483.235 cv
.615686 .619608 .615686 rgb
f
250.908 486.276 mo
235.94 486.276 223.806 485.595 223.806 484.755 cv
223.806 483.915 235.94 483.235 250.908 483.235 cv
265.876 483.235 278.01 483.915 278.01 484.755 cv
278.01 485.595 265.876 486.276 250.908 486.276 cv
250.908 483.269 mo
236.275 483.269 224.413 483.934 224.413 484.755 cv
224.413 485.576 236.275 486.242 250.908 486.242 cv
265.541 486.242 277.403 485.576 277.403 484.755 cv
277.403 483.934 265.541 483.269 250.908 483.269 cv
.615686 .615686 .611765 rgb
f
250.908 486.242 mo
236.275 486.242 224.413 485.576 224.413 484.755 cv
224.413 483.934 236.275 483.269 250.908 483.269 cv
265.541 483.269 277.403 483.934 277.403 484.755 cv
277.403 485.576 265.541 486.242 250.908 486.242 cv
250.908 483.303 mo
236.61 483.303 225.02 483.953 225.02 484.755 cv
225.02 485.557 236.61 486.208 250.908 486.208 cv
265.206 486.208 276.796 485.557 276.796 484.755 cv
276.796 483.953 265.206 483.303 250.908 483.303 cv
.611765 .607843 .603922 rgb
f
250.908 486.208 mo
236.61 486.208 225.02 485.557 225.02 484.755 cv
225.02 483.953 236.61 483.303 250.908 483.303 cv
265.206 483.303 276.796 483.953 276.796 484.755 cv
276.796 485.557 265.206 486.208 250.908 486.208 cv
250.908 483.337 mo
236.946 483.337 225.627 483.972 225.627 484.755 cv
225.627 485.539 236.946 486.174 250.908 486.174 cv
264.87 486.174 276.189 485.539 276.189 484.755 cv
276.189 483.972 264.87 483.337 250.908 483.337 cv
f
250.908 486.174 mo
236.946 486.174 225.627 485.539 225.627 484.755 cv
225.627 483.972 236.946 483.337 250.908 483.337 cv
264.87 483.337 276.189 483.972 276.189 484.755 cv
276.189 485.539 264.87 486.174 250.908 486.174 cv
250.908 483.371 mo
237.281 483.371 226.234 483.991 226.234 484.755 cv
226.234 485.52 237.281 486.14 250.908 486.14 cv
264.535 486.14 275.582 485.52 275.582 484.755 cv
275.582 483.991 264.535 483.371 250.908 483.371 cv
.603922 .603922 .6 rgb
f
250.908 486.14 mo
237.281 486.14 226.234 485.52 226.234 484.755 cv
226.234 483.991 237.281 483.371 250.908 483.371 cv
264.535 483.371 275.582 483.991 275.582 484.755 cv
275.582 485.52 264.535 486.14 250.908 486.14 cv
250.908 483.405 mo
237.617 483.405 226.842 484.01 226.842 484.755 cv
226.842 485.501 237.617 486.105 250.908 486.105 cv
264.199 486.105 274.974 485.501 274.974 484.755 cv
274.974 484.01 264.199 483.405 250.908 483.405 cv
.603922 .6 .596078 rgb
f
250.908 486.105 mo
237.617 486.105 226.842 485.501 226.842 484.755 cv
226.842 484.01 237.617 483.405 250.908 483.405 cv
264.199 483.405 274.974 484.01 274.974 484.755 cv
274.974 485.501 264.199 486.105 250.908 486.105 cv
250.908 483.439 mo
237.952 483.439 227.449 484.028 227.449 484.755 cv
227.449 485.482 237.952 486.072 250.908 486.072 cv
263.864 486.072 274.367 485.482 274.367 484.755 cv
274.367 484.028 263.864 483.439 250.908 483.439 cv
.596078 .592157 .592157 rgb
f
250.908 486.072 mo
237.952 486.072 227.449 485.482 227.449 484.755 cv
227.449 484.028 237.952 483.439 250.908 483.439 cv
263.864 483.439 274.367 484.028 274.367 484.755 cv
274.367 485.482 263.864 486.072 250.908 486.072 cv
250.908 483.473 mo
238.287 483.473 228.056 484.047 228.056 484.755 cv
228.056 485.463 238.287 486.037 250.908 486.037 cv
263.529 486.037 273.76 485.463 273.76 484.755 cv
273.76 484.047 263.529 483.473 250.908 483.473 cv
.6 .596078 .592157 rgb
f
250.908 486.037 mo
238.287 486.037 228.056 485.463 228.056 484.755 cv
228.056 484.047 238.287 483.473 250.908 483.473 cv
263.529 483.473 273.76 484.047 273.76 484.755 cv
273.76 485.463 263.529 486.037 250.908 486.037 cv
250.908 483.507 mo
238.623 483.507 228.664 484.066 228.664 484.755 cv
228.664 485.445 238.623 486.003 250.908 486.003 cv
263.193 486.003 273.152 485.445 273.152 484.755 cv
273.152 484.066 263.193 483.507 250.908 483.507 cv
.596078 .588235 .588235 rgb
f
250.908 486.003 mo
238.623 486.003 228.664 485.445 228.664 484.755 cv
228.664 484.066 238.623 483.507 250.908 483.507 cv
263.193 483.507 273.152 484.066 273.152 484.755 cv
273.152 485.445 263.193 486.003 250.908 486.003 cv
250.908 483.541 mo
238.958 483.541 229.271 484.085 229.271 484.755 cv
229.271 485.426 238.958 485.969 250.908 485.969 cv
262.858 485.969 272.545 485.426 272.545 484.755 cv
272.545 484.085 262.858 483.541 250.908 483.541 cv
.588235 .584314 .584314 rgb
f
250.908 485.969 mo
238.958 485.969 229.271 485.426 229.271 484.755 cv
229.271 484.085 238.958 483.541 250.908 483.541 cv
262.858 483.541 272.545 484.085 272.545 484.755 cv
272.545 485.426 262.858 485.969 250.908 485.969 cv
250.908 483.576 mo
239.293 483.576 229.878 484.104 229.878 484.755 cv
229.878 485.407 239.293 485.935 250.908 485.935 cv
262.523 485.935 271.938 485.407 271.938 484.755 cv
271.938 484.104 262.523 483.576 250.908 483.576 cv
f
250.908 485.935 mo
239.293 485.935 229.878 485.407 229.878 484.755 cv
229.878 484.104 239.293 483.576 250.908 483.576 cv
262.523 483.576 271.938 484.104 271.938 484.755 cv
271.938 485.407 262.523 485.935 250.908 485.935 cv
250.908 483.61 mo
239.629 483.61 230.485 484.122 230.485 484.755 cv
230.485 485.388 239.629 485.901 250.908 485.901 cv
262.187 485.901 271.331 485.388 271.331 484.755 cv
271.331 484.122 262.187 483.61 250.908 483.61 cv
.584314 .580392 .580392 rgb
f
250.908 485.901 mo
239.629 485.901 230.485 485.388 230.485 484.755 cv
230.485 484.122 239.629 483.61 250.908 483.61 cv
262.187 483.61 271.331 484.122 271.331 484.755 cv
271.331 485.388 262.187 485.901 250.908 485.901 cv
250.908 483.644 mo
239.964 483.644 231.093 484.141 231.093 484.755 cv
231.093 485.369 239.964 485.867 250.908 485.867 cv
261.852 485.867 270.723 485.369 270.723 484.755 cv
270.723 484.141 261.852 483.644 250.908 483.644 cv
.576471 .576471 .576471 rgb
f
250.908 485.867 mo
239.964 485.867 231.093 485.369 231.093 484.755 cv
231.093 484.141 239.964 483.644 250.908 483.644 cv
261.852 483.644 270.723 484.141 270.723 484.755 cv
270.723 485.369 261.852 485.867 250.908 485.867 cv
250.908 483.678 mo
240.3 483.678 231.7 484.16 231.7 484.755 cv
231.7 485.351 240.3 485.833 250.908 485.833 cv
261.516 485.833 270.116 485.351 270.116 484.755 cv
270.116 484.16 261.516 483.678 250.908 483.678 cv
.576471 .572549 .572549 rgb
f
250.908 485.833 mo
240.3 485.833 231.7 485.351 231.7 484.755 cv
231.7 484.16 240.3 483.678 250.908 483.678 cv
261.516 483.678 270.116 484.16 270.116 484.755 cv
270.116 485.351 261.516 485.833 250.908 485.833 cv
250.908 483.712 mo
240.635 483.712 232.307 484.179 232.307 484.755 cv
232.307 485.332 240.635 485.799 250.908 485.799 cv
261.181 485.799 269.509 485.332 269.509 484.755 cv
269.509 484.179 261.181 483.712 250.908 483.712 cv
.568627 .564706 .564706 rgb
f
250.908 485.799 mo
240.635 485.799 232.307 485.332 232.307 484.755 cv
232.307 484.179 240.635 483.712 250.908 483.712 cv
261.181 483.712 269.509 484.179 269.509 484.755 cv
269.509 485.332 261.181 485.799 250.908 485.799 cv
250.908 483.746 mo
240.97 483.746 232.914 484.198 232.914 484.755 cv
232.914 485.313 240.97 485.765 250.908 485.765 cv
260.846 485.765 268.902 485.313 268.902 484.755 cv
268.902 484.198 260.846 483.746 250.908 483.746 cv
.564706 .560784 .564706 rgb
f
250.908 485.765 mo
240.97 485.765 232.914 485.313 232.914 484.755 cv
232.914 484.198 240.97 483.746 250.908 483.746 cv
260.846 483.746 268.902 484.198 268.902 484.755 cv
268.902 485.313 260.846 485.765 250.908 485.765 cv
250.908 483.78 mo
241.306 483.78 233.521 484.217 233.521 484.755 cv
233.521 485.294 241.306 485.731 250.908 485.731 cv
260.51 485.731 268.294 485.294 268.294 484.755 cv
268.294 484.217 260.51 483.78 250.908 483.78 cv
.564706 .560784 .560784 rgb
f
250.908 485.731 mo
241.306 485.731 233.521 485.294 233.521 484.755 cv
233.521 484.217 241.306 483.78 250.908 483.78 cv
260.51 483.78 268.294 484.217 268.294 484.755 cv
268.294 485.294 260.51 485.731 250.908 485.731 cv
250.908 483.814 mo
241.641 483.814 234.129 484.235 234.129 484.755 cv
234.129 485.275 241.641 485.697 250.908 485.697 cv
260.175 485.697 267.687 485.275 267.687 484.755 cv
267.687 484.235 260.175 483.814 250.908 483.814 cv
.556863 .552941 .552941 rgb
f
250.908 485.697 mo
241.641 485.697 234.129 485.275 234.129 484.755 cv
234.129 484.235 241.641 483.814 250.908 483.814 cv
260.175 483.814 267.687 484.235 267.687 484.755 cv
267.687 485.275 260.175 485.697 250.908 485.697 cv
250.908 483.848 mo
241.976 483.848 234.736 484.254 234.736 484.755 cv
234.736 485.256 241.976 485.663 250.908 485.663 cv
259.84 485.663 267.08 485.256 267.08 484.755 cv
267.08 484.254 259.84 483.848 250.908 483.848 cv
f
250.908 485.663 mo
241.976 485.663 234.736 485.256 234.736 484.755 cv
234.736 484.254 241.976 483.848 250.908 483.848 cv
259.84 483.848 267.08 484.254 267.08 484.755 cv
267.08 485.256 259.84 485.663 250.908 485.663 cv
250.908 483.882 mo
242.312 483.882 235.343 484.273 235.343 484.755 cv
235.343 485.238 242.312 485.629 250.908 485.629 cv
259.504 485.629 266.473 485.238 266.473 484.755 cv
266.473 484.273 259.504 483.882 250.908 483.882 cv
.54902 .54902 .545098 rgb
f
250.908 485.629 mo
242.312 485.629 235.343 485.238 235.343 484.755 cv
235.343 484.273 242.312 483.882 250.908 483.882 cv
259.504 483.882 266.473 484.273 266.473 484.755 cv
266.473 485.238 259.504 485.629 250.908 485.629 cv
250.908 483.916 mo
242.647 483.916 235.951 484.292 235.951 484.755 cv
235.951 485.219 242.647 485.594 250.908 485.594 cv
259.169 485.594 265.865 485.219 265.865 484.755 cv
265.865 484.292 259.169 483.916 250.908 483.916 cv
.54902 .54902 .54902 rgb
f
250.908 485.594 mo
242.647 485.594 235.951 485.219 235.951 484.755 cv
235.951 484.292 242.647 483.916 250.908 483.916 cv
259.169 483.916 265.865 484.292 265.865 484.755 cv
265.865 485.219 259.169 485.594 250.908 485.594 cv
250.908 483.95 mo
242.983 483.95 236.558 484.311 236.558 484.755 cv
236.558 485.2 242.983 485.56 250.908 485.56 cv
258.833 485.56 265.258 485.2 265.258 484.755 cv
265.258 484.311 258.833 483.95 250.908 483.95 cv
.545098 .545098 .541176 rgb
f
250.908 485.56 mo
242.983 485.56 236.558 485.2 236.558 484.755 cv
236.558 484.311 242.983 483.95 250.908 483.95 cv
258.833 483.95 265.258 484.311 265.258 484.755 cv
265.258 485.2 258.833 485.56 250.908 485.56 cv
250.908 483.984 mo
243.318 483.984 237.165 484.33 237.165 484.755 cv
237.165 485.181 243.318 485.526 250.908 485.526 cv
258.498 485.526 264.651 485.181 264.651 484.755 cv
264.651 484.33 258.498 483.984 250.908 483.984 cv
.541176 .541176 .537255 rgb
f
250.908 485.526 mo
243.318 485.526 237.165 485.181 237.165 484.755 cv
237.165 484.33 243.318 483.984 250.908 483.984 cv
258.498 483.984 264.651 484.33 264.651 484.755 cv
264.651 485.181 258.498 485.526 250.908 485.526 cv
250.908 484.018 mo
243.653 484.018 237.772 484.348 237.772 484.755 cv
237.772 485.162 243.653 485.492 250.908 485.492 cv
258.163 485.492 264.044 485.162 264.044 484.755 cv
264.044 484.348 258.163 484.018 250.908 484.018 cv
.537255 .537255 .533333 rgb
f
250.908 485.492 mo
243.653 485.492 237.772 485.162 237.772 484.755 cv
237.772 484.348 243.653 484.018 250.908 484.018 cv
258.163 484.018 264.044 484.348 264.044 484.755 cv
264.044 485.162 258.163 485.492 250.908 485.492 cv
250.908 484.052 mo
243.989 484.052 238.379 484.367 238.379 484.755 cv
238.379 485.143 243.989 485.458 250.908 485.458 cv
257.827 485.458 263.437 485.143 263.437 484.755 cv
263.437 484.367 257.827 484.052 250.908 484.052 cv
.533333 .533333 .529412 rgb
f
250.908 485.458 mo
243.989 485.458 238.379 485.143 238.379 484.755 cv
238.379 484.367 243.989 484.052 250.908 484.052 cv
257.827 484.052 263.437 484.367 263.437 484.755 cv
263.437 485.143 257.827 485.458 250.908 485.458 cv
250.908 484.086 mo
244.324 484.086 238.987 484.386 238.987 484.755 cv
238.987 485.125 244.324 485.424 250.908 485.424 cv
257.492 485.424 262.829 485.125 262.829 484.755 cv
262.829 484.386 257.492 484.086 250.908 484.086 cv
.529412 .529412 .52549 rgb
f
250.908 485.424 mo
244.324 485.424 238.987 485.125 238.987 484.755 cv
238.987 484.386 244.324 484.086 250.908 484.086 cv
257.492 484.086 262.829 484.386 262.829 484.755 cv
262.829 485.125 257.492 485.424 250.908 485.424 cv
250.908 484.121 mo
244.659 484.121 239.594 484.405 239.594 484.755 cv
239.594 485.106 244.659 485.39 250.908 485.39 cv
257.157 485.39 262.222 485.106 262.222 484.755 cv
262.222 484.405 257.157 484.121 250.908 484.121 cv
.52549 .521569 .517647 rgb
f
250.908 485.39 mo
244.659 485.39 239.594 485.106 239.594 484.755 cv
239.594 484.405 244.659 484.121 250.908 484.121 cv
257.157 484.121 262.222 484.405 262.222 484.755 cv
262.222 485.106 257.157 485.39 250.908 485.39 cv
250.908 484.155 mo
244.995 484.155 240.201 484.424 240.201 484.755 cv
240.201 485.087 244.995 485.356 250.908 485.356 cv
256.821 485.356 261.615 485.087 261.615 484.755 cv
261.615 484.424 256.821 484.155 250.908 484.155 cv
.517647 .517647 .513725 rgb
f
250.908 485.356 mo
244.995 485.356 240.201 485.087 240.201 484.755 cv
240.201 484.424 244.995 484.155 250.908 484.155 cv
256.821 484.155 261.615 484.424 261.615 484.755 cv
261.615 485.087 256.821 485.356 250.908 485.356 cv
250.908 484.189 mo
245.33 484.189 240.808 484.442 240.808 484.755 cv
240.808 485.068 245.33 485.322 250.908 485.322 cv
256.486 485.322 261.008 485.068 261.008 484.755 cv
261.008 484.442 256.486 484.189 250.908 484.189 cv
f
250.908 485.322 mo
245.33 485.322 240.808 485.068 240.808 484.755 cv
240.808 484.442 245.33 484.189 250.908 484.189 cv
256.486 484.189 261.008 484.442 261.008 484.755 cv
261.008 485.068 256.486 485.322 250.908 485.322 cv
250.908 484.223 mo
245.666 484.223 241.416 484.461 241.416 484.755 cv
241.416 485.049 245.666 485.288 250.908 485.288 cv
256.15 485.288 260.4 485.049 260.4 484.755 cv
260.4 484.461 256.15 484.223 250.908 484.223 cv
.513725 .513725 .509804 rgb
f
250.908 485.288 mo
245.666 485.288 241.416 485.049 241.416 484.755 cv
241.416 484.461 245.666 484.223 250.908 484.223 cv
256.15 484.223 260.4 484.461 260.4 484.755 cv
260.4 485.049 256.15 485.288 250.908 485.288 cv
250.908 484.257 mo
246.001 484.257 242.023 484.48 242.023 484.755 cv
242.023 485.031 246.001 485.254 250.908 485.254 cv
255.815 485.254 259.793 485.031 259.793 484.755 cv
259.793 484.48 255.815 484.257 250.908 484.257 cv
.509804 .509804 .505882 rgb
f
250.908 485.254 mo
246.001 485.254 242.023 485.031 242.023 484.755 cv
242.023 484.48 246.001 484.257 250.908 484.257 cv
255.815 484.257 259.793 484.48 259.793 484.755 cv
259.793 485.031 255.815 485.254 250.908 485.254 cv
250.908 484.291 mo
246.336 484.291 242.63 484.499 242.63 484.755 cv
242.63 485.012 246.336 485.22 250.908 485.22 cv
255.48 485.22 259.186 485.012 259.186 484.755 cv
259.186 484.499 255.48 484.291 250.908 484.291 cv
.501961 .501961 .498039 rgb
f
250.908 485.22 mo
246.336 485.22 242.63 485.012 242.63 484.755 cv
242.63 484.499 246.336 484.291 250.908 484.291 cv
255.48 484.291 259.186 484.499 259.186 484.755 cv
259.186 485.012 255.48 485.22 250.908 485.22 cv
250.908 484.325 mo
246.672 484.325 243.238 484.518 243.238 484.755 cv
243.238 484.993 246.672 485.186 250.908 485.186 cv
255.144 485.186 258.578 484.993 258.578 484.755 cv
258.578 484.518 255.144 484.325 250.908 484.325 cv
f
250.908 485.186 mo
246.672 485.186 243.238 484.993 243.238 484.755 cv
243.238 484.518 246.672 484.325 250.908 484.325 cv
255.144 484.325 258.578 484.518 258.578 484.755 cv
258.578 484.993 255.144 485.186 250.908 485.186 cv
250.908 484.359 mo
247.007 484.359 243.845 484.536 243.845 484.755 cv
243.845 484.974 247.007 485.152 250.908 485.152 cv
254.809 485.152 257.971 484.974 257.971 484.755 cv
257.971 484.536 254.809 484.359 250.908 484.359 cv
.498039 .494118 .490196 rgb
f
250.908 485.152 mo
247.007 485.152 243.845 484.974 243.845 484.755 cv
243.845 484.536 247.007 484.359 250.908 484.359 cv
254.809 484.359 257.971 484.536 257.971 484.755 cv
257.971 484.974 254.809 485.152 250.908 485.152 cv
f
322.039 464.21 mo
179.777 464.21 li
161.237 464.21 146.208 449.181 146.208 430.641 cv
146.208 207.545 li
146.208 174.744 li
146.208 166.279 li
146.208 133.478 li
146.208 119.324 li
146.208 102.487 li
146.208 68.1725 li
146.208 49.6329 161.237 34.6037 179.777 34.6037 cv
322.039 34.6037 li
340.579 34.6037 355.608 49.6329 355.608 68.1725 cv
355.608 430.641 li
355.608 449.181 340.579 464.21 322.039 464.21 cv
180.04 35.6037 mo
161.907 35.6037 147.208 50.3031 147.208 68.4357 cv
147.208 430.378 li
147.208 448.511 161.907 463.21 180.04 463.21 cv
321.776 463.21 li
339.909 463.21 354.608 448.511 354.608 430.378 cv
354.608 68.4357 li
354.608 50.3031 339.909 35.6037 321.776 35.6037 cv
180.04 35.6037 li
321.513 462.21 mo
180.303 462.21 li
162.577 462.21 148.208 447.841 148.208 430.115 cv
148.208 68.6991 li
148.208 50.9733 162.577 36.6036 180.303 36.6036 cv
321.513 36.6036 li
339.238 36.6036 353.608 50.9733 353.608 68.6991 cv
353.608 430.115 li
353.608 447.841 339.238 462.21 321.513 462.21 cv
180.62 37.883 mo
163.573 37.883 149.754 51.7022 149.754 68.7492 cv
149.754 430.065 li
149.754 447.112 163.573 460.931 180.62 460.931 cv
321.196 460.931 li
338.243 460.931 352.062 447.112 352.062 430.065 cv
352.062 68.7492 li
352.062 51.7022 338.243 37.883 321.196 37.883 cv
180.62 37.883 li
.368627 .27451 .364706 rgb
f
321.776 463.21 mo
180.04 463.21 li
161.907 463.21 147.208 448.511 147.208 430.378 cv
147.208 68.4357 li
147.208 50.3031 161.907 35.6037 180.04 35.6037 cv
321.776 35.6037 li
339.909 35.6037 354.608 50.3031 354.608 68.4357 cv
354.608 430.378 li
354.608 448.511 339.909 463.21 321.776 463.21 cv
180.303 36.6036 mo
162.577 36.6036 148.208 50.9733 148.208 68.6991 cv
148.208 430.115 li
148.208 447.841 162.577 462.21 180.303 462.21 cv
321.513 462.21 li
339.238 462.21 353.608 447.841 353.608 430.115 cv
353.608 68.6991 li
353.608 50.9733 339.238 36.6036 321.513 36.6036 cv
180.303 36.6036 li
.647059 .592157 .643137 rgb
f
321.196 460.931 mo
180.62 460.931 li
163.573 460.931 149.754 447.112 149.754 430.065 cv
149.754 68.7492 li
149.754 51.7022 163.573 37.883 180.62 37.883 cv
321.196 37.883 li
338.243 37.883 352.062 51.7022 352.062 68.7492 cv
352.062 430.065 li
352.062 447.112 338.243 460.931 321.196 460.931 cv
180.463 44.73 mo
167.178 44.73 156.409 55.4998 156.409 68.7849 cv
156.409 430.029 li
156.409 443.314 167.178 454.084 180.464 454.084 cv
321.352 454.084 li
334.638 454.084 345.407 443.314 345.407 430.029 cv
345.407 68.7849 li
345.407 55.4998 334.638 44.73 321.352 44.73 cv
305.003 44.73 li
196.619 44.73 li
191.036 44.73 185.738 44.73 180.463 44.73 cv
.113725 .113725 .105882 rgb
f
321.352 454.084 mo
180.464 454.084 li
167.178 454.084 156.409 443.314 156.409 430.029 cv
156.409 68.7849 li
156.409 55.4998 167.178 44.73 180.463 44.73 cv
185.738 44.73 191.036 44.73 196.619 44.73 cv
305.003 44.73 li
321.352 44.73 li
334.638 44.73 345.407 55.4998 345.407 68.7849 cv
345.407 430.029 li
345.407 443.314 334.638 454.084 321.352 454.084 cv
233.275 51.0282 mo
229.511 51.0282 226.46 54.0793 226.46 57.8432 cv
226.46 61.6071 229.511 64.6582 233.275 64.6582 cv
266.725 64.6582 li
270.489 64.6582 273.54 61.6071 273.54 57.8432 cv
273.54 54.0793 270.489 51.0282 266.725 51.0282 cv
233.275 51.0282 li
1 1 1 rgb
f
356.834 196.147 mo
355.608 196.147 li
355.608 144.368 li
356.834 144.368 li
356.834 196.147 li
level3{
gsave
clp
[0 51.7783 -51.7783 0 356.221 144.368 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~BN\\V=^YrI?trkRC0G%]>@MAP@Vf7YCg:Ie>\%\VA8Y[aDI$gl?"S"]AoM'hE*d0s?YFFdBQ@HoEaWU&
?tsdkCNO!#F^]*/@;L*rD0BB*G@GH6@r?O$Dg5c1H":l>A8lj*EI)29HY%5EATE01F*qS@I:dSLB68T8
Fan%IIqX"UBQnu?GCaIQJSB@\BmG;FH%TjXK5,^cCO:_MH\H6_Kku-kCjh%SI>;ZgLM_KrD1@@ZIu/&n
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~M/Ij"D1@@XItqihL226mC41eMI"Z0\KP5^bB7#5BH@]XRJRj%V@sEK5G^j1HIURGK@!6s*FaRP=HX:f@
?$(BtF*Uu1H!><6>&eahEHbN(G#rX*=)W4^DKJlrF&[!s;f-PQCiN?gE)CCi:hjoEC2Qd\DGFn_9k\?:
B5C4RCJ&2R8nMg0ASF\GBLcTH7Up(#@qJ/=Ajg'=6XaLl?t2K1@mOI25[Rqa?=?$'?p.e&4^;>V>[BKr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~?9;@s4'GlM=^4!j><,eh3EK?C<`h=^=>s5]2cNg9;cP_R<&IQP2,R:/:f9,G;);!E1JU_$9i!N<:,,C9
0hY1p8kUj09/&n/01\Yf7n>7%7kR5#/OW&[6q&Xo6nCYl.mZKP5sd%d5q5)a.6]sF4[(8W4t&NV-TaF<
3]e]M3[QjJ-9+"32`N*A2^C:>,W.J)1c6L61a4_3+u1ns0ejh*0d&,'+>5Ai/hS4t/KQGp*\8i_.k;Vi
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~.ig)j*\/f`/1r"r0-Dl$+YPSo0Jan-1a=b5,;V5'1cH^<3$pOD-9!t53'/NK4X`?T.6BaD4?tD[5q>,c
/3cKR5X[1i74pnr01/5`6qK($8hie.1.P"n851m3:,GU>2,$h(9i3fD;E%BN2c*L6;-#\T=#s8^3`K6D
<E_Lc><Gtl4]kuR=^F<r?p@k(5[7ba?"60,A3sX76XXLo@:qu;BLQEF7V$:(ASakKD+J;W8SE$6BlH[Z
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~E(Xka8nr<;C2Z^ZDb=_^8ni3:Bl6RXDG+\]95/9:BPgCUD+ePZ95&08BP^=TCeSJX9P808B5:1RCJ8AV
9P8-7B5:1QC.r5S9P/$5Ank%PBh`2R9kA$5ASFkMBME&O9kA!4AS=eKB2)oL:1S!4A7nYJAkllK:1Im2
@qJJGAkliI:1Ij1@qADFAPZcG:L[j1@Ur8DA5?ZE:L[g0@:N)A@o$NB:LR^/@:E&A@SgH@:gd^.?sul>
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~@8L?>:L@I(?=$B4?;4^29O(gq>?a^'>"Vq#8Q](c='.so=%64k79*>V<)c7a;aXG\6;^WH;,KVU:d@fP
5>Fs;9hdcE9Kc$B4A/=/8kM-98NB=43CcS!7Rf=*7Q*\(2+0hh6UN[s68Lnn1-e)Z5<pne5;58b00MHN
4?P2W4"NER/3,aA3B8QK3%6dF-oNt32)Qa<1aY"8,r7>&1,:(/0dAA++tkSm/hS7u/fuYs+"Sra.k;Vi
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~.ig)j*@i]_/1hno/fuYu+"f5i0/4S&0d/5++Ybbs1,L122'Xn8,;_;(2)cd=3$gIC,r[k33'&BH4"!'O
-TXC<4$G&T4t&QY.6TpF5!^Y_67P5e.mZNQ5t!7j74^eq/OW)\6q8ju81mA'01SVf84tX-9/&q20hP.p
92737:GPU>1/1S$:/NfC;D_0J1f.+.;,fDN<Am`U2H*[9<*2(Z=?'>a3*'3C='I[e>WQ"m3a#`M>$a9p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~?9;@u4'Q&S>[T[!?p.e(4^DM\?"-!(@m44/5@7qc?Y)K1AO'X86"":j@:ql7BL60A6=OXr@VJ2>C.)QI
6tC($A8F\FCdhoP7V-I,Ao:+NDb"GY7qZd3B5pIUECjha8SN6<Blcm\F@p:i958TBCN`BeG"c^r9l,#J
Cj8ZkGtr4%:2YARDL,)rHVeX.:iC_XE.(T&I8Os4;K71aEIUo-J5^K=;fdLhF+RA4JlQoF<HNjoFbEe<
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~KN<5J<cs$qFFmM7JQ6cB<HE[jF+721IoLH;<,m=cEICf+HrP'4<,d1_DgG?#H;ea-;f6hYDKo&rG>`:$
;JgSTCirWlFAZgq;/:5MCN<9eE`$Rk:halFBlHm_Dbt+c:hX`CBPgOXD,4e\:M+B<Ant1SC//>S:1\-7
A8"_KB22uM9k.d0@qAADAPHWE9k%U+@:Mu>@SC0=9OM:&?slZ8?qXj693tpt?=$92>t\I.8mP[o>['g*
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.0185053 .0381953 .0820552 .105304 .904875 .939094 .96458 .98292 ]
/Encode [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 51.7783 -51.7783 0 356.221 144.368 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~B5Vj>K8+htD.HmR;bfqS5s71a0.SqI9j)"FDf9Q4Df9Q4Df0H1DJj?0DJj?0DJj<.D/F-,D/F-,D/F-+
Ci!p(Ci!p(Ci!p(CMR^$CMR^$CMR^$CMIU!C2.KuC2.KuC2.KuC2%BrBk_9qBk_9qBk_6oBP;'mBP;'m
BP;'lB4kjiB4kjiB4kjiAnGXeAnGXeAnGXeAn>ObAS#FaAS#FaAS#FaAS#C_A7T4]A7T4]A7T4\@q0"Y
@q0"Y@q0"Y@U`eU@U`eU@U`eU@UW\R@:<SQ@:<SQ@:<PO?smAM?<C)u76`dg/MB%I7SZujAo;d@J9Pj@
~>
<~=C#?HC276Y9gUm"1bgX7.OQJc*ulOW1HRop8P)KF8P)KF8P)KF8P)KF8kM]J8kM]J8kM]J8kM]J8kM]J
8kM]J8kM]J8kM]J91qoN91qoN91qoN91qoN91qoN91qoN91qoN91qoN91qoN9MA,R9MA,R9MA,R9MA,R
9MA,R9MA,R9MA,R9MA,R9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V:/4PZ:/4PZ:/4PZ
:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/=Y]:JXb^:JXb^:JXb^:JXb^9h7T52D?X-*ZlXU/MT.E5XnFF<)HFb
~>
<~?=dqoH@9sTBOFtC;+sMJ5W^kZ/h/\B8l]54Bk_9qBk_9qBk_9qBP;'mBP;'mBP;'mBP;'mBP;'mB4kji
B4kjiB4kjiB4kjiB4kjhAnGXeAnGXeAnGXeAnGXeAnGXeAnGUcAS#FaAS#FaAS#FaAS#FaAS#C_A7T4]
A7T4]A7T4]A7T4]A7K+Z@q0"Y@q0"Y@q0"Y@q0"Y@q&nV@U`eU@U`eU@U`eU@U`eU@U`eT@:<SQ@:<SQ
@:<SQ@:<SQ@:<SP?smAM?smAM?smAM?smAM?sm>K?XI/I?XI/I>uslq6p<Rc/1reC6qgN_?tO1oEboAs
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
356.834 196.149 mo
356.834 144.382 li
357.447 145.054 li
357.137 150.566 357.158 189.977 357.447 195.477 cv
356.834 196.149 li
level3{
gsave
clp
[0 51.7673 -51.7673 0 357.14 144.382 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~B4,@b?tX+ZB4kRaB4#:a?Y="XB4kO`B3o1_?"R_TAnPC]B3f+^>\7VRAnP@\Am8kZ>@qJOAnG7ZAm/eY
>%VAMAnG1XAm&\W=_22JAS,%UAlrVV=Cl)GAS,"TAliPU=(PuEAS+tSAl`JT<FocBAS+qRAlWAR<+KT?
A7eeOAlE5P;e0K=A7ebNAQ!&M;Ij?:A7\VKAPluL;.O68A7\SJAPclJ:h+'4@qAGGAPZfI:Lds2@qADF
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~APQ`H:Le!4A7eYKAl*#N;.XB;AS4nPB2W>T;eB]AAnY.UBiJ_Z<G-#GB51I\C0#"_=(l>MBkpgbCKP:d
=__bVC2@'gCg1[l>AJ(\CMd<mD-^sq?#4CbD/NZsDdR@"?Ys^hDK'!$E+*X'@;g*oDfK6)EFWs-@rQI!
E,oN0Eb063AoVm(EcYl6F(]N8BQJ9/F*),;F_Pr?C34T5FEVGAG&)5DCiso;Fa%\GGAVMIDK^8BGBe%M
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~G].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eN
Dg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GE
GBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%MG].eNDg-GEGBe%M
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~G].eNDKg;BG'@eHGAVMHCiso;F`qPCG&)2BC34T5FEM;>FD5f<BQJ9/F)tu7F(]N7Ao_s)EH5W1Eb062
A8lNuE,fB,EFNj*@W-3oDfB-&E+!R%?uBmiD/WcuDI.0t?>XRcCi*HoD-Umo>\e1\CM[3jCg(Ri>&%hU
C26pcCKP:c=(uDNBPLR]C0#"^<G-#GB5(=XBN/SW;eB]AAnP"RB2W;R;.XB;AS+bLAl*#M:Ln$4@qADF
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~APQ`H:1Ij2@qAGGAPZfI:Lds4@qAJHAPcoK;.O68A7\VKAPluL;Ij?:A7\YLAlE5P;e0K=A7ebNAlN;Q
<+KT?A7ehPAlWDS<FocBAS+tSAl`JT<b5lEAS,"TAliPU=(PuGAS,%UAlrVV=_22JAS,(VAm&_X>%VAM
AnG4YAm8kZ>@qJOAnG7ZB3]%]>\7VRAnPC]B3f+^?"R_TAnPF^B3o4`?>!nXB4kRaB4#:a?Y="ZB4kUb
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.0640242 .186012 .806376 .919115 ]
/Encode [0 1 0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 51.7673 -51.7673 0 357.14 144.382 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~AnGXeAn>ObAS#FaARo=^A7]=aAnPdjBk_<tCM[g(DJjB2E,fl<EcZ>EF`hkOGB\7TGB\7TGB\7TGB\7T
GB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7T
GB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7TGB\7T
GB\7TGB\7TGB\7TGB\7TG'.qLF)uABEH#i7DJj<-Chmd#BkV0mAnGUbA7T4]A7]=`AS#FaAS#FbAnGXe
~>
<~?X@#C>?Y-2<`N*t;Gg7d:/4S];,U=l<E<1(>$G6;?=.)K@Uiq[AnPdkC27X&DJj?0DJj?0DJj?0DJj?0
DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0
DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0DJj?0
DJj?0DJj?0DJj?0DJj?/Chmd"BP1pgA7AtT?X@#B>$4s/<E)mp;,C%`:/=\_;,U=l<E<.%=BSg3>[1Q@
~>
<~AnGXdAS#F`A7T4\@q0"X@UinYAS#IcB4tsmC2.O#Ci+$,Df9T7EH6,AFEDYKG'8%PG'8%PG'8%PG'8%P
G'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%P
G'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%PG'8%P
G'8%PG'8%PG'8%PG'8%PF`__HEcQ/=E,TW2D/=$(C2%BqB4baeARo:[@U`hW@q0"ZA7T4]A7]=`AS#Ic
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
145.458 166.269 mo
144.758 166.269 li
144.758 133.478 li
144.758 133.469 li
145.458 133.469 li
145.458 166.269 li
level3{
gsave
clp
[0 32.8 32.8 0 145.108 133.469 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~BN\\V=^YrI?trkRC0G%]>@MAP@Vf7YCg:Ie>\%\VA8Y[aDI$gl?"S"]AoM'hE*d0s?YFFdBQ@HoEaWU&
?tsdkCNO!#F^]*/@;L*rD0BB*G@GH6@r?O$Dg5c1H":l>A8lj*EI)29HY%5EATE01F*qS@I:dSLB68T8
Fan%IIqX"UBQnu?GCaIQJSB@\BmG;FH%TjXK5,^cCO:_MH\H6_Kku-kCjh%SI>;ZgLM_KrD1@@ZIu/&n
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~M/Ij"D1@@XItqihL226mC41eMI"Z0\KP5^bB7#5BH@]XRJRj%V@sEK5G^j1HIURGK@!6s*FaRP=HX:f@
?$(BtF*Uu1H!><6>&eahEHbN(G#rX*=)W4^DKJlrF&[!s;f-PQCiN?gE)CCi:hjoEC2Qd\DGFn_9k\?:
B5C4RCJ&2R8nMg0ASF\GBLcTH7Up(#@qJ/=Ajg'=6XaLl?t2K1@mOI25[Rqa?=?$'?p.e&4^;>V>[BKr
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~?9;@s4'GlM>$O*k><,eh3EK?C='7L`=>s5]2cNg9<)khT<AdZR2,R:0;,T5I;D_0H1JUb&:/<W>:,5L<
0hY4q92%$39/&q101\\g84bI)81mA%/k&8^77Jjs74^eo/4)`T6:37h67P5d.R-0J5<pY]5:J`Z-p0X@
4?Y&R4=<0O-94+63B8BF3@-UD,W7S,2Dug<2Bt%9,;V/#1G^411*JA-+YYVn0JFV&0-;f"+"])d/M/"p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~/KQGq+"],f/heD$0d/5++Ybbs1,L432C(+<,W.P-2E<*C3[QgJ-TO:;3^"lQ4t/TY.Qp$I5!^\`67bAh
/O;cV6:ELo7k[8$01AGd7S5C*9/9%31.b1r8kq39:Gb^@2,$k*9i<lE;`@KO3)EU8;-#\T=?9A`4&fBF
<EhRd>Wl.o4]l#S=^OBs?pIq)5[7ba?"63-A3sX76XXLo@:qu;BglNH7V$:)ASakKD+J;W8SE$6BlH[Z
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~E(Xka8nr<;C2Z^ZDb=_^8ni3:Bl6RXDG+\]95/9:BPgCUD+ePZ95&08BP^=TCeSJX9P808B5:1RCJ8AV
9P8-7B5:1QC.r5S9P/$5Ank%PBh`2R9kA$5ASFkMBME&O9kA!4AS=eKB2)oL:1S!4A7nYJAkllK:1Im2
@qJJGAkliI:1Ij1@qADFAPZcG:L[j1@Ur8DA5?ZE:L[g0@:N)A@o$NB:LR^/@:E&A@SgH@:gd^.?sul>
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~@8L?>:L@I(?=-H6?;4^29O(gq>?a^'>"Vq$8Qf1e=BJ'p=%64k7TEGW<)l=c<'sS_6W-fK;,KVU:d@fQ
5>P'>:/3uI9g)0D4A/@091q?=8ifO83Cl\#7n5L-7lNn,2FU%l6prk!6Sh%q1I4>_5s[4j5VPDe00VQQ
4[(J]4Y8cY/3>pD3]\cO3@[!K.6':82`E-C2CC@>-8[P*1Gg@51F+_2,;Cns0JFY'0-Dl#+>,8g/M/"p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~/KQGq*\B#e/MA1u0H`#'+>>Po0JXe+1EnS2+u;)$1H$I72C(.=,W7V-2E<'B3@-XG-94.73BSZM4XW<S
-p0[A4?k8X5Uel^.R-3K5=-hb6RtGj.mcWT6:EFm7P."u/O`/^77]%#8M<S+01\_h84tX.9JB(50hY7r
92769:GPX@1JUe':/WoE;D_3K2,R=1;,oJO<AmcV2H3a:<*2(Z=ZBGb3*09D='I[e>WQ"m3a,fN>$a9p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~?9;@u4'Q&S>[T[!?p.e(4^DM\?"-!(@m44/5@7qc?Y)K1AO'X86"":j@:ql7BL60A6=OXr@VJ2>C.)QI
6tC($A8F\FCdhoP7V-I,Ao:+NDb"GY7qZd3B5pIUECjha8SN6<Blcm\F@p:i958TBCN`BeG"c^r9l,#J
Cj8ZkGtr4%:2YARDL,)rHVeX.:iC_XE.(T&I8Os4;K71aEIUo-J5^K=;fdLhF+RA4JlQoF<HNjoFbEe<
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~KN<5J<cs$qFFmM7JQ6cB<HE[jF+721IoLH;<,m=cEICf+HrP'4<,d1_DgG?#H;ea-;f6hYDKo&rG>`:$
;JgSTCirWlFAZgq;/:5MCN<9eE`$Rk:halFBlHm_Dbt+c:hX`CBPgOXD,4e\:M+B<Ant1SC//>S:1\-7
A8"_KB22uM9k.d0@qAADAPHWE9k%U+@:Mu>@SC0=9OM:&?slZ8?qXj693tpt?=$92>t\I.8mP[o>['g*
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.0185053 .0381953 .0820552 .105304 .904875 .939094 .96458 .98292 ]
/Encode [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 32.8 32.8 0 145.108 133.469 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~B5Vj>K8+htD.HmR<)6.V6U!Lf0eG@P:0M1HDf9Q4Df9Q4Df0H1DJj?0DJj?0DJj<.D/F-,D/F-,D/F-+
Ci!p(Ci!p(Ci!p(CMR^$CMR^$CMR^$CMIU!C2.KuC2.KuC2.KuC2%BrBk_9qBk_9qBk_6oBP;'mBP;'m
BP;'lB4kjiB4kjiB4kjiAnGXeAnGXeAnGXeAn>ObAS#FaAS#FaAS#FaAS#C_A7T4]A7T4]A7T4\@q0"Y
@q0"Y@q0"Y@U`eU@U`eU@U`eU@UW\R@:<SQ@:<SQ@:<PO?smAM?<L3#7R9*n/ho=N7o*/lAo;d@J9Pj@
~>
<~=C#?HC276Y9gUm"1bp^9.OZSf+<;aZ1HRop8P)KF8P)KF8P)KF8P)KF8kM]J8kM]J8kM]J8kM]J8kM]J
8kM]J8kM]J8kM]J91qoN91qoN91qoN91qoN91qoN91qoN91qoN91qoN91qoN9MA,R9MA,R9MA,R9MA,R
9MA,R9MA,R9MA,R9MA,R9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V:/4PZ:/4PZ:/4PZ
:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/=Y]:JXb^:JXb^:JXb^:JXb^9h7T52DH^/+!;gX/M]4F5XnFF<)HFb
~>
<~?=dqoH@9sTBOFtD;,'VM5s.+`0.]"I8l]54Bk_9qBk_9qBk_9qBP;'mBP;'mBP;'mBP;'mBP;'mB4kji
B4kjiB4kjiB4kjiB4kjhAnGXeAnGXeAnGXeAnGXeAnGXeAnGUcAS#FaAS#FaAS#FaAS#FaAS#C_A7T4]
A7T4]A7T4]A7T4]A7K+Z@q0"Y@q0"Y@q0"Y@q0"Y@q&nV@U`eU@U`eU@U`eU@U`eU@U`eT@:<SQ@:<SQ
@:<SQ@:<SQ@:<SP?smAM?smAM?smAM?smAM?sm>K?XI/I?XI/I?!'ut76imj/MB%H786]a?tO1oEboAs
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
144.758 166.271 mo
144.408 165.845 li
144.573 162.361 144.585 137.395 144.408 133.904 cv
144.758 133.478 li
144.758 166.269 li
144.758 166.271 li
level3{
gsave
clp
[0 32.793 32.793 0 144.583 133.478 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 32.793 32.793 0 144.583 133.478 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
146.208 166.279 mo
146.208 166.279 li
145.458 166.279 li
145.458 133.478 li
146.208 133.478 li
146.208 166.279 li
level3{
gsave
clp
[2.00851e-15 -32.8016 32.8016 2.00851e-15 145.833 166.279 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~BN\\T=C,T@?"I&BA5ulE<*Ng1>%(<3@8^69;-71%='e['>u"C)9iP=j<*Dpn=\;Ro8PrP[:f^(_<CTb`
78?cL9i=>P;F=,T6;(-@8l%]D:-V9D5"J@17nYs68ioI53^cM!6Us+'7Q3Y&2F0_g5XR@m6Sq"o1Hn)[
4[:_a5;5/_00;<L3]nuS4"N?P.lTI<2`N6E2^gOA-T!\-1GgC51aOn5,V_&!0JOb)0Hi&%+>,8g/M/"p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~/KQGq*\B#e/MA1u0H`#'+>>Po0JXe+1EnS2+u;)$1H$I72C(.=,W7V-2E<'B3@-XG-94.73BSZM4XW<S
-p0[A4?k8X5Uel^.R-3K5=-hb6RtGj.mcWT6:EFm7P."u/O`/^77]%#8M<S+01\_h84tX.9JB(50hY7r
92769:GPX@1JUe':/WoE;D_3K2,R=1;,oJO<AmcV2H3a:<*2(Z=ZBGb3*09D='I[e>WQ"m3a,fN>$a9p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~?9;@s4'GlM>$O*k><,eh3EK?C='7L`=>s5]2cNg9<)khT<AdZR2,R:0;,T5I;D_0H1JUb&:/<W>:,5L<
0hY4q92%$39/&q101\\g84bI)81mA%/k&8^77Jjs74^eo/4)`T6:37h67P5d.R-0J5<pY]5:J`Z-p0X@
4?Y&R4=<0O-94+63B8BF3@-UD,W7S,2Dug<2Bt%9,;V/#1G^411*JA-+YYVn0JFV&0-;f"+"])d/M/"p
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~/KQGq+"])e/h\>"0Hi)(+YYVp0est.1F+_4,Vq8'1c6U:2C::>-T3n32`N3E3@QpJ.QKO?3]eiQ4=iQV
/Nc0J4[(J^5;,2b00_]U5X@+j5r(_m1.">a6UWb!6o7;#2+9tm7Ro@,7lNq/3(QV$8P(p78ifR;4%i7/
9M@QC9g)6H4\ed::JX2O:d@lT5Z(EF;Goh[;aOG_6W@#Q<E2Ff<^g(k7TWY]=BJ'r=\)_"8Qo:h>?a^)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.0530612 .518367 .96458 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.00851e-15 -32.8016 32.8016 2.00851e-15 145.833 166.279 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~B4G:Q<`)U`6pWpo1G:=3/hSb/0/#"50ekC<1,C^C1c7-J2)[?O2`NcV3B9,]4$,Pe4?Pbi5!D1q5<qJ"
5sdn*6UO4/6q'O67Rfm<84Z<D8kM]J91qrP9he>W:/=Y^:f1(e;,U:j;cH^q<E3(#='&L+=BJ^/>$>-7
>?kE=?!U`@>[(E:>$>'3=BJ[-='&F&<E)ps<)Z^n;,L1f:f'q`:/+GW9h\5R91hfK8P)HD7n6$<7R]a6
6pj=/6UF()5X7Ou5<h=q4Zkhh4?GVc3]T/Z3&iiU2E!EM2)I-G1GU^?0ek@90/"q1/hS_-1,h<]7S?TZ
~>
<~=B&*j7m]F$2)6a3,Tn*J*Zc@D+!2RH+<VdM+X&!Q+sJ3U,9nEX,:"N[,pai`-71&d-RU8h-n$Jm.4H\p
.4Qes.P!#".kE5&/M/P+/hSb//hSe10/#"50JP::0etL>1,C^B1GgpF1c.$H2)R9M2E!KQ2`E]U3&ioY
3BB2^3]];_3]T2\3&ilW2`EZS2E!HN2)R6J1c.$G1G^gC1,:U?0ekC:0JG160/"t2/hSb//M/P+/1`>&
.k<,".Olkr.4H\p-n$Jl-RU8g-71&c,paf^,U=TZ,9nEW+sJ3S+X&!O+<VaJ+!2OF*Zc=C,:>#s2EO/m
~>
<~?<^K0:J45H5Wq+b0eFq-/1`A)/hSe10/,(70etL>1,C^C1c7-J2)[BP3&ilW3B9,]4$,Mc4?Pbj5!D.p
5<qJ"5s[e'6:4+.6psI47Rfm<7n6*@8P)NH8kVfN9MJ5U9hnGZ:Jaka:f1(f;c?Un<)cjt<`W7%='&L+
=]nm2>$>*4=]nm0='&F'<`W4#<)cdp;c6Lj;,C(c:JX_\9he>V9M8#N8kM]I8OuBB7n6$<77BU46pj=.
6:!n'5sRY!5!D.o4Ztni4$,Mb3]T2[3&iiU2E!EM2)R3H1GU^@1,1L;0J>(4/hS_-/1`>'0fD-[7SHZ[
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
145.458 207.535 mo
144.758 207.535 li
144.758 174.744 li
144.758 174.735 li
145.458 174.735 li
145.458 207.535 li
level3{
gsave
clp
[0 32.8 32.8 0 145.108 174.735 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 32.8 32.8 0 145.108 174.735 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
144.758 207.537 mo
144.408 207.111 li
144.573 203.627 144.585 178.661 144.408 175.17 cv
144.758 174.744 li
144.758 207.535 li
144.758 207.537 li
level3{
gsave
clp
[0 32.793 32.793 0 144.583 174.744 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 32.793 32.793 0 144.583 174.744 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
146.208 207.545 mo
146.208 207.545 li
145.458 207.545 li
145.458 174.744 li
146.208 174.744 li
146.208 207.545 li
level3{
gsave
clp
[2.00851e-15 -32.8016 32.8016 2.00851e-15 145.833 207.545 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.00851e-15 -32.8016 32.8016 2.00851e-15 145.833 207.545 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
145.458 119.314 mo
144.758 119.314 li
144.758 102.487 li
144.758 102.479 li
145.458 102.479 li
145.458 119.314 li
level3{
gsave
clp
[0 16.8355 16.8355 0 145.108 102.479 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 16.8355 16.8355 0 145.108 102.479 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
144.758 119.316 mo
144.408 118.913 li
144.573 115.618 144.585 106.192 144.408 102.889 cv
144.758 102.487 li
144.758 119.314 li
144.758 119.316 li
level3{
gsave
clp
[0 16.8289 16.8289 0 144.583 102.487 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0 16.8289 16.8289 0 144.583 102.487 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
146.208 119.324 mo
146.208 119.324 li
145.458 119.324 li
145.458 102.487 li
146.208 102.487 li
146.208 119.324 li
level3{
gsave
clp
[1.03096e-15 -16.8369 16.8369 1.03096e-15 145.833 119.324 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.03096e-15 -16.8369 16.8369 1.03096e-15 145.833 119.324 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
266.725 64.6582 mo
233.275 64.6582 li
229.511 64.6582 226.46 61.6071 226.46 57.8432 cv
226.46 54.0793 229.511 51.0282 233.275 51.0282 cv
266.725 51.0282 li
270.489 51.0282 273.54 54.0793 273.54 57.8432 cv
273.54 61.6071 270.489 64.6582 266.725 64.6582 cv
264.841 54.868 mo
263.198 54.868 261.866 56.1998 261.866 57.8432 cv
261.866 59.4866 263.198 60.8184 264.841 60.8184 cv
266.484 60.8184 267.816 59.4866 267.816 57.8432 cv
267.816 56.1998 266.484 54.868 264.841 54.868 cv
.113725 .113725 .105882 rgb
f
264.841 60.8184 mo
263.198 60.8184 261.866 59.4866 261.866 57.8432 cv
261.866 56.1998 263.198 54.868 264.841 54.868 cv
266.484 54.868 267.816 56.1998 267.816 57.8432 cv
267.816 59.4866 266.484 60.8184 264.841 60.8184 cv
264.83 55.0656 mo
264.553 55.0656 264.275 55.1067 264.006 55.1914 cv
263.573 55.3277 263.187 55.5664 262.875 55.8789 cv
262.694 56.0595 262.539 56.2652 262.413 56.4902 cv
262.035 57.1675 261.973 57.9667 262.197 58.6826 cv
262.328 59.1002 262.557 59.4888 262.876 59.8086 cv
263.188 60.1205 263.574 60.3589 264.007 60.4952 cv
264.276 60.5797 264.554 60.6207 264.831 60.6207 cv
265.155 60.6207 265.477 60.5644 265.781 60.4556 cv
266.162 60.3193 266.515 60.101 266.807 59.8086 cv
267.127 59.4888 267.354 59.1002 267.485 58.6826 cv
267.71 57.9667 267.648 57.1675 267.27 56.4902 cv
267.145 56.2652 266.989 56.0595 266.808 55.8789 cv
266.516 55.5864 266.163 55.3677 265.782 55.2314 cv
265.477 55.1223 265.154 55.0656 264.83 55.0656 cv
level3{
gsave
clp
[3.589e-16 -5.86129 5.86129 3.589e-16 264.841 60.6347 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~AnGXcA7T1[@preS?smAK?=$lA?!CN;=]np1=BJU)<`E$u;c?Ul;,U4e:ejb]9MA/R92%oK8k;KD7Rfm9
6q'I16pX+*5X7V!5!M.l5!(hg3B9,[3&rlT2`*?L1G^jB0f(I90eP(4/1`D(.kE+u.jl\n-71,d,UO`\
,p=EV+!2[J*ZuFB*ZH%=)&XA0(E+&)(_dZ#',))m&JP`d&e5B_$k*XS$OmCK$jR"E"pPA:":##2"p"`-
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.589e-16 -5.86129 5.86129 3.589e-16 264.841 60.6347 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~AS#F`A7K+Z@q&nU@:3JN?sd8I?<piA>[(E:>?Y35=]ed.=BAR)<`N.!<)Z^o;c6Lj;,C(c:esk^:/+GV
9MA)P91qlL8P)HD84Z6@7Rfg86psC06UO1,5s[b$5X7Ou5!D+m4?P\e4$,Ja3B9&Y3&iiU2E!EM1c.!E
1G^gB1,1L;0J>(3/hSb./M&G'.k<,".Ocep-mpAh-71&c,pX`\,9nEW+sA*P+<M[H*Zc@C*?6%<)]K_7
)B'J2(`4&*()@Z$'bqDs',)#m&eYcg&.f?_%LrsY%1N^S$O[=M$47(G#RCY?"pP89"U,#3!s8W-!WiB'
~>
<~AS#F`A7K+Z@q&nU@:3JN?sd8I?<piA>[(E:>?Y35=]ed.=BAR)<`N.!<)Z^o;c6Lj;,C(c:esk^:/+GV
9MA)P91qlL8P)HD84Z6@7Rfg86psC06UO1,5s[b$5X7Ou5!D+m4?P\e4$,Ja3B9&Y3&iiU2E!EM1c.!E
1G^gB1,1L;0J>(3/hSb./M&G'.k<,".Ocep-mpAh-71&c,pX`\,9nEW+sA*P+<M[H*Zc@C*?6%<)]K_7
)B'J2(`4&*()@Z$'bqDs',)#m&eYcg&.f?_%LrsY%1N^S$O[=M$47(G#RCY?"pP89"U,#3!s8W-!WiB'
~>
<~AS#F`A7K+Z@q&nU@:3JN?sd8I?<piB?!LW=>?Y36>$5!1=BAR)<`N."<E)pr;c6Lk;Gg:f:esk_:JOYZ
9he;T9MA)P8kMZH84Z6@7n6$<77BU46psC06:*t(5s[b$5<h=q5!D+m4?P\e3]]8]3B9&Y2`EWQ2E!EM
1c.$F1G^gB1,1L;0JG160.nk//M&G'.k<,".Ocep-n$Jk-RL/d,pai_,U4NX+sJ3S+WqmL+!)ID*??.?
*#on:)B'M4)&X8.(Ddl(()@W"'GM5q',(uk&J5Qc%hB0]%LrpW$k*OQ$O[:K#mgnE#RCY?"pP89"U,#3
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
264.831 60.6207 mo
264.554 60.6207 264.276 60.5797 264.007 60.4952 cv
263.574 60.3589 263.188 60.1205 262.876 59.8086 cv
262.557 59.4888 262.328 59.1002 262.197 58.6826 cv
261.973 57.9667 262.035 57.1675 262.413 56.4902 cv
262.539 56.2652 262.694 56.0595 262.875 55.8789 cv
263.187 55.5664 263.573 55.3277 264.006 55.1914 cv
264.275 55.1067 264.553 55.0656 264.83 55.0656 cv
265.154 55.0656 265.477 55.1223 265.782 55.2314 cv
266.163 55.3677 266.516 55.5864 266.808 55.8789 cv
266.989 56.0595 267.145 56.2652 267.27 56.4902 cv
267.648 57.1675 267.71 57.9667 267.485 58.6826 cv
267.354 59.1002 267.127 59.4888 266.807 59.8086 cv
266.515 60.101 266.162 60.3193 265.781 60.4556 cv
265.477 60.5644 265.155 60.6207 264.831 60.6207 cv
264.841 56.1433 mo
263.903 56.1433 263.142 56.9043 263.142 57.8432 cv
263.142 58.7821 263.903 59.5433 264.841 59.5433 cv
265.78 59.5433 266.542 58.7821 266.542 57.8432 cv
266.542 56.9043 265.78 56.1433 264.841 56.1433 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[7.2 0 0 7.2 261.12 438.56 ]ct
snap_to_device
<<
/T 1
/W 15 
/H 15 
/M[15 0 0 -15 0 15 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~(Ddl((Ddl.+snW`-8>K:(Ddl((De)9-71&d0f0[_(Ddl()''qM/MSt71`$rE(Ddl**?lma1c.$G(Ddl(
(De&8,:P)q1c.$.)]K\6)&j_F.5!A41c-3n*?6%?+tG?)4#SuS2'*e[,9A-\/29CY4ZYDV-n$Jg-RU?#
4@2S-4>\lD.4H\p.5*eK8kql?1c-d9/M&D(00;Kk7m8ad1c.$G1c$d@4$c5(5rLVX1c.$G1bggH2`*?L
2E!BK1c.$G1c.$G1c.$G2?3_61c.$G1c.$G1c.#h!!~>
<~(`4),(`4)3,:Frg-o(c>(`4),(`4>>-n$Jl1,]sd(`4),)]p=T/i#1;2Ad8J(`4)/+!`<i2E!HO(`4),
(`48<,Ut?"2E!H5*#oq<)BC%M.PN\:2DuX!+!)IF,:tW.4?#2W2BX+b,p4Nb/i#^^5!(Y\.Olno-n-Z*
4[Ve14Z52K.k<,#.ks1Q928#B2E!0?/hJV,0Khcp83]!j2E!HO2Dd*E4@2J-68ph]2E!HO2DR-M3&WZR
2`EWQ2E!HO2E!HO2E!HO2ZNh92E!HO2E!HO2E!Gn!!~>
<~(`4),(`4)3,Ub&h-o1i?(`4),(`4>?-n$Jl1H--f(`4),)]p@U0/GC?2]*AK(`4)/+!`<i2`EZS(`4),
(`4;>,qCN$2`EZ9*??+>)]^.N.kih=2`Dg#+!)IG,V:c14ZPJ\2]s4c,p4Qd0/Gsd5<Lk`.Olno.4Hc,
5"&%74uYDN.k<,#.ks4S9i+GI2`EBC0.nh00g7uu8jPBp2`EZS2`3<I5!qe36T@%a2`EZS2`!?Q3B&lV
3&iiU2`EZS2`EZS2`EZS2uiq;2`EZS2`EZS2`EYq!!~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
264.841 59.5433 mo
263.903 59.5433 263.142 58.7821 263.142 57.8432 cv
263.142 56.9043 263.903 56.1433 264.841 56.1433 cv
265.78 56.1433 266.542 56.9043 266.542 57.8432 cv
266.542 58.7821 265.78 59.5433 264.841 59.5433 cv
263.353 57.8448 mo
263.353 57.8448 li
263.353 58.6666 264.015 59.3316 264.84 59.3316 cv
265.103 59.3316 265.351 59.2633 265.566 59.1434 cv
265.596 59.1486 265.626 59.1514 265.658 59.1514 cv
265.951 59.1514 266.189 58.9134 266.189 58.62 cv
266.189 58.5793 266.184 58.5396 266.176 58.5015 cv
266.273 58.3035 266.328 58.0806 266.328 57.8448 cv
266.328 57.8448 li
266.328 57.8448 li
266.328 57.0202 265.662 56.3564 264.84 56.3564 cv
264.015 56.3564 263.353 57.0202 263.353 57.8448 cv
263.353 57.8448 li
level3{
gsave
clp
[-2.05073e-16 3.34908 -3.34908 -2.05073e-16 264.841 56.2482 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$POKg'H@Mq*=W`(%Mg)q(EO)'*tT82&/cT&)'BP1+VG_;'-&21*$Q(;+r).D(*4\9+!_XF,T%[N(a11C
+sn3Q-5n*V)^HdN,q'`[-ljW_*[`BX-n-5d.Ng/i+=\lb.k;eo/0ZVr,:tJm/M/5#/L<&&-87&!0J=e.
0.8S0-o*J*1GL@90e,%9.lB(52DZmC1G(OA/iY[?3A`BM2)%'K0KV0I4>nrW2_mNT1HmcT5<(Ja3Aj&^
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.05073e-16 3.34908 -3.34908 -2.05073e-16 264.841 56.2482 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$4@4L$O[=M$OdFP$k3XT%1NaU%1WjX%M''\%hB0]%hK9`&.oKd&J5Te&J>]h&ebol',)#m',2,p'GV>t
'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X>2)B'P6)]K_8)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH
+!2RI+<VdM+X&!P+X&!Q+sJ3U,9nEX,9nEY,U=W],pai`,paia-71&e-RU8h-RU8i-n$Jm.4H\p.4H\q
.Olnt.k<,#.k<,#/1`>'/M/P+/M/P+/hSb/0/"t30/"t30JG170ekC;0ekC;1,:U?1G^gC1G^gC1c.$G
~>
<~&ebol',)#m',2,p'GV>t'c%Q#()@Z$()Ic'(Dmu+(`4),(`=2/)&aD3)B0V7)]K_8)]Th;*$$%?*??.@
*??1B*ZcCF+!2UJ+<VdL+<VgN+X&$R+sJ3T+sJ6V,9nHZ,U=Z^,pai`,palb-71)f-RU8h-RU;j-n$Mn
.4H\q.Olnt.Olnu.k<,$/1`>'/1`>(/M/P,/hSb00/"t30/"t40JG180ekC;0ekC<1,:U@1G^gD1c.$G
1c.$G2)R6K2E!HO2E!HO2`EZS3&ilW3B9)[3B9)[3]];_4$,Mc4$,Mc4?P_g4Ztqk5!D.o5!D.o5<h@s
~>
<~)]K_8)]Th;*#oq<*$$%?*??.@*?H7C*Zc@D*ZlIG+!2RH+!;[K+<VdL+<_mO+X&!P+X&!P+X/*S+sJ3T
+sJ6V,9nEX,9nHZ,U=W\,U=Z^,pai`,palb-71&d-71)f-RU8h-RU8h-RU;j-n$Jl-n$Mn.4H\p.4H_r
.Olnt.Olnu.k<,#.k<,$/1`>'/1`>'/1`>(/M/P+/M/P,/hSb//hSb00/"t30/"t40JG170JG180ekC;
0ekC;1,:U?1,:U?1,:U?1G^gC1G^gC1c.$G1c.$G2)R6K2)R6K2E!HO2E!HO2`EZS2`EZS3&ilW3&ilW
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
264.84 59.3316 mo
264.015 59.3316 263.353 58.6666 263.353 57.8448 cv
263.353 57.0202 264.015 56.3564 264.84 56.3564 cv
265.662 56.3564 266.328 57.0202 266.328 57.8448 cv
266.328 58.0806 266.273 58.3035 266.176 58.5015 cv
266.122 58.2651 265.91 58.0888 265.658 58.0888 cv
265.364 58.0888 265.127 58.3266 265.127 58.62 cv
265.127 58.882 265.316 59.0997 265.566 59.1434 cv
265.351 59.2633 265.103 59.3316 264.84 59.3316 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[4.32 0 0 4.32 262.56 440 ]ct
snap_to_device
<<
/T 1
/W 9 
/H 9 
/M[9 0 0 -9 0 9 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~"U,&5"U+u.!<iW1"U+u.!<NE."U+o,!<N?,"U+l+!!!$&"U+o,!<N9%"9el-!!*-%!!NH)!<<-$!!3<(
!<N?(!<WK/!<N?+"9er4"T~>
<~"9\i1"9]&D%Kln;"9]&D%L`IC"9g2M.gu^e"9^V^5s6@r"9]cJ0,u;c"U#/i8L>2n*<Z]]%R;Qe)\3&`
%L`de)%?]O%L`XK"U"r2"9~>
<~"9\i1"9]5T(BajD"9]5T(D6iR"9q]*=:u)H"9`SMMLIbs"9^d#?oL_L#6YQURS,(f1'J1.(PGgM0,=[1
(D7H@.M;je(D72b#6b55"9~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
265.658 59.1514 mo
265.626 59.1514 265.596 59.1486 265.566 59.1434 cv
265.829 58.9965 266.042 58.7723 266.176 58.5015 cv
266.184 58.5396 266.189 58.5793 266.189 58.62 cv
266.189 58.9134 265.951 59.1514 265.658 59.1514 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[1.92 0 0 2.4 264.96 440 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 5 
/M[4 0 0 -5 0 5 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~*#oq<+sJ3T-u`QB/i,161c.$G~>
<~,pai`/1`>'13R:c3BfMb5<h@s~>
<~-n$Jl/1`>'0Qgt]1c[HN3&ilW~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
265.566 59.1434 mo
265.316 59.0997 265.127 58.882 265.127 58.62 cv
265.127 58.3266 265.364 58.0888 265.658 58.0888 cv
265.91 58.0888 266.122 58.2651 266.176 58.5015 cv
266.042 58.7723 265.829 58.9965 265.566 59.1434 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[2.4 0 0 2.4 264.48 440 ]ct
snap_to_device
<<
/T 1
/W 5 
/H 5 
/M[5 0 0 -5 0 5 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~!<N9%"9AQ)!!NB(<C6oj!=9#8"9er4"T~>
<~0,u;c"XY!**<[o8B2&LL)&!5X"U"r2"9~>
<~?oL_L#>6L(1'L]>FA`6".MrBn#6b55"9~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 26.0.2
%%For: (Tom) ()
%%Title: (Phone 14_01.eps)
%%CreationDate: 9/8/2022 2:15 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]T:p\=dYrI"$[!3K:;`U&M+9*/4"\#S!H(*P.BJ[4q)h?UgIr]bI9aWq"F<Eo*R;eR#bA<o#a5A0-@r)UR8X#JB&f"\7G
%-+@\?8rgQK^]0alHWf56]-Hbm[]9;LYh@du[&RQD)mgNc:3SQ3r2__r>Eq#>VNQ9J2B&]IEdjc]]n#!b)s2.Nh?_<,c=Ni=ZO.%?
%lGr\[[pAbD1dJ4KhEKf+KW>!Tf7Qg`g\BR;F^KSCknkiW+8<XYHFMM*o]iR@k='El[pd[]pVV0.IK>G1k#<`:n7Aa>SlY]I*dqWQ
%\dL-;M`K5(;JrC,C:a0j$Qc*Q;-9Na<(BpWZE04=d;=M;jBBak3J0M.GIL,7U!Xf1-"iV7[DmZg%Qm!$K>pZL)*A0XgPnfY`21mU
%V-rGOl$r7/IP\&+hRICS"\Z=qgp1KA"kPZ_S4T_#%A$4-%)ZYkM3^7$;%N\0c+ON9[BRPLea)l$li4fd0b@dDHi6FdH/#Fp@/;FU
%F6S9m[;'+PL)^*(go0-D9;BIMG/lnFEu+HL-<lHn=c_+',G)3s^YGpg$jlR*lleIXY^+SV`/ZI^C;I+o(`EfVEQjqVE(rjSF/nY3
%3E=HX^4%OL[cU0ib9'%(,H^M!fOW6M!B>9aos8scFkO-0%Ln?4m<Y[:MnmopEXmN8&JZ;Mjmj5R3(u]C(H2([<:)ZtOu@hgf\.^6
%/i@E1l]S>>Q[JE+oUE'8)QbghD=dkDK-pG32AWARhJU.?l:o^rhg]Lln!rFo7N]?Ln$MrYNTOs@n%TXN>3dHX*JW*NWrjkWbO(gI
%K+EmN"l,WYK2/6MD89e(:SC[)090`X`n:Z>oNV)BIcUNAq*"(L5U'&-['nK^&N3g0WF:*[Q54[Q@G<Jhq@ESs*8VqZ+)ur*<Mi9K
%2=<;BV-4mOCrk'phR!5XV,oh;XIjSj4g.^s<]Z'BCuRE(!!:PaOW23p].@e'Pt%Nteu?%&ld_N_l$(Hp#H_#o1nX?PG`;P@IRS]G
%qOoS`kGRu"@%?#$^YT?nkHlkrKM:M$cRWj1*Sn7jAfTW5^DH=)GMfQe)/WHT!1*9^)$8`p7\-n_mF4q7ZD9QVo(]Tfi9Qeu$G_&]
%2]:f;:HVAL.d]gsj^!2TIMHKBm2>Gt`,f&R"?qN7<[2G3\tXKH0l!'AEa"g/h`ibi>)dk&1?u#AZWl\dlIAA6s0LGfa5Boh%!!:]
%`/=bLF]u>KhsIg(a^PTt1%L?ah;]T7UE"V"RW88/AK5JNXVEehB`X<A/dO</Pl%B8[#@e==n_^>0&>h`obu'0I]meFk+@euh)klc
%.MKqcjhLh9F+.%7U?e@BXU[1427N(`frSE[FZa/6^dfg";L1KHDgq*B^HVYqf9<uLElq/1<M6:n#"<_F-mfW9MX<GWq=C9SDVu;(
%Ph`RBGcIZ-d@hDKkujSe`IZdV^]3kP-ioR,=+X?D'jlZ(pa-]u[sc;@aXt6q#Cb&Rq;jjJe3JY\@ke$@YQ?oUK-2QGjhLgF.RgbD
%(%n:u1lGD^/iodQ7BbnkK4:f^/u^/1A<a/.E(8/m<42hHZn3]7mFX*(kb)i!2Z22[5q)mlVF&\'k`4Vh%c$2+NpCp"FO1=6G_f:-
%ZNL+:cAaI=L<iPD1D7rh4<lg-Z.U7@@Gi[rJ,]\Yi(C<Uo0A0i(C&0:*B7M-R]WoYR5crW2Fi^EE.j*SVZ/$`C-!+EQn:4.5&)ij
%1334t'&t@dTo'`G&Ahk/'T6;84P;\Q[.$;@'jm3@%JZkqh)%h63opEn"D5b,>H4M#5AS.,3L4=R<m`DO$BEtR@jY\;in-()ObKS"
%U!I:T/(.&uT'tY7P[S.uW]74,JQIGGd!Qj7_M6A20`P^OFe-@>"3Uk0#>dqK:+q4[JhZ?gZkWbO5t>@P*<:)o<%O<W8m*b3AV6&d
%ZCq5PV8Gi'9/4V/HP&a1Ri[O;JH`Dge-:k;1K@@.b!sK$)M-id*_`a>Mej9.@2QSL)60CoYRC)d?A._)",OM!UYEAVS%>;/\uI8a
%=Y"2T!#m#gV$dZJCR/RIL8JaT#.n1nX!P0P#-\\&=@u)k<=fsG;`.N[ePoOKPd42=!=+LcGd-*+3XTt5JO]g6;l?B_N,%F`?rZ52
%j3k+f1,1[('ojoifPjeZDXQ0G+Hd!*:9e3mJ=pO:VP+UDcVbKZ1Pt<#_Pj0GKqdc`8>,O-C;TZH@UXjR$Bd8'8Ar:'Rqg:<P.m?]
%lW?O\L&$EQEa^qX$fFA'/D/^Q7_J62E`[_SkN'a60d=#qP\);H`Xq]U,fsiT.\!Z.j\cBrK`_TJLNP0n+pj?efg+&/=Qa^$"Jk&Z
%o!&0()*e1$=P5Hk"\Kbl5ULk#a=E>\(GN8a>9&$A8-\QF)h+^E0?El'+?0E?!>6L_OIlPm<!Lk<!.lOG>R-VsoZkgs%j\r3a<)Q5
%KKR%B3]_bF+9[?3E.U>X"qB=E'*]E'0.-o]&ci4L^B]B$>T]&L&[+fE0fG$lOKScX5Xo5b8g_JQnOqpHF&7NM+O/Q[9Yg(Jh,/o)
%KJ@d,!#nG."!L_#&j.ChkIL)0P<T/H,_/Tf!c5!S-IQ9X)6g)Jho#/.?q;>T\,\En8M(%"Vo!W,@9]2)4`/iK/o4UV=P1,PfYD'h
%CipK$Zjo>SSfuh3d\8+u(:=>0_M7<!!I_ag!?rro67ESt_O_>^H@RnVX0c0d12WNS2sN,G$@ND4&q(NZ%A#kX#gXJY+LZ#'.bRat
%$KMus]5?e7iE-H<BSu38`n*o'-+aYu@qom"qRDC5..V=/c#j;0+ZtdYOqs]B=2c)FI=e4."3-37[UG>;!*-k[K;di8)S7n:1!FaX
%!qeQ2Vb;gL[^ZPNZ@\SjiEI;W4@R8t&5LnHY/LE0'-NoP,2>gj8dGkP,\A>&?JqGMGgU`)'dr+6QM;KkPsl(haP/!?)sh.q'6S]m
%6MmM:9;)N8W3F"%BE:;UN.LuU;%]>VZ%<er7r1i;_A=Yu-jCI>;pZ`$K5@4r<N.CR!)bE_#m=Q\GZZD&%h56t^rh5K$=R\#<t?9O
%CfW)<VC95>0M.$69b`j,.Kps;VklpL$IM'ir6L:dLp_D8`PuB7_N>'9"c>(WPmd%%]\DH%!AmEO9LPf`^3"a:'X],6JTna2UdWQh
%e.e&&-:g9b7.2>b#P8DFha3pi`"sR2)A!L?O<@rdb".Bq=9U+*!1?3+jD^8MU_WS)FpiSE%4)q0(6qbVTe@T+\G5XQ7:[\7!bhsP
%66\^W(Mm_lQ:b0q5r/N!+>46n(lqKWPWLF@2rU=K+W<ru$F!lKj:4heN3FqES/tKN(Z$1n'Q);e?BK2b3cL"-^OTlG1S-<$Yk*um
%,fP=K+QAoJ]VAnKJ9;/^<XB9C/8>K:a<L2;JW?HN,%qq+8Q$u--@[L2keL2a)3Uo]*p+&s5;!m"#F$nR&n)s08ZjK#0^sR4V)!Xs
%1"$,W_[]m8P7`560`mT).&#-1+R")9q>&_VB#;>M#,&8%,KKpu&N>Q%lU<'\Z=5/EEHPM>==[W.Z;M[,a]^^78n<Va3ZY_*cr7cu
%(Qjah(`uQ*LTcf"7Dfk74?\s1aSHGJoru?0ET!d8NTf)0dd!(Lg)qb0Vh=O9dCPDgV>NO?q2:]&lf&9.h[unTf0I7,-R).p#^fLG
%W56B<$Z#tq"q6d<!jhsoW%(CC^tNc""i\C=.Q/dmPCJAkUapE]n38&"2tSI74HHbV3oW0Bbh:(YWJl\/=@]:a"gJ?P*!C?a:G>8'
%iW0lP_GPj\h*uY:fY/s^N&V(`3pt`Hb&[[uCg;H!=$9s'dD`LOE<j>fU\mS_QcO)EHAftCF=lN'861f>*%o)'aJtAFo8jisR1s:+
%OrX:S645)e6EU]`F@XrEaE[3+FWn&^_q($S.9TZ^Y%2,.l>$*g73*ecZI1\h,)71nS)ce6.S<YG9.W\,.PVR^eqFoI.\9Vp=E1-G
%a,5S>#E'<Q<fC/.@jO#=2?!hjO"FHo<_A3HN0PM_Hs0>HU;]b>2c6)r@ODN"*OKM!ME+LlPbP&k>X2t")^p@.3s:kE^N*H_94_pm
%;D_#1dRBrU'uZIf7YNQHN_t@dMI[hP&[;a:JCM+t75H?F3bX%0aIe<rK@"gtd1\iL!b=G#02T[1;3:qEW!,&?1'+uf(s5-mW/KGb
%O#3qoHjB-_KF^@t6j(YF+FdiE*OLqQ]#_hjjTc22+CA&8g0)Ea,J^<&&#9RrEhl9mouN:CRHfk?[M;tV*N?Tr,blEKCQ^hPP:X)^
%0g.;@,Qft;[l2m%hDiq##L)a(2=2]_$tTXM.^MK=]fU23^tTd+kqu>mCGF!8dDaR$S)o-iI24@r(F:9X)6*fV,I@j2-o8B[.80_q
%Tb-0;BV:H[+s]u%T^,D*5!U0d`)`G3\;>!<j'$dFltK_dBSA=P[X;B@[L[-Ki+m#cl:!T2eGI-UQ`/_-fRur'5-A"Q\E-(f3qgYg
%6*24gX0=3&U8U@^OG:>jK3:NWAeF%2&7H#6`2,5iOF`Q.Z\K(q&TSO+g5#fpc%qlj7bO-^MKG*Q9P-#RP-Bk&l_E8a5Uhl;PscAl
%":F_"M@ukBXI[1<<D,m#"I(>@HDpKa-")E6W;+D@LFZ2WXA50aS!?N*Mkmek1roX+b_KJaA3st7N"uedfnqW.H:DPj&CMnj5.N60
%LdJNb#CCtE2Nn02:KgA"B)1dC9Y\B$`o``9\%uWlOK;/'GM?p;G]B+HmL%(lk7;+/I7Ynf=.p=:<ah7mI&TeHTX2&S`JPO,]3q?r
%0[aTQ/VG\lBT_U4*;47Xh8\A7eSWBEdO.q)ORs/r&#QV)A"[>+)@<Ef5huLj+E1YS-o_<2F^aGH4AEcWE4LKkBiJt+REXS3-$,1^
%V<F#`I"X`'c9[AAVJ/TMaIe<PUW$mb<Vm@28nAl0dhkLuL%*$FVO:!&@.s[3o,(3nd2%<jNDVQB-d`Nq;4;*lI?.S,3&QWXR0pG5
%W':-_UYX6_bFcc7E,#FG(bH,'nc@>s9W'RJ7cd'k8c(."4IAj]HGiSB;bBOGThK5e?3X#u(;=Ul+kfWMi#t!(Z:5.s>'pq*,%=!8
%\M/[NCbj7iK5,>!mI1.`4d94RV@au?OV630!)#n&VM`uY?>3*>@PCLae[i97<bWcoV=+Gtql$Qhg)FHd]d[8Lijf^;.WT0dF0e^*
%+GK<@*cdEpi&aTQOK$=E;@XN)<8bRulTmLDO%HVXWj'[*_:'6>AdUS7&OqE,(D*/A`>+8S9lObm68RZI"T8cR[CJ\ZF\[e@C?Gk+
%$oA;?El=FrN$`VG*)U<7RtDQ#<Wu87d:f3GN$G*d,p+_l,lt]D$T!L?!p@B*_a=/PC<*4R#MGn@i\_S'[KOpAlEPk.(Hr34VnW[I
%Y4nh,bA;dJkAgQh'Y#,K(Wqo6dRMoW(;b)i<fop:>bWi+)7q/_=./t$)1sIEY>bk)#+T_XKEDnuZ*D8e0?(O8:T,LS&tY2*KG:a*
%BN,S5RL"="i_b:n!TlWSck+bV^*NUuKe4=M,56cs&:u`l)B6)T!Q/[eP>ONH9XJj([hAL'PaF*,`@qFQP^soLpOdDdD[a:;P/mhR
%3,/&Y`OO]i-6WlAOk)c0.h4/N=5JeMJ6\7XY9,8]@RbSK,g=9t>GB&Ho#)fls+lD)QM"f@5[6Yff,e$lM<c-$oEsM&Y,RM*(p\$H
%ep54++]Lr5/Q,l2UdKtjTf`JR&%+41^;(Vu8?UsR/cF]>5u]2+&fR%dW8pD_j>sV+^s(b&W1'H>R_]V?*/Z-`#0a=<0lJ:lR@Z"[
%<L_4h5VO?r&_XnV)XER5>'%BbLXHaa?$#D@agBY<[5i3`.]UC@&tg;8YkK22d8Z<HUNB3b4On"Y\9*U.B"!I=mUrQIp/#pV:q!.K
%_\B\!e81n+L"[W+bX7*M1q@eaP3`\toiFFB-gJ-k_GRKOlF5asos7Lk5qNX/l7])b]?GY)MG1eP$12o3%>>O0*\C>A8i>DRYD%;2
%\;WMG\o!(6n5QEcj7#Cs-Gf7OM2DR"kWjr^*SDD]pW[Q23jTd*e7(scKtrBYA(JK;.VK.c+1M)D4(!hIpUEX&D0a?O#87R;OhkjV
%.]Ut?P#I+]>V[:2Bes1LacpMDi<Xd0L-a2Bi%s!jQj9"eQs0cKEYW#P_K@!Zfg.SURCu$&[[**;[c(+7$bC2B$q`O5''K`LW8uME
%%Z:\2+bd`<rg5na5TofW)W_WtdFX:-(;S*N]V8:D'/[t=Lt@[k6s+Z3$\>,fcN2eN']P7N_GEt>cr:ZaKiB2#`0J,7$Lh^jjofWj
%%8up')s.=[),s]t;rc8(d'dHJ`-]9gmZi#-3!BQL3G7X]B\SA*9Di6<X:No#ODP[G>t_bIge`p\G*XhiFCtoYLFJCW,uB^<G;2"/
%E[4PA\4ia[$RJ=m7I^Bi$4%u]@Z",*[cF%HV5g"1V$7]7B)iRo&rMXX!fF`:<J;Y3;P'\G&h5>D0iC^L!kCdMAbM.\XO)1^5I3#I
%cbKRcpV6_pIR$K;%t7R%0cQ(M's4fT"$1rRPnE\U=RTp1.00_,L`!gl>YglW9#_K3J[htP0SAFi+q,&t@.-:^#$DhT:(Fl0P'=Kp
%<0a:7(D5qh=m#`o+\V)V<LP;bCE05"gcH5B@4V.=p4Qm.5fHO)3.jXZ9:KV/U]Nk.N4Oh4"6Mk>:ouFZMN16`'#juPYQ0RDl4m[)
%=3?]25Y"+mRL3R]J^98XKYWh?OG]n9+@CJ!0L3TV%ir$*,[5qHQ'p)+MCD*K%-BpU1P:5"49o<]P"EG(5(pe&&BQ7KUBq5QUm/Rq
%];VKNKof@<`?+SfU"Y25?Q7NINd,cDGNoUs,Jj)-\Y.%#MrGcWa0:=3P5#YF]OXY>5lC/%1i=,kDj[LI@,?g\_>g4J1:3]P%nC.U
%kVd'TbeLK;\e/s_'_gnb1TA4ab4Ibp_R"^]44k4i9Fn31et%ameB=^$p)W!AZ22,)Q4e\q@/8&>#T]13#)\I0)!#-InGq\MT;6FG
%T.?h^KKVan<CO;G<OUU0kQf>FL+61<B)]&g!Q^QpI]@uL&pDuZ'bJ7^TR"mOk,Co%W'hX+0,5?U=cl>N]Yep*c^^)SO[9fWr1J>^
%QAe9cQ*jHT#]S+bJWT;G&7ebqqmnHp)T!Z<Ak"*$AoSp:>j+!&L[4`GfaoH.1`U6bj.Rn/'sB0cK!gt<Mdd*U]b;[W0tRUp]kF&g
%0u[tQ^khbR7@,c0;M%?[Y]pbs+YuRX@Z&$<XMHY(lEns=QUp(E#W7OA:>lNn:FL7?_P9d>)oMm\<>R^-/Psub8U&>7J$Ifr$ED)'
%'cGX1gMTYVYlL.1@./Zg-S@5T.7X#eO1PPh#ODoJ4k\3?U2l2HCF.*(&FBQ1Bc]N(C4h=m9VJ#F_9jt%'4i%H[YAlt8+DB4Go/s1
%+U'CT,\X,A1CsmF!J(:"WtO]X1o=%.nDH!mG&!a@`<7Y>1e)HnVUV8R%M)S7S-"p'+p))$C:?oP8RWr4g+7I?/@&/c+_$QD-fQq8
%F")(?Q;jB*P(Jo3O?<`9;Nu>le9"#/QW20=.cuI9j^O6$csh!j8oBk[DEoL<8k^h7-]0WTbRs,#VPI_ANgQhaTXZGi9.?gJK,4DR
%#uXE981>jC;"U%&o'hgF`D'D=$FAi%\b[CH-ShU'.hps>RT0,4P/:"<;O*MqEE-@>f`tJR;YCDs?^e8R7GTnqn-dT[6WX%DOl?mk
%=JY`@(gndZ&L4or7Og[=G;2$X92Ys4_V%pVYiSKn1(uL&W4E:gEfdk#;DTt+'&$#VBF/loK,N,pVDMh$b<g=gG@+s"Z@Dn.38\62
%6l5*<_p$K_Xk@7M79\ms?XUT*\]7g?)RhTd&V0/e,#^hV_@S7SNI+>N8QCtefV60'6]78k*mKTdPrR:4rs%Fh5rYMpYI5$i:K!2g
%;%iS!!k+NWJPJQY:nB85W\[Oo>,^H1WHo5CRoHZWM#[^K7@EC<S=,0fj7-\IQ&1AlPQj`O2("H[R+%<QPaLQ3-)MuQQs.^BI*c.=
%=qlif<+RgbHVl1I4f6H1`K&u]i`r<_iqn]&0kQ<.pQq[VQhFFdVd-KrU7J(fKdYe?iA_nG+()Mka-GtffItWiO`q0#&rcGQRBkXA
%m#Gal7(YeB&IMIPQfWVqE0n!<im9>EIKJY1i#Pu@"7(SN^`=o-gPG/ZABbBW!@\lF'R+QV!B!j>i\AJo#C]"H18ph-1c@2+LMCqP
%hJblVV?%dH6,'Fk,AoW+D@VOQZq@37-&QL!*8I)i;ru%>`/:LQ.l'8SUj]$70WomM$k%KEl-?f!9p9^>AX-ui"uU=^%StN^d8FHB
%Z3F-m?*KAYiR/M+hmb+)f"oH4)?,L%1UI.h8E!j[OX:G#MLrC5:bF\=Y_b]U?j0tM\EQIU$.ULsiE8>Pb)/NjGSjHqJ-@V1cpLn_
%71,'<$e8a+n<C=$goSU^F7,Xb;cl2'pki%sC9`d!$.7E[*=TJfRMl#K5&4D,TQ1.Ca>H9]c887Yci1s48t)XjqhFf0+Z^M7?$&Td
%!Ze$`hL5)mZsqfRa^OWrItnd[VHpNq@hWtq-1;a.mHVo<<(2e;_DHK`Y0@XJ;oIW/0Xrh,&oF:q@:b`YNZ%&ZWhOR#,!sGpkRp7i
%"pEJd,+QlC$tcB\lOikne6d/9cUCEfdMh,@6[:b]X"1Ie1>`F8S'&Xi>X<4?&/im8:gIn-P:JB$/Is+JR=WU+mRCIA.tq?P-*F@(
%&r"j"_?iaCf@%3q"C9`[^4^RKAP'3@V$!D0(u[t:l"RZiL)*Cn'=5j<C"O6bUFAA#`@Q(iP0IUnAsD+^l!.]qZkU6pBAXC#1oKuS
%T_2KYf#+T/H"]85%\%`"Ajf_"GnXn?O\pE820LV4N%t&JU[f6a_ubaPP-L4+mTG^p;\L=$Pe;8YT#UoKOOC.\8)us(2@C]Q/-Pd[
%XK&5&+jNe7#(#eN%)NYT\m?i7+)b!`n<-FLmiZBl\@*U0?c^'eAZ"phfa`BFoC"Hj#^%,">&UPY`s:$W#K'UlehLjRWc/pa0IMC3
%=V)Qe#AFlj#ajcd:;]d4r"='s$1U?EqQ"Ro!74;ZUmdD7I,(/Ydn6Gr$lrpV4:m(<jGsJ#U<Y]*+ed6s_@d'+1*2QkO99T>,TIt]
%+:V^L'nL$^64\:J&4(tK08It>%j?$l)o70RBK-WIf2P1H;,IH*Obr,75B:_(JJuLP(shDbS]n<[HdI$a9gXS!M&.51q&$p_Vb)Fb
%<,$%@g<`YS;,T5;\FN5I;)63E4kM>(nAZ%7J9G^)".%H!-$<l-/R-(H/f=kk-3.aZ(`[#jKpFDM#VIt7DKtALgqdr3W8$h2[NYMl
%$([LWDkj^UZD=?j&mQ^4=e\;f%k\61c%m_N'(G62!D8P\]>F4mAJQnrYcK#u$[L<jCUVOL<KdU676q0emXW7A85@n\$`ilelS]9V
%/"rJ<As9:$0Y>DoS(\6D7YeNSc&jPm4SUOj!q;q'"dOdKBe1[fO@/Pg=0Q08Gr-db0T8:0<X<Ge9*XS4N("r%#WH@F'-V\$6$dR=
%?9CbSK]rLHOok<2#3cSOkXbf$Yp=kT*bJ#QE5Q*<%K;NP(Pb"Qq&%&lckZm8'+cKV<s2ZGW.K0Oq.gfu`?C((OT[s*lrXnM\/\fT
%Q3%hra'g9GP6aW%kjV]qSd<nX&0YkpkgCo8C/QGcGQ8hg^FDSFdSh"2^]:ss`3pS\p#E)(#P/[!.%_tUq4\"H;.<$:<iLt<'Jh%p
%+\uPa"nB\`*W:PRNYo82Hm):ekH^14i`T8VUikaT*GIK8&JI5UW.1N*p+4_#&8rp<I@H,4J*9?B!cQoN%=Vd';A$B$OrM7nKfbnu
%]_MuhSPRiFY%9RQgF3udVUV;HD;ka>!\L1?)4#>b/sB.bf6%>Joi,ipW5_g2OY`YLb"+q_U;>NHj)Wh=QXbR0<f]]3P'eL2N?2qW
%=5)^t6<?b7i"BKh?h0r(bsfQ'cefUaYB$%-*[12c4R*j3\J06.bMO3!16#bGLIGH@dFM"UD_M>*O0FY=X/!c$,'/4-W.Pmd+;#M"
%%*4QBLp]WMYS2qUojdO.]^W#%Oc(Sg'H?8DD8mPYj70>&iKO8+=N4,Xh5X&OXhr'Kn%XMWRHsfrj=9o-jLhGLO<fOYSLC^5JBB-k
%WZ\cbl.VjKF'F_d:>e_g$\=asBll$1/Eoa1*@GQi7+/.>ZbmY$!UZDU@D&K(A2KC!5VP/1HR$M.CLRgY>l[\COZHPt3,s]tKukL,
%+FBXJE<\qUB8]og\D'i-7jKl3)_@/9kHdnF+n0a%=rt7KGD3C[U5[1)6pB]P"?[1qh]k=EiJd5eJNZ>DM8@[_I"03A'KLabra6iD
%nVD0.!@?Pk$rJ5!N1D@L`nJ%%&MP,7b)#V!La7S/$lS.DlQ4B6_,r<*IlRe,C4\2?'c>J2GWBetM\pH+0jug^Xs=m)JC,e>1=*]$
%%(O/C0['#@$b20=Qa,^?>q.qZ7VmB50/I7m)'net6+"dT<GOqg)cmVU!p@`\*rU@^&]bblo\CXd'S!O/p<ej6bX!V)@Lc+pgJ[+2
%'L`MSN_$J9&Wcf>0de013sU>(cJ=#FPbB^Ne):crEg15mDb-*QK^BhH5h+_$N3mfiIA7097HRMC*mp?Z*+mSf2\>6[c?!^kCt_"D
%[P+/`GmlH^Arl-*Asp&@6n'jT:l+`U!mAf@&@oW&/@q'd$7]LM;dd>\orZ.fDejluFGr:=RBrC/E#*Y9j">2WT[LQq:f.k9\Q(qd
%D9UBJAX/'"1?N-ZL>42Y_Nmm);(.,49ECC2NsABIIV#VEX;I\!U=b;()ti[7jD?E3k/&u#eL`$1PS&g+9=SN*6O$@$1Z=E-\RW-I
%9NbOe)0^pHNYp7\$AD0=`KR,gPjt-Ha8r'')HFfJCo9[e"d7=<GI^83?s&@*O#$<;-OZV)O2ir?;I^PT6O\18OI[dlP4O>Halj"#
%$18kNZh::aOW,`_H!W5.>'3p_DltpV<23;;0VRp!Paes.;c[0*ecH9Cb%aO?6((\GVC<chPk;7"50AI6L!_?.:185OUJi#C#)pP9
%PqZMJO!u4;X:b+CN(HGaRA)[PU;kLDdrN#+G?S`ToChKeYk700bb0jV2um?#R#0WVF`QHpL-[SdZdTs#O+=b*:TphU90[CscW`*b
%8Dg4%X3Zr=8"8@sI9Q/j)$*,RJ0P(9UsIBf7lM7k>*=sW7m.LE@=8Ga'M$Xhh@g4kTFY(cq35:u`3DOh`i(;5Aj#%#mKt\uAfe4>
%pUTWD;s#,.(`*iY3[&n.#*\NlM=22U>3VE)[tMIp/j.F4h-\1Y\Ep154s`h7CJseXW$stB)f\,AL?+22"YEegV56q_#rE<p'89^L
%H1&PZ1lc)BJgl:]]oeP&<u]]2&X`k"I`7I9-9Z(>7$k2o.<,?S:arA;jGGHj,P<N\2.%!\(C:5&`8;ttnQ-i>7I_j!="JA5YUt99
%0D*kl09*qN;]Cfb]lcc.1Uj&H(:6V`,Gi+bU25sk(o`+L7P437Vl6VH4iA"LGs&>IIhnnfU2aaTVL<\A9t<XpAk]^fC*3U^E`du>
%;<hg3`COIVW'IGjoP[-#;Sj8)K;EP)=C*ngWudUl9V@M=T(2P^KBY2eZXR8%p..NpP?AD/l%h`+Ifep$,"T'Xf@:C^)DN^^P0.01
%O<j0kkS2[@T+9mQpmrRT@'\6jeB#6;G=LZ2$htK\PJI#W&Wr%<&QUanZ)Y<3BT*+E&_0;9^^.M!9%#m0csrX8+L.tVfY5F)ilC(!
%$jP=:n);oh6bf-,hi:UE6qLXZK<9_B^8K"7)"_3k"L]tX*ush4e3jFo%m;,hShM0!fA#NFWhNiH8[D1jgN5RQT_Q\IIjAnW*jGg(
%E_A15:F(@KE50Bi>m:s,8&c<%k$u2&a0B4EJmZOo@q_9$"eDH#''r8*s,'SLOM9fGNUjoF,lLqh3$Gcs"-l,B-o2d8`=?W.ZpE%@
%E>he!Sf9mPdLlk<fe]Hl&ZIN>O?<fIrr>.brB0n<O<o(K9lq?s3s[U9%l"fIgg<O;%'-gm=-&U<KDmYj9A[Y<p/,6*r.tB9n/Xc`
%nFeSu._-a]7S+S#BX*5dR",lNWmQBO*^-`h*Ef=tq.%QH1b.`@7g2Q:-cRecBtEk4I+L?^:5o4>%f;G"<(OA,cd-\YSp5]@g>mLB
%rCQ]2,q5*cA<Brb/giUl@in$i:lM`RX#`:+Qo9&MS2-ul[R&ssGQq-1$PJS^LKV0FlB7WZMk"^N-<K"sHed5+pgF`e:UPa_OLACZ
%4JZu44Ka]r,N'_-`sT#SL3[Ar;m'+SilS-:W(#E)=:,e`C-.GN7qS_C_3,00GW6["OY4aWA0l%T)EfukWWbo%CjH"tXN_]Q6PH&,
%WS1'A,&`VbTEp(*#9TB=liM42T`^r)3%Wh'L(/U%RVoVB:4^o"lo;uM2g/Im5Q(^AP6h#N,j:.O+=@d#U1:Dd#(-e:LBt8A&821@
%PsN`f6<AZrjt?eVA+jA!L`G3>#6bV]3`+i'0tT<PaH]0i(<$u95b4Gpgd1$dRhsIiK%4;-isI]"Lde%D\Za#g1ST&(p*%[0Pktpo
%e@s/T1.D0S-;2F5(1Y1^&i*)'BI_1iCPoHC!u-]-VJM_V"Z/daAI7R7]WQq9b@nN.d0Y##Kq3T&:].4Jd`W#icQr^d!6GZ@42<u@
%Wd*dPnWUS7RZ,XQV;`)^9@)Q7&*Xl2rIYtM/KmA)Z7Ml8mkMaboLVe6OR/#Jp?W=`L*dXk5m'-#d4n0IA(]GBX-n4/gPSY"AqD4$
%NMQ@qh^Tc;iY=J2dD.78Yo%9`c+"GAP;L'EA`73O#l@@g^*)fH7i^]kZEQTd+6X$5.dZY&+5<GlFrJ:hQo3dpUcki;1^Z@5JiWm-
%$)id?d4@pPhNbslaNKYJ>5fSZRmLPFl-;$)>Mt.T/R7u^9L#dN:\Y=O[PIth`5SIeZU;8!KXi*r\AX2KambljNp>m-&e=1u9Ht%+
%<F%cHM;g5e/MI/1R?T95=I+AfSZg>bn$XHW_0-FJ8[a0;kTi-=%qq?EY^;ThfSX0TRWL'3'S2/IYdD4'inctuHg%V,[)q&Xj?=)0
%Q\Zai0a>JA2N\e4//unn<f+BpM(q(t=m%=<X%D8%DkoD5\g],XqHKD^?kX%G$"Z^D("i\UE2CX#!TLmaiBQ./S=iJj#c>hWh,p/*
%0g`gEj*3/rd9;Q?[2_\O3KDR/*2V'V*9[e&5b>h3C\+G"W&eJKZlABWDtBjW)OPsW"M#IWCYgD-a6S?NNUE"r1Vn5a'5S=/=B-V!
%=I]en$P1*&D-=Z,HNa?0LND5:88e6NXV*e=2)9-E\l@c`;`'f6WJVRp8g:6G#u(k[3)A*=kq]4]NS;j<Ji09*4RbrZSt5eL(n2*C
%VR>Nb%?Vtn:(M',I-MS@@iG0>3iG=5\PeIl%2!SD8ioQ=__O=0`klh=KXT@YC^C&9I82@n1^_Mjb-%;VXW>`hX_-McOE(n4P+Y`9
%bm[D$,bIr6M.fLm+F-mWKVe8S1d7aM&gtluf45*^,kpRplJj9aNiYLc^j0C`8MN[Do9H!EpaJGK;fS(i.?P<7nrplbQ&JIunE2Jo
%%X&;p";M=ZkD%hYS:^+#l;BP6&nPS.\.f5DnlYC2FG@!:i%S=DSPf&n/_DOD7O4V*eu4I_a;4]D=IKHD6ccT23Gbp`@28$+=CHH:
%N(%5:2l:8IcB!h-HBV-N'0NZ:02NE6l*sXFQ9sN>0=DiL+O2F#PbGs!-_4!LpUH6=]*WOa1>H_]jI$p3VFDUM8^#,CZ8cQ\a-Uc6
%C,nD_(^na@7GN^\gR*493bP]WB\!d_bH4F2T/7Dt1Y\;@5SO_/APjg3r"F7(Nj0mNk\&\4'?:M9.5M`n+WG[#a9t!70cG/$+X]gJ
%E+IE,5@M[MjKVZFk5Ol\RW+/J7%c8u^C,[XNAc@+;#r>(lf8F&eP%^K>g5AUcCu@lqT#9)dH6k``gEGh&",$Nr/WSRr5&_03]CG#
%GA;U3G"ECs@^1.nIL_I8><mL#-j=Vg;NPB7]W"IWU;VW9/@BXD%"&tk]n1uBN/&shFN*k\Y9JtE&/[T[Z:]]NPk7OEC4]n=ngW#W
%b.aK7O2hnP%AfI)`H3D@8a.MnIAK@GW?$7fZREM^/P`=n`Hb.WFB2+mS\aC-c<eAp>Y2LF]q_W)=\q__3RRXRcGN"ci?6^U=[\^8
%<s4kW/?2W=,I,6t50:E/\3f6jW7)dM$[oreh>ls)eCP9R\FF[(.d*%Mo:123P?8E!+0O"b\gLKM.`mlJq8-6*_nE.-InHE\,s4>R
%,UbupL2a[J*&95lX-e^aj"qYtc,ZVI-Lq3fHa_6q]8&PjoNjAn&Cjj^Jie+S1XRl(n3K)oQA0&2C^91:)N1TkjV,:8#P6SN.6]I%
%4"Eg*%9Ne:mP6b4Q5DQ21eAd`]8^E;@'6BPJ5^*rWA@q;>O#I:#Xok-^/8@(-r5FJ;PMMDE&mLD@I?'2ig'&i/4Cjf6UB1SF]31/
%ldWH1PKZab*?"Co.RnMYc5HFi4;*J<1R9kOo#tQ<<LcENd[(gq"V"+(,dL?./<QXD1hfq,_;h>>.N@rZGS)p\`Kg0c3Z`;/0#@q6
%HCQm\m*HCb:Q_LkOBT9[ah*'*d:o&lHObsA%Hs4lCd).H"utrP]==Gla2n`Za\[Cn>iWhKE63Y^K6AjJaWo`27El7VYo$i4_E&Ni
%qQXM<gpeXhP4rIK5Klo3+S$o!;)#;Yo&TMU8BiU3EXnnt(-Rm)hIkEjoQPbc;i,4ZM_#Ku^)*>*Rep!AMkXIY_0IEJ2,ShE2,g$W
%@[P/DCI;."KR,U-5EXJmE#j2W6k^(Q;,QX[V!0c`LUs9f9oWl<L?R/)D?7s*\]0V'"!rug8Qo5YE^_#]UNrYd4q;9+mZtJRW;n`0
%D7T./ZiI'4NFmcdifZ`(1<^h4k8As^@N/cn\IL_HAdZ/L-?%%8D8;q7`gXOhQTr/KI!0DWkDqJLXGI-Q=p:R/]BE?$]2YP5U$:cS
%jq(H0Xqb*%aN-hTK-*'r_JX`G/M\^WI"J&62U"D>r.#Yaa_s!QSV#*R@lP&%TFI/;#RBRFW@RNJhH5t#[)N*oMJ:qG9-S<FVY5iV
%4`OoJhW./bD:1TdJ?N55s"H^lN9UBq5h&%947\ZP#eW<aX:Bk%[GZT1-MR&mg:X&\SPH1bgR26QVcN2a<I8K2rnjtqC\5[[8P:/e
%Vb":5)\L@6Ztoi/EfGLYAXdGj,qZdV[O!N[7:G")%_$=KQL.Z;[Rc]+C"`;*BsK+/I)hP.>I^)fqbRYZfaB64oH;,qD$__:H+9-/
%C!_W>\^SF8Y@6Z:$sl_3\r6KZ5+r/3=GgZm%j#:!)e88)9qaG]g799%5AGkh/-._&VSB^6`I!ioHaq&LQ>GE7jM[IfhT;S6;9Ior
%<pqI4EFeqnHO'7H(<^oZeXPaD*+er+#;)8'*;5f%h_*/Ob7=P0;9+Y$UlMg2o3b!=DZ(pUKkji,8*IR?>JLQaa^bPsWGrto"WnYM
%W!_>L9-^in`=brC1pr(!Z%b&<96NInZk5gIPJW]GULNq9+U`7I\//;d!FOJM@uY8+`#1`#PSW+i?Gcc(Yi?L=Q_g#<;Cpi"pcE(&
%a!6*0Z"Caa'c/^=`&q]qFtaRmP)1:$A4GEiZ,AEgEJq=f9EWV9*Ic*c0'Kl"kW5X.e2iV;2diF0!f2Y!jH-@^3j(p&EK%JcFNhL3
%*WHl.T;7A_B`F>KjGZ<Zq8+#tU%M/3qrhF"l,\a!8k1=8cUpCB6X5P-^c3C'=9"hWE]'/03GBoQ,YNE>>KULej3#sD,.ElEX+\GS
%ZBisC`na.Pql1G'E^Ff'-W+h.M`F"NU*Odp=14QaL"4sNZ'ko3<ca\$p]^M/?Ia'KEtVQ_Sem+Rgl(:+A(g8qla\KV]8QU]IY.ee
%NI.$rdAL%;W>0hr7A!c2VcNHiBe-ck37Jj]U4#e72Gm[%]Fc#=DbB-bA/,<P=@5gH2q$R4IXXZXo4tHtMXgU6g7)9ks48jca4m`Y
%DPu@XeXL3$s0^\&mo5!i\UV+qXuCYMOJ!>.SQgeDn$Y-`>I>$GMtLhghJ-(P5KA/ZQ<X.YZI+=YQRfaUVgd(_L#'`'A%9qPF=PCZ
%Wos%EXV3V_NWgO`F,RSoIJ@+>/@p\NrMVRL+hd2(XIl'XL>5:(!:Vlu\$FEJ`P:d<Cst&2#J?>B[l5:Fj4J.ScR['$pd*GGf,YE:
%i>)Z^AS(kSmMPr:eKJH*YCGiFhYD:!_A`6flgaSX_t\MX6YN$<$`cG*eSj$3MgfFYpdcVj7J-5\=mpL:4186iO0];W&)bB4^N2/Z
%?92N(hmbR>jK74sRZl_&)e$&kNZSu&g@^1GY&A)@c.7?IhQ%.((t*B7Gi(g#&RHE"@nkc+OsqgApjnu8\m`,_Idb1[?5quO)S<u)
%C#__7lsK0[H^,])?ST*fN6#U5a2]FHn6k$('E(s%pNuQ)hq#s:\,)Y1#cqk>]O&ju4#O4d4#Lpsl"(aP0SmBY34)m1aO$?@L='ak
%SP$*9\aERoG&DfE"KfjjX'>&K^ioPH?6DIQbmpfh_pdDp<0Y!P;9kPdE`5hQ.`tIS\Z%!$g8P'BgXpDo]2N/+:'bnYoT48rQHMOZ
%Vm>)WQCH$;;d!ufb?^Oh2X[%ckD):=`r:7[f)"Q9)!@3mq]O@!!jas4dq)aG)j9J5<8KWLoS;D@].!,E:'T66pOJ=H^bL%[[:8p+
%?6PBB^5sSKFo,FZHDTNdegjIE3"/P?hqU7Um=r:dh7nkP-j.iHY"ba-[nEU(@C?!:s(g45:UTQ]ko+ns#IhjHguT!^m6[G3X0"jl
%Zhi#DE4I9LR"%#sX\<5ag`hPsgL56&5AXcr,6#/$HU!/(6e8EtW-!VlZeMN;YIuoJmG6q"PjAK'rS)3I_j_TQeD;be0S<;!\)03J
%<5\ZLjT\OMXKBSZ3'c\Z^[ZC:hfU=-^Y>"obtOn"E,g>0c*eJ(;$O`=O0RH>2g_#s1gIMh<Xe^?QJ#er_jt=amN5etGsi=l)I-.]
%0su&WI4N@1YUGH;P`'=0f#@#C<X-uq0l3B5a.WG%0aptpA06HoVhLNHrRtc.DflJJH>g8j+"Ds!7?VoQm/C'/nIn\4/"M"Tr%dVM
%=dUXX]Zq-`\DcAcG24`'kZ6=r$cur88T#n;G5iXhO6cLKlK'hpnjsd\[rECp=q/4[LAtg=WD($aO-sF!-<qjqWqXWQ-e!O4`bjN0
%\.,j-+]Oii?0P^C7X-Gmao($X+nNFXA7ZXrUm%c]]huo2_Jg=1b,n^BIGS_GcGh($M%i>F(E0n]O`^<uH"@;>R3Jg`o(lAUb+Rn3
%1]'=6!83%opZ:;s5l)k%lGg'Z/T:,?liha!Ke^+oRl_!O:&=;'Z6BrXcDLsUmTP3o$rD.<',5!HfUX?;p`m^iQu@enQYs`u>'Nj#
%)UcnbPURK@3&3PjrZYJFCZ;l*08$MV33P0.@:MN<K[h$'mg%UZ`UW>,0G!%0p]fKbI;2]^GMA*L27s?e]rap(:6HT[\=])B^nhs]
%*5A@qH#8Rm[rRs/,_NtlmSKf4(ieQ7dsXc!H!,]*A2%6FW-EO03%c>i^g!Q<2VIlm,_NIFGIDg`>r(qS4i<.Nr)V,V[f!%%QMc<i
%Ae(U8Z6k$J(6l)(q#9[OY8LC8[*uV![a,PoEJrkU2#aKPbci@C\pBXe9jg6?bUj;raY94uEgY@aol7@$>9(e"7Xre6HD>H^mVRqf
%*D?[5hJ6Ddl"Su=(c#K8BfMjcD=%8p7[@`S('iM!;.e',^07YqX8f^/cpTt)33$SkR:Sq>CB(S(_Qb<^TVRlkEEJ3H1TY*mSuGa/
%eZIEt(l31LMV>UXaeI4b?Y3Dq>7K;ro82/#;brY"P&6MUHf0aD"feGk.(?t%muo+k-CC7oh48+G-=1aJogH?+Sga@.gqt\rnYX#K
%It[`1i+28301tn$q4dfU&CS\p7EGU5'@.1_I8QlU-kepf`]0XH:LB@OII]hKKFoT'3_b$"ISmnMqP&oQXS_(:P%g7Vr)THdU0Mt#
%p\+BP$2(:>"J[o`d;F4]mrn979V-%KQ1te=nN4'Vgms//DD2!"&+3Hs6>tnoM"s,mJ#A$76KqPemH\'"oQ/nF8Pc\:9_$giiAGD.
%f.p%9'X(7$g(^aH$+s=(5kU@IS$HgnN7L;sUf4?Q`G/JlC/\_]b,e=Bg(^UD(T\rfKT:P[Z$o$%>D=So)??\iB]M(WVqWW;'MQ!`
%F;lO8d;Jp?Yd)r]r&jtLEHATHTZK6KkLQpR-oj)9'.N=ohY$h<V1p<5s/B.ACYXX1/NIrJ;f\lEmn+'rCN'a_YJD$cHfR1Lc0k/g
%K=UsI/tML;2)KTu?-DXk%M;IbU0N+[^EY=&]ib_=lcnD/&'*$b408(3f>m>X6ao%^H^aK$gEnpf`XhEc39/2SnGLLPK_:o+h7m<0
%'kU[?M3klPlA*L$!S,b4]@@'_]$nuEI/9DM"W;O1Ua(F@)oX-f\pW_+hf5,f_"Z6I_u^fuHl(B=Xc(qfX:1Q$MdbYi4pL\@O("D]
%/Gg9C>9-'H=;p=^Q$j);Xc>]EMYAP=iROn**?gK33W=j_Ng3AQGCCG'ZI&FsOhAsPr*`@tGG[I5D.fMUUu2-Zs5&P'OAl&FeGag8
%mD$0@_ud"hCDdq7C@`IgBMWKZ;k*7*ju^!H:2R_o;a.A.lq_K4';NpCg3b8Eg7$`C-Q<<?lDLQY/E\;6))Q;.be9D\B&ZZQAu!KI
%9k<">20GBDGQu+;n!jIRI3ZXe[rmVhqAD10Xae>$Y#.DFn%fIV<Ka]^]#.1Lp1M4(mCf1Cm.MpRCEpNDjtbA]5G974-g05^-sf"$
%KOJp2-pkEJ6=]tq[J$BPC4s:.:0:_9FXkY0L4ZDiCoTOcWm4'>oGOn5<.B)aThY2m;uKkQG+7dC-;SecSIC7^b('*-IW*l\IG"X\
%2fjmRAn;fSfRQaVTrF.m\pZG1Z&Y@K-D=Ume2O3p7=e0&549cLGM?O@:gRcQ,qsmbUFbS&nccZTq0'!UgDjT:`=)!.l/+Dg"#i0S
%W4bDY^q6OJ!h"B:e4NZYbAGE<7*S%502)b+qNn2@AZBuH)pD:O10(u_Xk?\D10(t\'e`M)bQ!1RV(k:iEL/6T;[$(-/TZo3ln_L\
%W^3(5%FUM22=ZR"q\Dsh9f=__Qlo%bK1SisOX8,c1tfh$XXBUZ158@r2USJtFt<6Z)XG"+(@U!d*n_QT-_De^P>"Y*EL^WMRM*YT
%-Dj)gGb;8qALI6d:Dg8`s%\F2rrd>3:j`'SE60s6dPUjL+3_I+IpT+^rg=h@F5s6d-5871U[fe"a2sDCD&U_!#=[e+l"N*COm[G1
%>"50s1Ku<G.@@MO-oJVhi4l`^L3qolSRj7iSqoIO.=V8V4hlVRk'p54p_@?05:?s<JX-%02M8WJ-rUFh66nBf=6@Lik]rQ7F(cPX
%nlBXjYXJWVIE;)nXI:"BkLr&ImBTEcOTiW$WRn<Am)U+@j"#.ef'2?sO7B-YX/R.MK&meaWlLK?#5DNj0q>3a@oDe]QDKu60rB8U
%q]IXiob\@P-rW:KK]k.Hi8:SGEd!jqZ%"6qAXK9."pN>D@4A7lduWZfY/nQM^!f`Qg8d'=>P0O2o!DoY)j%SD^"E&W?G0D\VHo,%
%biHKjHK4j994CWOio$%fL3u?9Q#9^lK\uZ8Z[-J.+OSgnN\*mZXChKQ#6=J<oiFh)Bl_W#4ioLE$#EC!XikKYF)9kP7rf-(#MlG>
%4%^[6)(*&J[Ad9o<_&8UK29r#?%$D8ZpE;SXeofb>5se#K<CpC3TtZ^q@,]#G>frX8^*ZG=`p/SjO_Fm7t\IOMGbd#hD^4n#bN.K
%$N[t7)Q5411[-N!R:,BA\9qj*b1,D9mMcjdJ4Ash8YJ)'bFGT;1Q:VnWNh`cX2iNDV=R4-f`/Rh>W/*2Q0&:*1R7*OA[b@0\Z%E0
%"_fRk7@Ztk;e^,!btY%Fq_$,fh3.2p4I751_AsBS15p$!c:p"@Ru27h_jQC'^Tq(@inTO"g?*eskDi`Jg0(>:AID2E/@V_;#AGe(
%LtrYW0&)7WjghuVceZcd%/8paM2^ucPE+TXLc3_p&q<`n\^u*QVYMqo#+b_<r0Xt*=+2Al^1HBu)\Q]:ReF/j;@l"^HM+(2WEu[f
%BN;*=WRcD\=#6f`]=jhrCTDS\,I[r&),Kt?1MAf/Gj`^4.MKV0PIp$b'E>.12X-Itf95r']F)-+8O\9hN!cEhks)&,rWDpIo>ur8
%#-$DlBd!;8R?PAT1ESch?`dS*f8MS0MkeGQ-e@[/:+Ola7YVXrlP@P6cZuCTkm"EQ^^\J^G_jS=9=FP,Toj3*T[iE&.RT77bV!o`
%S'+?dr^^Ml$t*B:YC>0>^7e"QF,Ps9E-36X6s1D5nq7JIF;#R%WM/'ZT8IdH'q8@-bI8B5?_lFuPG+^4aj",U3700FpNnp3%$ZON
%hbB6)_=hbfHl6l;mni9+G,lM;g]4,CVC^VqAbi2sdI1S&VEE7j-Q:m)I>2(+9[Ud579;T3I_pB*WV?'bfmWab+9THi\2J#+gb*,K
%O<Q<3h336qlE-'ib;p('9uoL&j,]70=D"MuA'f.^'C>*el9hDP]1<_+Ru_?.1XP1r`Cd&b4221[SX2&WNk\lD]a)J1$W<Q/a4hu%
%=^Yr9*.L%ibW_hZVi+UjJ#B[DItBRRW!7Nnf\iP\4b!GVhOX>LDD1E'7#]C1E>Jr]rAoa]R[<5UjX%LaBkAal\?p#onN3>08BiTb
%Ug8hGn`tssf3UPqat3\T3o&(&iHfM\8_6u+n\eA/b6n.k6`Q+bV-18[fels(X\f1iCc$--A,G[1b;[\.1"i%0k<=[C0&MF0)1P3S
%FDGZT6);#qC`0^pqsSKe$)5usOEGNW1*9kSOe2?=ngg[7%N%m:*d3a-%l2)Zh&1lb2*<hf3'kf0')[ufrkf]>h.bLjf/r^uS+A!5
%l\$11H^0dGdr6\Y(KrGD)B9!0GU'fL=Au\i:!3EHFmi)"Oo#8l"ZrXCmQ6f<:VlBnK:.&cOdZ5>SO65l+jo!KSP$58HL6n1rZ$\_
%Q0e7(8%T]*3UsE#Pp8VmWfO.Eitk`"?/E4`it#OL$'fJ4MBSlMQ@H]ho%/5-PD::*GoNc(>\_j.@7XL5P,dR0<c]&uJ_<AU=hPoK
%eXQ+gJ,cq4`pXoDh/8tumlPd<$1ufL[8+T/hs#@2F'FoAjXfcZFuhJt^pl%=o\6%eB[k?V'k+QmZs&G(Gje_[;ncR@bS=68?kDkr
%gqqEmoT+r==:Z4q8P7P&T;(7:.Q?77Q[\+?HM\s4GSg)6lXoIT-@R/.EoA7Y6NtijB7R%"J0E^Sqt8-U,8<'c\K17\*P+de=!9GJ
%n5cb&h)%Dq/6IYoQl<N^>hsM[_GN2B1uUc$F^'c2.&Q$<\T]*/LHC@+qaiubJu`fdpCGJDDCbJOZ]_Bf%:AN8i.abRTSM_u:>f4Y
%BU?r)1tM2\[TdI!]j=6"[sLGrj/T,]6AGoV@lY;77s.Os>e%4N3&^*g_T+fQU"en+MA<"L%--/nA4klhr;G5b2/W1*N\ChPqtcc1
%=@%R\V0]u3>6ph;gqi;>]O!f+5SFY`Fi?'dpoU5/"u^71VPT@^c$!A4]:lj*9(+Jlf8)'K61MDNW+j.M%7>o_Fj&0S<PD:Hpl`!T
%RSgJWMj1*@W+fOYCsn>U31</TTp`?$Onhl`do"1C=g"O`DTYC?b=:!eAss'@7s-@a,;#t!UFW.@M@*!A^9VTX'K+trV.Df))$%d!
%EKrB"`M'<CAh'ThMPBB<j-YS%Ug9cQX[Pt%&o'&`Lgo)8L=9Nj0(,Kdb9o2nOj^$T2/0"tNI<%BeF:=U</7mg_o4W-?DOrBZ6jeo
%BFB]WFu=r\$2Z-*U^$QR^#^(#,EP1gErY=a8ZP.GqL:879[jQ!!pas5<UF.FOBns[?rH-I=*OnbU#]^Bd=Vd_$V^AB3)9]:$a/c=
%202,\)92Tu*A>Vq]>m,cSaP36^(kN4?]<M;boMjU?U\nEnW/ku<R"Qc4Eh>12-SOgE,8R[/CVOAHMi*oGZ&IC;t@r?MSm+-1](U!
%)b4uJJ]b+N,Z%`q;R0"cS`hsfm#7'9!pN1?Q2Wp;U"\u/>*j^K/PIAR>Q&POUEiQ>$.?!^U9!)W&M=?OKT1.bOEr/KAq.Hli:$*[
%rS#EMdspdJH2fJNUt_hLmgg<q'd^>p(KMG!7\&kUlRZg(*I7T&`\r9V@ia)U!V5[t:R8E2FDc2d;+5+fs+ZXfB,TE*&,%QlqY@aX
%"P_gP[76/=Ut#S0Beqm=m<%W+it_PrL,[cIn)GK$0iAqqSu"Rf$j=qbM<MukfW3MPZ^Q]qbgr0\@si4MYqRO_7f.,gNm<+8D/`3B
%:hfp-FSG,$nR!d*(0/JI2?5AIB%Y4J.c"F`=oK"6H`^'2Usc2L\1@Qs&3k/UAble_of)hAUYbm9gC/Rb%?;qZJP^O-%`sg^X8`IW
%48%;^fc?o=HVoRIG/)B@_,i-4UOEGR;nQua(r+\]cY*l3QR>7"D:I=NC5]=Fs5lB$)786@hm5I4*Fi@oepa[WCXeh^Xr%),G,lqF
%>&!]q3LHI32e/?5?Dhohd)1HI'pO=:#B8X=Pl$FET:nUh":PgT9k(h)qs@/2%6Hek>jFo4BbNWMIthO'\gaauV:.M?<B@N-k/5NE
%0S?ctcDrr8H+A71"j[KrYXGF](k)-IZW4\hiTAEHXaW?I-dFd3+DX:2h!+Red+BC+DZ)dV0')^mkYbd_Gf.+.L?8n_?]t[Sp/\^S
%A,CZeD>^XJ9D<2LI6HS[e?3ma$41s%]pA!(2KCVj>@I8Rge=ZO<S?JAE<*55/(NphdHY7,o=Lc'%sJE#/I5b_G&FY74R6(o_VB%0
%/QPbkaDZ`?%6)h2K`+UDom3A:pgl*ppD_qeGCr#&S3ZLtNL,nOoOG4-XYbhpWf&g3P>cH[$mFtR'P$m[h]EF%668:G*jt&,G,n,C
%b?MB*Bua'l[+b'fj'VZ((!,8C%$FCA!!;&u2MZfd]3\$G-pT3:jDoF;Qc]+W/):S6Vd$f4m7OJr9nBd9oD6.dJ=7`(*!Fd@5n^Pr
%Qi[b/DQ[8Z!s\&A0Dg`d"Gm^g9*;?&5[=Yj]j+8*#g]Z^3jl2X18DCFm8bn>4eKqm(o>8BZVff,iRdl9^&;>K__I)=iu4A6kOSFr
%WUK8hnrND2T0:Y].m#E?[;oi]o@2Y^h4!0Lf=(;HcB49^2dYpc=P\8MF6hqi:]EF:n,);0q=W#+J,fJ6cS'`!k4=WTcK+R)Y@aG1
%a4r65r"o=JA+J?3cC57X/fo,U`rjZeI+Eh+\Ms"9j/i,2_KFS-q/^S/q;Uo8pI2T:p^fZU^/d1!OcO;QdFXqskN(Y5^%pSRFd7?U
%i^_=?UUT2k@>6W<`,g+:S\iq:;tBGY*jbjMi&uf*O2tT_Hg>_hgH&S&hBkH?"nh<"$MfK`22d1%jXsdhX8$Nl#Wpqca1(-iEp;nr
%mgJ3N!cP7+CZd&cr('?<6Jj?c1:j/!S:5q`TCp$8T9i:_PaV*+@c&^"S'N2@rlXf7GOW:-="a<01mm`cc_Zg1Wum7t%q!Ts?ha4H
%3,:LG3])mJYiO'kcaDbe^82PdHsB[c*iaSerAWV_d!9&&YNfcO_=II6=t.5QYFJr`>N0E"5:?Ki6B`^CHchZDdDZ>o.=M)d"1'dF
%6fr^Z(b<_SU&Gc8p#53i:k)@*2p\Rg-/(A6D`7<`%bh7GrgWlLNrEb)TW\1\5O<ZB[HI.1Bk>l2*\A)O^40985.c&CRW#ld[-iFL
%^A8YH[Dsr7^T[MI6q,Ag&9oEO92eZV^\I5&[a+a2-fp=.bBdGW%-gVqXtH!J2UrW$T3(EVdUmdZdNA+^s8BEIn`k7Gkuk3"ZWV%W
%>4qS2^M!iEZPp)(g6\G''oHGo\R#&N>4u=)DL]9#H%!87fU!]1[u(*#X_i/emZ^J2a*mFLqq4nMcYlJUZMWcoEMKu4&=W200,hFZ
%0]u2IH_l(hH_'GV\ocn[-6$OYbq"&4B$8rtkKfLmP'4G)WL`.I(W"!&cWMmE'Mk&[ks^);lWJ7:fo#ca_#.PgG#;Pjc`U5#o/!e@
%ht$U&OTE8P$1doTYBm"B1MjlC++9a&05eQ%Sq"-45!iYTWscD@h7N0EI$uW?ZlJ0llY*i6oV/sBk)cd4$'=?5o/$!1=7`bZMqe%4
%g<rQAcA#Ues)c:,]AVYJZCYEJhY<IF/FBq;O']")nk3n5r;>Tm08KAb:Si"*_TD@XIc[[11p:0P^<*E]43[#s]a&hrs45>^o1r]S
%XiIbTo!Wl"aZD/aoXnBd?KP>Hk.g!/Wou!tIl`'ikFXna[?H)hq"--;U8]d,rRFEWI.2.L3+&-C4NNk5^V@k)S83VsDsXiDo<4MX
%?@K49GF[Q>^9j9bS[UNJDbdrkIXbkNaM1a3^!.Ym^Wkis[2t\*+-)tbPK/&spX[W>H.2PQs*A':cCZ*EmH89Rg(3bP[:c!)o2_]S
%^R/)/jtBfnJ'YTI$L@NVeYDU/hIGs79R`bbT:'Qn>;PmMm/5)Eq7F*l9>P[\B":"tF[k&aXNftoeg3Fj`r*:AC<"qU\1k7tgAEf!
%ls]"tb_sdDmk_fUhYp4EbA1U"j7>`MB(OKpSXH&&Q8,_tGgi1.gH.NbH*9J#T=i1fbjg/]Gin'"*dtW.U!;*E63ER\mE[TU?"\dP
%VYBS^2*8/%Gq_<u4?oHDXIgKW0(3!tB3"oD1Mb;%9=#+)g=[i\f1oscm!\ab>MO\81])3".F2lQ>s+\6rUe*s4o"_mH1q4'iksHq
%DL6!(Z<QS;L1gCMZer.Ahr$5qc+W%_[QErK4daoJIer!]j5B:?d[0Xu#KkcdD\((igWKiiVrR4VT"T%)*s>%*iIdK.\,9WLl,\7V
%pUL+m_,4W`rP>Cs_qbQ_e_,uo::FQ%5IgLBm6>:YedHQp[Jj*LbhW-.mEN2<rkhNQl?9!aBD&p6\L6/'cfTW:FFS3,r6>&mf'B5l
%F8L.>`SC?YhRg<ONJm7H[;U2'mb@9`h7<5nol<6'Wu1F=05>Ff$hK_PH,H4VRpXuO5L.$BHOK>1q/u#mp&*CQMrsrRr8X^H+5X)k
%bZC%?0n0t-+6T-4UV_D.H1C+WI.q=MiGuI!m\+Xq\aXS*c.](Nrp,m?E+<Oqp2KcTZf_j[l3m!7?i&qi%o9>%9+N[72i]!R/m^Xf
%f^Rk+Vtl%`WV^SLEimlGVr+$$6E.WkDIEoljMF3(It$A*Vb2**p8Yg:d-qccU$'1^=a]Fge]!e]Bm7t]gjHR*r(FN'\Gj1o?/.#:
%e/$rT$B>n:[dpU<ld$'^@hug<*:qQ_nb^b0_YhI-8(Qk_pIEP:)AeH@l4:a%Drt8h8+0[@QU`E_b,7`Gp!4^%oifBXQPLC`4tgVF
%lZd.2jikhEnZ-]A[/IMe=?>/^f3,,tFQ\t(D)m<HhTVQ#O*SBW4R55_arB)rT.IH84t_!$ouB/Emd0!.T6KtKeZX;`n`@m3dIL!&
%i*ptWmb-$o]t3P^He[G=Q<uRG>K_fa-[kgVVk^BUMo+?HErYKY;HWKSDAB8KP=FNMH(-pnnG7+_W,T9Bj?]L1qX)Hmj&NFj1@n+f
%ZEh-PGI$5XB$HU6s74@Uc>$-^q=++.QPBKjF63;eQP3q=_0_p?DeC_fk@UQl]^"n0.YhZU,N\!GDCSA*YWB7uYR-@fea:<jp$)J8
%\[kX8[a_c<>>n>ITVXPRmN-+ahs6l24aji94_p<$g?[\?HgTXa_R`bUpMK<pk3PH`Z+/]@/S"=O*gg<llFXM)9)n6AGbKWA4EHIL
%UE'LZA$#<S-0+5'Hes#?IVHfHpZOoh#i@l1)I<;-f3Gn3e2,o*HcB;$JiWGib0H_a>s;32muJRDetYb7F3@Fq^9l&^b.`#&[sr4b
%1_q"\GPD'KrTKGRg$W=O9IS]mQe1]m_e7\W?0ej=g"dPi2Hr75cBFSJgWo-#2k1E)f!_.GlPJI6fprqJX+da$?%;jXmCk$?5B4Gm
%%q+Q^:EH]'WkX%i\lt]I"8[>X^A:#UDm._&Seg9>CCa`1>&-U3?=#,t+*Q6GMOuiZC.GHKY4X9ed1^)"epR$4pf;mMHX>NQ;K4lP
%55B[(iTntSkO4&$cQ:UPT5I`UX&"ce+2!'VIV%fj*j<?H4F:6oq>>(+oqRLZ`uh_q#WunSg[iaXQ\14ZcaGp-TC9-GGFqsZO,M=G
%m>CdMAS6GQKkK]^?gKGij^6Li0A9b3bNB7/YC*EuV:tf&n*'-%eGJsDEpc/>Eq.Cuht/T#f57AEJ+;-'rH>*M"HNirgQ2!Bdl*g%
%qn:jei:LRYYk[-^^K.^c[_'L[4,$#ko?k*MCk(9p0<NG_X-\4sd:2A-Vn?*25Iu5LIX(Le>@(MoGK\b"`S9t*:9V:$?X8&jDD""X
%ei+ARa^`mdcW.I*^Fq0^?7PC/i+6o;F7JhWH0O#*b=@PuNQ2:-T5Ah2Mr-GLI]N_mhq[nMX2Vf]rT[NF]C]k<i;E2Io>C(Nl\1mj
%h:GFeHoZQ`JrL/ZZejGAE'!GHT,qddASZAeU%`6lr:&aUX[P*s\Flrk#?qFOle9oKIkAFKA=oE2HWKCkp5qAI]m]_;;fS_><F4E/
%ISmJCO#-aT45W[I%sPGQb3\Q9o2#>@j5--ZS,DHurYqcjRX)7"0$M.AhOH3$MgGg^]?8uOrL:KEkc?o(]A.l4C4@P"J%NJ0Z?NVS
%AS88rOIu?UFPn-$Ir_d*]!-6peiQ$?ql"g#qptfBHM-Z\r>0D/Fq3(U%a?Y&e\eN\B3U.ho;-@qMuLEkO#cdV:>[+@E9:bm3iC:r
%n#VkJ^V/B)>$-,qG-P%q^\%2MrP&(&mE,7O+#W4K^/@2oY^4%Zr56A2e^fN!dc0CZosFV[j(nV[bK&>'P@pL'T2tQUK":`5:S1D9
%cT^MV(Zs[2T@^MQ:HlOAZbQ=HFjRA-(_pi[b>/&Sl'K![kj<BKmG$(Z`e%qI=5TQ%I9eZfqHnlPHL^[Oa'Q1E@,p<HjnXhPUWS?.
%]DIlm`pT=[[CtDPPJc,5mRcTha^3NNmN'/SWr$)pA$tuUUJeE>T7*cRW@FImjl+8!d!2CSiU5/*Ib4qWp.k:IhlEY:8+6;P(T/qY
%1L8Hgc?ApEO3]GiXo,a/VR^la]5i1AhRMcklGfa@[JHB%WupZPm7kHbI^=3u)rL?R/R<g@T5?^(E9A1JMo29%?Za&j.ubpQ2brC]
%?O\Z$hH`=WI.:bIo(%]>IarhUi'(tC*ibj$eJ71[l`jaZ[9gPrO':]oc^qL$AS8Hb]79adh-.t9K#`7_^-4?f+)Oth3dJCMG$YkH
%+*NYdg$@J5\Pr8&SdF(UeKV8D\'mC?2o8f3p"WO1<t.`NPB-,@]"jpL`S6ZT;!lCt4]?+"rbpHA%6LJ]d%L`i`.#&@5!"J>D7+hC
%\:<9CccC$&1npEoZGgf]I\]eBM$tsdh-Qk,$I>r?U?>>/=ed%'lj!W]MLgN:[EDT&Cg<[q2V5[]I*C%\:i/'.+c][QI4-PhIqtV%
%+]c0%p"j8VS`O12J:tKgou7YW:E%ns/aV'7R^.7[1":fUE@m<#J%OMce1W=b@=_V+OrC1hH[Dmgf]AbY;:-)U2H_>CrmP>eY,GCL
%2%08J^31dfq3\<C_UFWk@Lpao4W$)\F?M]W/T0;0eOHGZ[/267oKN-6C9%ZMpP@t93s'Z-QN_7iW*]J9(]cDl[L:o?S(uf<UO:%<
%V)8W>o+%G<@mjt)>:#JkC(@fICga\nA]V!E9G?0[Fh3:28T_nYBL%3nMYD+S96\mGJO^Bs&/p:4#*VoJhs-a?N+AgAg8Pf@CbZif
%PmXF%QPYA!8d?d$l05u!9PsL1;/`)93rb0BJ(!Zi;$IOh>L:Tf568Df/75^+6i%#-]4"M-lFk2fWdT+f,.s%H2W?fB?nUs22Jho0
%o<adr$fbFX('"pX^_m54E$I)QP5R6V@e&ueXZre,]&RFgi_>7PA/NfuHq46mi1ic<?20QT`q/P4eJj?OigoI\6f9NB<&&->:Rf$a
%XjQR,[UT/+HK-"pS8$clEU8frE/E7Bh3G*;*B5A@q0!Z_!+ZbPjJO2IBWkXB2S6Y"EscH9Yq]a>YL=E/KcgOe_kt@(30*;5,HNW_
%[09s.!+jZ#-U2[k:Am[6qD7rjArLpP!e$Uq!MZOqmfFXZI-2>m#&&#kJS8!Q0P6Z8%e]+Hd<#C:\P!!Pp]HeTUVf2q@V6.&qelG0
%4+9E37#f47KP?RZiGm]M0cJq,<.aWi18C`"B)2]UCn3s_;Hng$.'aeu!8VD%;>iLq3X3B?(nYpgfo=G\LE`;4QuP,,o`N\"j>Z<j
%k"Ba4):D894KB$s(R[9UL"5U:V&"6kZ%rsrm!+Op>+105hR]?6-j>q%>1Tu[:kslmK`,W(#u`m7G1pk87fk$o'jLPYbc\;c,?h*(
%S&4*T`X>.$7"hWLDk_rH>@FYj^Q_tYL'`<Z8t)M$5.IB<Y4]ikd2gt2Q*W2\_BX_%&:=>`SE(E9*&mUMJQkdZqmlApV+.C[Y0sC+
%s-"^$D+>'klpoRY@-*K]RJBG6,l+@"]6BWXe:,V!C@Jrf\:"P)m;"B;p*IO7.RLe-ga6a`ld1ZepWGhBa/kYQn0h@lpljt@)'0fj
%C@#noR9!n&Me4L1oubgSkRbdtRLC_T5%)m?N1UGn@an)m$\gU$=Ked;*=ZbQp49kE1j#8UB]7u@UX;ST%L2q`MA[XMMimGr(<a`!
%d]e&Q[;*YY,WfSBohUdk"MLrs"aV158b!lDFR#2s^dB0bFNGHmU`bgLUdkmYT1490%(j26eb8@<)KhHEVYt,>oAn9tm8?@m):Ln4
%pmSoJ]Q_jO0PE=Zoi-.1[,8+C"@'@c/+VVA""/U*';MKI++eHnatR)/JIWrl^X9e7l"iD,aO28)UXmXdi.?DsjIe,.F.B79iP4"M
%[PI37JToclO3.H-q`V`6Ptio0LC!f)q_PDTkrWZKO5>%IKYmn[.j)<Oaa-p4iPBg>nt]Ef2b*=6Z+g$r]KW>c!$LZP3+f3`crY-l
%A-URI$$D2AH&#=bbUjoqPR3O5/BaR"[S>O<V@1,>QPp;^'Ia*Sc@VpD*c4;+TnS,?+FcE(^q&<IQt%mm%Q4A[O3l/MEum5\h$Pll
%^okood^)L?@Rbmp3`G:+054H-G_g=40'!!T8]1&SV8%pGr3Or"[=NYe>0U;CE$.8sFFuJt<WQg*hP@p08Q>.u%N[/>BYn<AH7dQA
%29aU5KrF&N(&GP7`.8jm&9'l,1[^FM51&8JAe?Tq;.K7?m!5fnIHYh>2!RoNS*N!d8G8Uk&999EXD4Zi*i!WcW"dmPU[[?K*ra&+
%FK3?JhnR]V[N`r"5ns.O8aFD6XHG=+i(=,fUBZW]5HT^3X;F[+i%,r0l9\!m"MshsLQcC=Wn8oM!LbgeS^o*'R=AD2$]3r(,q22`
%OHBndB9L]1iM#J!4d26I\k*r4@_Ledc/rA_[5lBeCC+r\cf'(V.e1+(6Xr)p'\aNhoh$dpppcWjof"'6UB)Q)g]s-7e'ca@6[h1K
%!4$EL&nfSX1$a.s'UXQQD"0$N],oi9=]$!qYGlN`X*.YoQ/6-7B@n)5$lgHM`3IUdXiDc$UKIc;1U-UCr,B^ca*sXukSppdL2/;/
%!;39E\L`pr&`"(rcU"C%")mI6O0%FYi&;>T#=@@m.*e\a"7Ui#DQclRo``OYPs-/3M]Bk%'[ubpM)lM&7jRGWrc4EU^[`W)![afT
%PKH6D#';^o<tGq#cdNRhW#nR^q^B@"4%PFPMsHJ#RsrVOKW)A*4:DL0BB.c&3[(1O@1/8Y%Yp.eK;6hm,\Csse(oq.qZK1Q,%J5p
%eb6qcR:T&[rD=/QUq#FR<U5>-_7=eEPnY0/<l6/6WY[UC8,c"p=d*i_dLC"ePBXqe6mA*uT#1euKPD#NG@<[h,V5qQ\-bhnp3sVO
%Kgs0<UO^k%'JP\J0I@F+c&kt?7&0FaP`?1b0MUc0ZM]dEh0*k>k2\@^QS<'8g<Ghrs'!4MaiVAg9a#1o?<Ru"[i7a9EI.@6geF,/
%3JQ;GMD-I,d:8?$&Q;K>qhK:1C\'*D"iWAV9R^VX%]3?-/D%<=RK\a_>r;)'r5CJX>p51R8OS*^#VO5YGdU+A6uLF+`<H;0FQfrm
%'ap<'l7+>Z%fe_86ia4DKVdQjYI)3teX)P5XV#_%i]YYQ^f7Qc='#Ke%IB^u:qA;r1k,L.X<eo7rF1ht<l#S?[C*TG-)K7)qlL?)
%T=kRco\Ja!X$/tor&aa;qCDL\T;Gt09Y]/f?i-,bM^)-'1a7B-2qK?nhItJs)\B5LKUVO^BcpIZ)nmFmdZ;?F8!9Q`pg#Oa%C;h@
%lEI1A7">(dl](AR%*#'SQW'Kok2!.].[Ss7?cV]lgi8rM-^fIMf4bY'_:lG'6+(hk[qn#n_)>#Y+K0OuM`FIP]&j"\ZQ,oq0.f\6
%!G;Kq<90Jt+q\$(%M,"-Y:=G+1,QO)\V`P=r`Z='$G,V<3N5=!.QEm_8<;mjpg^:e]NuWdCG08Kq!0H)gesnE7m#ch&8hmn=G(-g
%;Vr9.,gu/:XbS/XC6nbjHbb*PGH0*2'fW".>6bps:/kEWEVS*)X^LF/lCIJMN7")mXTYItc%9H*l)bD2<!8':4a_IUh6eAtk^m1:
%,V-ec0`$CM=Em"$*m)DHp?<%I:F6IP`qHcOg'-)/p#M^)f=Sij^b.ALNoIREat0J<4>,>i]EYj"B%R8UYuUTp6SCER@E\&WWhPIf
%Y;^UIbfL;4"l5EJ$*0^`Q+G'*PK,s.)]\Ej6f6ON<fM^2=k4%!BVf)=L7X(sm+qGcIS8PQgqmOgh%@dKm?lDNNsd!Xl1JWQ4AqbA
%-f!;rgXdV&f-&bu+kT/+pPiZt^65Q3>h;ki-for^,%*=H,bh):9HAZ:Zn*f>?;[h_.K4>#9NO+(3Z+0H=>*R)l_PCSc*4!I<@,cX
%>t8X(Y*.@/WeD=6iP)6JZ4*&e-C0S>YiT?-j0eFpBO`K$V5m$t``;"3"-51mjLg:@\"L6cK@<02j`Il0Ag_2Ee?E)4h*m(`R'tM-
%<"kl9<XCTc24^7NM2]okPOh(TfR.A;gSD!YQ3Kk#AcnaF^eF`bVE+:1!*qO##%O*ZVaD^_"H9=!CN:nI;mcknP1RPbfG;[W:eOMk
%dq%0m'q\1$@?]rcVBOKiW`h)-6]W.LCZP;MC@Tp_.jq_/F62[jHq$[2:8m@qX-EM-RS"Hr"CS5So0YS2dl*.1U6KCuEh\/?ZXPtm
%c:2Rda]TcE3%IHadhQ)e<E0Lj6Btc=X5muOC1/ZjDWIVUaFGj8:!=!E@2$Pia(sd&Ygu]A.tC>o//-?jJH,.(a!/Pb&AW=:jYTmg
%"K6%'V&>+m,mTSAc76#OH-dQ6B,+7&b@XCIbf$TG)E+WC),sR.-Hi\87qtc$MU*cU,oj=ijeV$T_Ik@'=_0I,<a#0AXZQm?>0:M)
%Ggh1sG@P[r3)WPt%'P;GW%QbUY_Xb]'TCWdlGhJh?k&SA=&J)V!3m=sa-%@)C?/M0PqWVeaG\O`)6@^hM+JjJ3%:S?]Jf%>CMR=>
%&X\tc7T!Pr/=#0CeRa8Ckc0bc+TP5</NXGU"<V;KS0ldtAD%rm:t'S*!#^NWS5<+9'5GC5ZWsJqb`q/Q]%!0R'q\B1$UU3^E$I51
%k/q`:`12u/2Q*X']N-'VCFs,)&tnKTlFMh_d8b5f[7.L=>6,\&Es!U'T*Zgp8RB<s`ZtO+eZ-F_Ru/E!-<J<1'@d]reZj0nF"h3+
%d1UMQ2/I/4pNWf&#hE2%BHrmcaW9HZ+;BQ8!1%2/j,a@o[$1q!F,"-OOIK7S'k[NW7C=f_(<G^T&X1Tr!iaqZ%E3,8]Xibu7^]6'
%;Dd>LUXnKUH![7LQjEjC^=4-j00P%OGR_s!kT6pm#JjS:)6F$_^r@^_Rg%VF#H*;V_H;UXK07kp)(jAJ,rm]U"t'UV?E,9gAH\/R
%-.TqH7F4msoPg:5MN$)Gd2?9.k(Io:=%]#r9b!+[!1KcH$AC-'Ta+$fYG+rTis/"!0-WAsm0%;_!L`3T\1O^,ZB8k\ChgP3+!noO
%n/=3U^nquIXf>P.?.3np27Z>NdAU(hS;*JrRY/`1!#FR8MD]3F=nd0C4:'MAb%RPaF^<h>fi4*"_M+thN&e.#'C1et@U;br9Ai5@
%A5?t@01N?''8f4h/OC"+#(N)4J5T:]B%9n(4/sQIj_CsRP["rq<*lU>/B,\%NKLd"A%Xb(_)W69j0eFXBO`InQ*r;*-I,.UMe9R'
%BJ$6,TJ[q1BZN:j&dclZ9T.1!:h6-HW)?W4U5j;jVW94P>,#2@kab2]/^YKIZ=<qWY@7%>qSm=4&[9haL+6S*2_CNe>YCp#!dG3-
%a^!p)5<Isn^m_+cL(g%U*I,n]3>If5%i1^5:$5cOVW\=4%+_XC2'#&u:K<qea`Sf]Ot,N1'p[i>6.O+L9u.S&![g1*=MlJMFcG!F
%h.M]VN`(Hb@(gD?0dV]g%%t#,('[*cS's73:2uk4[G1nX@1A\@=621?eroRWVQ*:ka]7kfiO(?V\ckNDAAl:G,\De\i67#FnQL2L
%s1c6kmCDRCc9o>Sd!s]aJH75+?hXH8o8,ifM%JB<AEuVg5p2-.M*tlF)FMq55/0;S<*+3DpKI%0BIk)M3as;ZRV-rumWs&!YJ/LT
%Uto]G:$mSVlS5S#`4h]ZXi[g-5BpH^0nI;#3hFN*&I/Y)Y<\IV*+%]6;"$L5XIGJe+j91<M$]+u,7]+Oe.5l:#d;Z>7BI1Hm7(;i
%F*/171u.k7"U?soD5aF:R%"ZZ9S;3m-T=;DS)![qKMe]'95[4fKm%>Jjbf95,E5YtmU.BP8W<:95c_\^FJJ%T[tYu89Q<7WQ#5eI
%ZT5\?Y7K+;)U0AkTJWIf5'DN7Y40l:28`@VU$48;DKIWXFQ1f"JNc%rLoDYP(bQWgSkr\`Ysa/=FR1FV0U:':JP<gIbZ-f9?7kn]
%8gF%>^.`5K,os4UVQ\6I%qTaHGL-ADl0(q8qFLna_*?>A1+luNZ%OZm<8g-TUd<g?O2DGsKG<[AU/hG[G,+B1YT2\JG=F>.T$V0*
%QGlcPe#P7\4A6.K/fbTDhSSY8Te-t"G6prYn=A0Fri,Y+d40t!RX;"<"^UbLZI1;2o;X2nO]-]GEHmmtJ"2iZ,.pPB'X^PhZl<kA
%`V&Tk$&uY\"b09\"sn+q`D-fo-"7[]925^N5_PV%N=G0Ph[rB<9:CPc2[`%tg__,&*-A&pikZ'8k%8d4;6,@@]?tfT*:@rp/fQmU
%<,#Pb(5H\pRtkQp4n!Gq`Pe<B;C>!dpm.=HqHt)AU5oPW5emd#5Eop;H()XA^2[8B5qJcEjSMd-Cb8d4MIseZ:`r*'oM&2XJ-`dP
%\P19>H,i3CE93VF%,0pqK6nX8lJSG):r=!XdDC^d;J8j=;!;+gO%,RlG%).S)/NPF/od\,naSU,?ppBEmO;n9&8=)W:/`[ZeR;qg
%mi31:Y??l<V,m3eVcoPP=2m]ZrA_K_F.5JM\7CTkJnqbDKk7k4;+*sO[q%1ka3rc[/'UDHe:fqgZIXdC#I75j8Hlu,cL*,rPn7Xg
%g+H:fXYL*"Y-j;gHI_WFP[/2d&!L)Ebhe>ei#_5?0.rKV-l<"f38en&n:f<D40Lo:=0e85Ma9X1$aCR`(>=%6PaG"O+C!j@=7aJ#
%#p[<fFAGc7KLi`&edQ(ra1g)E'/-Q<"d1JEP:_3*E:T0n4WhTr,/hi!1nYBT.7J/C)8rg95uIg*q+DFd>(&T[4;\Z*7`Q3"SJP.)
%*N,T2cc>'*B>]uc^H.8?[M%6(H'j=%Jj3kd9^ej)R2$N1*!CR$79](;3,/nsb"666CsmY\/^U6m&h7':;&6Hb0%Ajm-Tm>E:k_@;
%c6s5X])&;&eNfqdW+rCbP]FuaGoW>\Lf'DDEVT(fbB#5?C9+'#K,Ge*%8PH"2(2EV.9gL%g::&pU?Qg4Ud=)X:MPCc2:=QTXU[_N
%NNUI[;IRl^QU;V])I>H'N#L=jVR^,=gW^2j>4FAO/X1F?%>Qahn)/:mdPeW&X>2!$(>OHleDmhjLM!>baKiBR"?^(5[_rb`NAb3,
%Xc*OfdQL%$&gH^4>@VZ[q)INELqU_ublgTS-3iXC=VbMSrB?&=,/hiCgU;aKc%oPQh`9*=e=No=?ZMegXuLVpJ1r4S?](;dMm07>
%bKa;Y_p2.or'5%Aggb1e.EB?5Z\7Z/K?KY9AQi:d;#p.MG)f>b-_u(8$&%Q]2080ioq=Ori.sjkKe0,0`IW]_n=ARS<m)kk/PfED
%H\tuQ7,!X/`m,36--F5%TK1G-B"!EaG:)IlO8TVpST(g>EPmTO;oZ78;'4^SPH6SK=`,!9Xt1Ya*0)_6*ENcoMf`fD[eh937aGdc
%[&reG]K:0OZWcZMWN#X^q65g;GD&&O*ps+H65=@i0%9:M0f$>Q*HNh\Tg4:XNou+J-X&\k,L&P:To-^R$4FNn%V4[C*1S_"UsABW
%C6]?E2qf0[bH[o"fLURO?c)qZA9;'oi2T1HYo0gp4#'!f(g>nm?pGfJ0f@a`7?g(H.gu!Z290l577#PV:/6<F-X#')%%>J"W2ks%
%c<;0F[Gj]t*N`4k>kmP@htH4iZ:qIeh8gRro.NciPk;.u<2:T4f#2e=5#+]e&M?_Td@amHob*6@$gi$clJ]!F+%@5e4WRl+L/:0h
%;!FRG<XFn3U[@+VI^DsY&0*ud^r@pqdW2qV4A8od=[>&]NBUSo_hA^8)>C_Vd,9^P=&(-F5_R]p68^0nJtB9+<gn^nXU?F!12a@`
%37(*pM1\hO9^D&:U/hS_G,)/W]<q+\kI&a1BN9<&CBc)%YdVK:B8hM;F)]0V#p[YgVD6]86%,Q^`4KWW=ibWi:lh4gqlM:W3d5dg
%e(s(S\u2K,6DWFN]1fAf2)).+`k?f>/o6oFCel\pe)W!lW6.E,gO,:$fg):Jj,fgXm9>YU>f7+a,F&ia[DZb5JZJ(<0SA_V$:l/P
%$.[*@VL7$T>S1CDqPL2g5_NG91q"aV,DHn+hsR#k%,.:^LOU!^V,A$IME.36j=k<4V-2;<=seqCNAM#G@M\7$E6rHt6"+"`mDK!5
%@V5'C[5n_)2nH#cGo,[[`eu$bIUb4d]I\]oS=+::VPuEm"`LJOd<Gti0IZIAFZ9.kM[F%=[psd2#d[^+BJC;3$F4sd<gn_c<YZo)
%,5_t<37-3n8S\j#<p?3M<XFn3UTLf2L-+.\RSYZ"$3hefi-c$S2#*iO`o2<7#(;of#!M[c5[#AZ\lVBY,[&'kZ;?UiAU,,$35l?]
%1/SWl7Co@pmCu3(;05q[mHrrOU^!LVXc&ef%:-])3$5$&FnkWJN)I..)<.kc@KG@!IA.l/j7cgBkq]G)FhM_O733nX4r#We+I:.V
%P3rK<_A!-)MQ6uE5aY+0P(KRc,3l2!Z)sU<4d_lWhdnQI.&detE6mC:=j=tLj6VR6-3R);/fGGHeuX)F/BpLC.uN=]'olQm*#-CV
%C?GbVn06[ee1)WiDR>r=7UHd_JQ4WQ5NiP[ANF>QXdb)W@:XDjKk7?a0%8K?)lAh9]_\XUH#/6o?5X>]9?PeX4r0)X/'UDHf7eP+
%[J5Lh=7MceK3(Nq=6Z<N<XFn3U[9fs>!&!t3eI`G4L>ONE8Z875!HBAA?A>=jZ)a;7&ZfePrC*JQC"7:Zd;I,U)j>:rF*W1jV%DU
%%1oCKG#(u9KLi`&G*uSf_[3;fNZ4]M#VB%eZ%b4>J+K<[(Z6Bu%pm/!P<(GB(3$RP:8`(b"Km,73V?6/-'cIRQ(mocVd,,lAe</L
%"PKCLqlM:T7.k&)Mg@-BHR@\9]El)^314<4Ih9_Gk.D,Jib-`m\btSu''Vd:Vo2-p[*(ac5tV$.m5=Rh(O\M-**mDd1*Tthln.KI
%XUSHm7[f#^RgUMX$=5G[>]"klZdB(Ek`j@!BJg>u2l`<dMsWbnLiMAdh-a'lg2[)Y_c$rSTQRaRfSKVQ`:R)_6(r5ac:YFi:5koL
%`o*_DM1`qsT?NNNeBI>0C6]?E2qfm*C\Ym$JHg"5]GPOoLqP)cs/lm]hO)rTf0EQ496>ePM$_+-U#W+B=l;=/:L:^N?9:9iMa;dX
%(fS[MZ]O9kTsSW*r07j!^3W#h9,J7IV0e)',t-IH[`7G2?b9HYr6q$k2ej[q-+:#$N+`/SKQbr6mT^>IVJOM)6JPj)U'tL5=WmDN
%rNRWaOYFe-&k7Ne^GRfq+-NcF:,AXKaU"X*Ofq*nb]<#Db_uYKXq0"*,()-V.d:5dRF`3H$rjmY4KdLqq;=.V`e-u._Ian+=,MU-
%i\e5sV-.IZ<)MWuf(LfW5ZXl))$qP3l0P"9<XFn3UTH8W#e-Uh)[FEhbLEssCloB0P?LtO>sG<._^EMM*]ELFLS?t@3S]TJMcaR,
%MUMQqW%Vj"Q`pBJlX3,JOkqO%<=ik'\h8oAV$r84JULGT7MEcc(cTpV8i[uZ`Gm`'@5ZLeg+Mn)#&UkS$r!_B4WMr$lK5^ULsT>d
%N@QF@C-b3,=IOqe?54b5.Xlmo%Xc6Cnf%,\<P#*,<C3M;BPT.OV79<;e2gpuqur69*oUN5K9p]t>Yr'tQiSDTFBR3%l;Kre[Lm*_
%bKC#OHj[d/aF_""+%I?10J0VLMAcXdfN$73Camjn(2J>/q=EJ'/p\@=(f!]d__a:"C7j?<S9-DM%L0n'.Y@&egI\g],hCM0;HJQM
%9I7fT5"3C$6mKrCQILW:R)Iup8L(NS7s1>d0I!<i\bfdal7dnIk\<eNhD>&i7]h*LKIIbFiDR9B1UO%kNGC[([jo[V\5f]u.OcLI
%/ZDlM(><J"e72A0+%BFFQe,_k^khJ(I8eX1+OY.,?052?olM3ZHBQn#D+q!I>gSuOe(bKa]UN,RipGJdl9^=6qX%OCQX^Z6@d=8s
%5a^&O"\(5F:C5DfD9B/7j`I3+`Gr8<=i.sSod?Y[KN+>a.;BS/BfDJ!A&EV0F-FnVU#&PD^Y-DWE=nS)<+WY@DEHEH6thE<h_PO\
%>Hsn2ZEr!Oeh:HH>,'r49+._i'1RY=Uuu\*Ra-hiX,bZMZ4D'p)6VFrA$,%9TVh'/Ing*@q6RG\aI"Rl%L2#VaiIG-3RC3nN]Xa]
%7(=eU7"`nf+D!FKJYcMjd^`2gJW10b%SXij*0W'#K_fs^bc"N.Uto^r3%^DjG<INka2#YP_$d5%Lq@r"]HS01DP.m-lS9D3Zm"ZA
%rQ5TSOH_ERp$THo@9t2P=Oj'$fAIXr9!aW@FeQ<A`B.[g"(*pW]N.W%Zb!'5<C3M;BPRfj/L1&8EW\hA.lW@FBT1e0q!qCQ/D+WV
%-jM[rKUXAk@"L`,dRNGP8@-[gNM>oG^e+)0LR9<1N8ZBtJu`qo=q*mLNN1IcBMVui_9mRh(FFs4'8%fH/<S86BlGnC*&D%:^Pn0$
%$!+unFJdR2jXA"&gHd856>;S*<^D/6iZOu4$t9O6+<hRdr/q5\E2UD`$:Ga(o<OWYUOWW^l=hfOATu@9nYuCYLk@ub'E$:cMg_UG
%&Pq]3/`^1LVBs't`M1_gob"_WdO_a=UF6ad7;TN33,#rd&M(`BbjHopPn7Xgg+Hm1`EM=]"d)d:fP2F.pUIWj.?1c=.Gm6=S*Tm;
%jCk3r9<a%7iJNA8Qhm=H:tcK.ZdT:MkbX=FKDJ!JDca"s$X%cl8q\;khMA4'RBr`b:djN4mO;n9&8=)W)Ujm[35\I`V8OZf_4VN)
%p;Gb5O!/;J<6E#d,Jm.e2^UiTSV'<$Au&SNEjJTPjC:?Z`'NQ2TMc?[7_5Lr<C3M;BY-s!?+XNkV+*XU$GDL>6K]7WXu=C)E-[hJ
%f3:84]C9oPGn\+mj+VJu)YjBK=U`>WK+[6(e%-eB&<'U!F&Pp?fngFT:9]d*#\;J/P$0.^d-R'MVX#esWo(+iaOu_71AF9"1<hDX
%+rm71*D-/WOgD53-Qn?R+#3M':nRQ*-lQe816`W?</K8)/TDM[\E.C%6th_N.;G+ZBfFa@>=458Ga5kcY,]QLl,GR#mpT=a6unh/
%C283k\QpLnS-rRG*t/K8dE(\Ni0C^5:3K:!m$=6C5s\\8fa+q*:9L=1@`Qm3Op9?4aTo@AKO!c4U/hG[G,))m4H>^fQjNEu]jT3E
%b=cZiBRqSgiZon_j"uE$V?Sb.c5W!+4,B8=7[f#^2[dTB^L/uY`Bi[q3G^4_gs#18C6]?E2qfn%.u;r3iMF?AJ"H?P_j,m]n@X:8
%8@SQDBlr]XBW7hrV3Ee2@=\]i^i?$bS[al+>3O"I0$)jVa45PqXaJ-RJJ#6hbG\m+,_8fF3J]iml/7a;iDY'!W9Ll!]4s=YCqMXa
%+Jd:k1pjXu_f*BqGerD/O`k.2k$^#k\T(?bd<GtK0IR]>pmnDY?:&?#m,?l%g^H:8B3>df<Cp@:U+E\CWi1EAXeU@_Bj_@S$Tk[[
%KN[Q/U/hAYG,)&T`AhG_9ask-QhUf<ee'8F*W:'HWcG&Y0bYd*%FPKI?r2p';b:#YKe,.j-#FjoG*Y,OgpYQW7@9Rt4[lIc,4.kS
%ATu$PLDD:JB1?AkNeL(RCkk!PMtQ4@=rgqp]@BoW5X2/;K+]38FXB%=U``ojic2cNLl`Q%mSH`!f#;W/Ufh@Y[ndOdMH$TF*0E_>
%cp99/6EYE+;6,@@]@#1H*`7F2ECb(l)3>M"kT]G8l)VL]GDFNC3$D]uLoINqcss9#DU'`S+I89!Or=W'>G@d+hXe/],+OUP.;1aq
%U96O0CFb7F<,%=i7cs`8>*O-ENZGq!YCUHiS.Eg"H9>fM6L2Zb=G/sj<ifE*6l`8.*JJmh)C/N``sHF8#5't+OE43[Ag,@a6BPj^
%)jDWYUpX^?'#e^4F\Y3&JV^m7eJMMJ,CmlKj2*+H_4^SJiN>N)SOVCOB4n4(S]Za"'1_i!U<pCCBVejF-Upso3X=VP`$$Xc5AVrD
%<8m,4J5uaaFee4Y3YFDgY%/$\nS*5Cj7n]p??0b.H'f@;1B$@LO&K84M2Eu8!o;g;7=Fon+(@X,*Q/!k@]SRZ&Cb@H)3!1B9!aU*
%G+lF&XUcWcN9/lZ8J#<2HDd^l@0jKmeX2l&,;ID]%?$F;$!,gh@ol.CJYLa10#Ws?+PDBnk@@?moblG@XY>B0<[L@`i4-hKK!qd&
%7jEsH/$j/O)?iO]<R55o-1gXQX\'5PBXDr&Kp-A`,jRA$5i^,,[('@>.0m&m?",#e$FeL$`28ZuVX^e!h01=m`6t$Y-l=Hua!JqR
%40seg4U2lXBh0K`r';nZ6ETlT;6,:>]@#/2*&7Wb()NT`^Vi&JZm$nM0K$!L<>c6iC/dDqVYV>Bl8)]-JsBpkbKW@6)c1htER9"2
%>"+)`l(4VM$'BD+XVtMb_2[]]KJ`%u,#LDU?00UB$[P6b4A<@;,p+pK+R?Oj8/RTd5iQ)'E['+&'%VY!faT0g&H/gQhec2O`oSn?
%1^i^;.Z/g,M#1?7^tN\pMD2ZKH\tuQ7,!X/MqpFS=gI'M3D[Ba1igfQc@pf@-opphLIlCVm[,Pf,5I1`=<Q$q,'q-M:ehjCqn/b]
%0H7X?BL2EXFBQ_K$t<A1TZ7T&+&`eL<C/erAOIpeh,;UA>pN]51aBPO<3rF=O1Xt8O+kFO)RiHOiFPc)U::+"VMHp(-&,&h?edWg
%?.(97=>;3:?JuZCM1`hFb?PW&7_5Lr<C3M;BKL(ULN+?(ZQHfcP)t<YNNMb921!NW]8(*:%B1e"EdbL:9c0,Yi/A,l1/H>G5KWS(
%a<`F]r"4I2ZSM:$/BpLC\Rk2+41=NG*(\hNTSbG6Z[7R5,t-IH[`7f?ihV]k)b7TT"ATdJ8URd(E[Z%XAWYGZ,qjd&'1Xr\!BkfW
%F)+70Ke+qdol-_O%jS49j?4U*,ZQ`SVJh>q%7Jp0Wls[bk@ojO=j@XU%$iLRQP.sMRcf%FlbbJ>Pftl37_D%u@OHmEK",*+*-RX%
%Y^Q,BL_*dc\*ZF_e)N_0ArrS8VFPVH;<p[ekh<MuM?p?42apgJ7Fjn!@r!*ge:S=$(!fIsT_0bm">F6>OE;@<pJVDfQkZ>6/Je$K
%"KsNuBbn"]/2X#k"m5e5%f5U+15b"*=8*E:8r0hnD3qeU=f0PRj<U2.\roRC+QA>]`CO7!D]YddSW9r\?AOq=$A0NA-lbuC[Z\6$
%/c,R<,/S5\><Y>9iYU`/#YVLcATsh=I@;3H)NiVEdmQWX>j7fR<ehjb7b;3qS.$bebkQ/IM`#0:'&q3\\<.+?)Xk_PM?l"\Ur$1I
%$C=e_O_1;X)+=YU9!sEd#F3JX(r1r(,Mc;J.O!5X[%2@VjDME%^el?uAiu*HWqX/h_\^7\#;s+d)%D72Keo**JOB^TNNb"dJl60p
%8Pk(s-*sSZR7DLfcBs](!))S[\b$MkT9;H>5Mi>U>a2<r$"j#cEj"[F6^*XH\<q"12_l.POnKqP*CQ\S+S't[V24WW"^2ZK<Ma5V
%9!cmiM5#RMnii!l:@.8+_iZSGEi+2@=sZSjNOI$Wq!aj1!T\-rNhk44K,BM+'P@_2&(AgO$2rd?\k=l66'4h[;%,F)X?el$Db(TT
%DQ>>f"na1:6B@CD+j97>OZ+9-91p6a/*Z-'Urf`\:Jn0G8A!:#fH#`]DVX/Jp_"6KcjG8J1,>AAO#fbWH,#eLKXj[1.J*h@"VH,C
%RZV2*bKW?UAtk'C#*jBs"@\]HffMX)%R\m.Y1)ZF(hZNeS+<#mdlT?Y))PGM=kW`11c4oC5M1(%A@flo_:#!_M9(Q*eTPoRLiAc0
%ZL'nS<C]1fArrQT!<\??qSUJ8Jcjb!K-8%,p.\AYJ-`dP\VR&ranoN%^EQo^m^L;KYqE1_'D$TR]Y]S>j-;[_0#85+7K%qa`4B)(
%1[VnKM?pJ0(;aUHVOOJ#I9aW?@[ULMC/&)G@AG's9f]1)AQ%i++\YA-$6nk,=#5=$[UN_n,5pq@DHeN3QZ&a@D]C,:]8N.&9MJ!&
%qd<7!gr3u/UfhBo7T%S<l[LDp*ithuT-DM(lCOYL$'BD+m4u=T`jp*N$Tu^=;F`i2c&:r2=LCufq(N9H\e0irTjGSc%#U2rLeNB;
%_^JiJnC1VOH5R<@djSS&-r"s-Hes]<$X%clb/I`I_hu?;c/t%dLsW3Y'@\KTdVcELV?bl19eSVom3;"g%BN>+:4)d$WUK9'X,-7C
%ZYehtJ"#Qc/BK$#PR.Pq;Z4Lh_CB#9>ZO6@EOM.s\k'DI33A23I?CZ)c=b*;aZ4T'liYk.HE(-to6cq6L?+N^i7$d\KS;^K#Gg(M
%jXMU$=aib_Cr2p14]oO+@pC.TWl7COb!J1fM@pY/Nl4KK6h>r\+<L6bDh;.%7,!X#`mA`s`uO9!X\4J'6'7-BSV6lJl_8FP@hf[i
%C/QJ1TH<pb9"!(uA@O?BBu;;@7N<bL/M][*iC:F,W)Z0[h.XF%Y12u^D-Tg;f4LstaEGVlJZpmYS9[:l];&O!R,^.mo.n?<'TNJ:
%=R]J<H<;6^&0"&khHKP0NDZq2X%$6r1^i^C.Z-@5(qiBYr9AHP(I[K;mKmWn&8=)W)UlS5>s#P&nI1^c?q!?^bl2>+EYo_`d9MP_
%1R3$4(t;X\)E5MA@X4@a.FO>U^rV*\C-$$b'!l3I-E'd,KO+8@2OA^.#FeBHo#oL/A/+(q[-/AC-A=8%LM:h+N%0XI=6*NoQZrmj
%<of!-bUb=fANAcEfKhrZfbB'-;.8<?NON;0(:)^J1r*TM4KLO;c>7K`M?pcH4[H1_,4.j(@ri83[W1@*jnRH#-qoI;q$7=!<H[/.
%<>?*`C2(MW:q?:/V-.Kp7T%S<*X>.QY+q#rDQH]ldCp(:.PN.(.(ZJiTq:WIeAkiiVd1.sj`pL[6):\`d6&MJdFIU^DKNtaG_rd]
%BLR"bp1L`UpH]R9ILhH>KSaR+H(cWqSt&8RYVZ_j@M]poI"KW2'$$n]41!&N>@_koJ5uaaFee5r[RkR0GE/40K6'J]j4;(bAQ:6p
%Se$b6?M93gg!;=CmgDO/fg0H(ZR`LTngbos-@O2oLs"5mq^'>aQI?0"!YoL8,mc*)/R<oO_J.M_#7R'(Ml<\2AdlT+.3<TXp@g>W
%/X2jbhLKN6)*lS,k*(sq-REmVK/*dNMq:3%Q=ch](.D)u$$giU3$'O-+@\+kf^9&\Pn7Xgg.lE60osO!4VmaD`D4=3ZJVeUNid%J
%c1>@I>AN>f+q(]Q?d*A\<VDk%iC67MgJa@c_Xq=8p1dDVg`<\cAg'h96BOnHa`NM%Y2"HPb6ZS/\gOFV6DWFNCJ56feT]Kc:VC%#
%/IYfC_]*Y1X-3sUI8=gWLiC88re3]#(,aTnV-.Kp7a^_DWT1*?PdlRj$RAA++58qEXV)iF7b_L#[19\!?:Oi&XX":h<a7o/9f=i-
%Xa**(dj)1_-G'*hlPXTF5TK<e2D(9_Rmkn<4NWS&P$=E^m8*gC,pR1+Q<;*-mj&uU&1SmTj.I\kc7.L&5u$f:fN$%)E7lDiI:FO2
%^g?07KiXE=`:hD"F@!30ZorDq,3YcaA:t^e8QK"i6mKrCQC!:0X?5[E0]J2UaWJ_\_T]+L$#5_:BfFa@K;1$=\?Y7G3,AiLWZU?&
%rQ#^M[CYMrTE^an>jan]0:/=>K3#.0c1K#Meb\!kDb^n<Qc<Ad-s.u[=_SZ*kuErRBm<o$EGj:[g$+dgHFA0P=sZSjNOHk!r!:P'
%gdDjX]ZbL+Kf^g1A!)!gFKL]GrQ.e+PFF$S%t\iPg7g;8/BpMIRtV(C*O0rGij`glEGACOhBoDn$#5_:BfF`udnA__#q%?^/MD-.
%@X.oB%P+S`Fn:!JQH,7(2Klu:^Dsg<YTUV&hBSs]X5spPNt;>Z=T@HirYdJpe])`pa>(b2Wdr#S5[q>O$'e]SYtD0^1">hf5gscd
%F]Hf@g*KNGC0\bO]S&R2F_bPP@b+^CF\gYiLes78Kj12uR[GG]Zq.NbV.H>$_2JmTN>16UdjcQSB^Z)33XfFU\h6YAj#S_6Yu545
%U\U!ib%MCJLLEcbc1>A4)U`3aVT(o'QUu(g"U,V[P7*Qide6)FM?pc#COT5P;:3`^P&lat+[`Cu_l,t?`F2=7j05@P>%HAN6*1bD
%m7,i%0Dsn!?I("C+h/fX\9dj<XqH]+s1+L;V0=h0ICKDc(poqikp*F-:6j@;feZh__Sl"VW])?Xh\=,Z+j;,lYDNMe;UK;oUp4"V
%ER)uXNOS;GTN25YG,))Ud"m5+D%:Vn4,K@J>SQ*HNRRL#=o-=5$=+5e-C&9!ENR9!Kc.i"1-ne@7qu'?N[suu9Bq]Vm@0b<!>0M*
%EuA0im&1SFWpH&h6M.$\#?%AenjEk(Se'<0i#'%.*3,M*9@/AY$SCZ%f7g>mf,WOVcdo:U0O&n1.+^D"C;2=E69DZ6U-KaS^l:=l
%YTM%S.Ipt12aFEpLq6I6(`Zmm+2gQkM7G<R5o)(^JZH3(P#XXb`%]'H6sD(?9@:<:K9^$l9?]^)dR;Is@)UI%mA2?J@;;5_PiXq"
%oMS#Oh.Sn;Y'XN2h,VLp4)%?Mj*6>u$78lCeDWM3VVUe<hF90\UJ&sf5uHhN8+TsnTu`*;mj1O>&UIC?`LnUbk.SLs=dk$q]aG9O
%1A?P=k>7$3Uc4'#YBE]<X+X$UdFO[+Y?h]V>WZFB(.c$PHNmjE1m;q9MqBF%`6:@pK2B%3C.&qMB;MW/CT1FJ/Q$BgOmJT/W?0MC
%!DV`Ge5aP#De\!8i7<j.Hj3cln7e++jb)M[3U1RT&(B<Sa^mE?MThHSBl9W_"HO^Zk>]]gQb#7\AV=2\.*!/6MAfMm7\iS]O<o(D
%!Q@1+03dEuT6T"l'niPlh%S9f+jt882<IrP4(^OFHS.,16BTh'fo"J7B'R#Fku'pZ8W,s/>i/23'T+^TmG'+IZ;$.[1?)-g/"PJV
%1qAI$6_IHdO`mMeZFj6:=NC4uB"AgBB@4R&eC]LiC!Q<YRN=$++7t;.M7bNU).u6dGH=Aor9^?B'G5Y\f7D6rl8E4QN%*1+AEdAJ
%S<;bJC;bBM>]S1Qhm'5/Jm'Hgg5WP\oI=am2fA38,ob"FE0H52`)]?Z@+I9FG4<?So9)TFS;![kNmCan5qFN"6nM-Wr_!rD@.V[#
%QU6\?CP&_W%oF,Xe_6a-?NsWeW*IL5Gb^3AXa\=dVUjll+/ZFhL=RH*\n`TaK+\b&]3Nj]R`gi'=3FQ2=A<j^_l.3'@kc=^[.C:G
%#9:4.'o0`[q_D%\@90ufW)Z0[h.XFa7FkbA[jCaZ#dH9*bh1?!R;uZCrOKG7e^A?;8="7P]J/R=is_l\2OD5L1tQHCD(_`]'J#@+
%e3f0`/>ijbj1NOWo!g,23L'ZS[U4X?cAT%K/^4PbbB7hGRnLhV6-H2bM!lrb1Q$t$'!NS($\i+=#3D:7;UA[E=_O^&d=?oXp1?r;
%(Y,KH2*pLKg[5A_Pn7Xgg+IG^it@mVAGkjdOs5c!G@`=0Zs)Yg0J-&4cSg):4G,7%La8m0(gPQ_i*ifpXb^qcRKZR],e%SX)8m.L
%5u^)-"0<qDUA8t9V)l*MR"2(*,3l2'0t/4h4oti'E%eQP689Q`Cs$E/0i+%N?Jo'#TqopH.Rm9-_Y4V#1^dGe()i8hk[C=HPTZL'
%82YVG4$ftY6eIC$e(?cEKsDL+n%X\!ED#TWn5H-jNg/cj+/Z15)Ho>7FoE"u@F0T;W5dVYGnfOJ4O.%G@;[U9=W/!=ePR>PV-.Kp
%<m`%`;F[13@rpPLAOOTk1CY.q<XFn3U[9fuA2`:W3WG>HT`PEe,ss"+"tp?DT?bo.7YI/YP;ao4-6u[XP[sk_Ma7G#qUL?9k.(KP
%c:[V!MK[6;_8k)Q&Tsl2Z8fSf)30duHP)?CPs#4YO)>f%Pj:FReE#OgG"cf[#J/8C_1IS.]K7=GOg;2Yjg0S@+Mqn%h6uo[_^HC2
%#-kg90]3Es5HHC=-Q``3.)%@3B*1!((J.[SNM0Xd@U*L71;>CTc39".61O_q/N>iq/1$6/-)bO>/BUBp7br?TAtbb070?;F0Yo>\
%?9A?A/W9rgg-%a(&gH^4gLY<Q@P$6Ej0`&]I8j!a1]Z1tW`JIK+/Z`f5BO4jLZ#a:r.RFnO:&HWl@5=jg+Lp>hGbl9H!ZXiMU_>C
%1b6g;QJR<.+]qfKE@;X-0-(3.HF8*O=sZSjNOIF/NYF8Zp!57#d@^ZpRFmKBIu';B*:;pL!tn(VRMKs!-o<9L)JKu@WDPJp4\^E.
%E?:,]-T,0bKUD06C6]?E2qh$M$djr4-fd2FR4a7qLZJ][rf'o.H(GPqo!i5V6#YQ6+26DnU*DutSD`VUI]lt0-q0M-p6mi]P-IY,
%%hW@a9C)c`4LakWR%c]kclZmNN!QOAr<.bMo-3J"UG4^Q1;4>%a4*c[KL*/9\S"O/di<Qpjcbmm-R[S]0FOYGLHSH!oirVJ6'dgj
%#1O58%kA-Hf^j)4_MAbuh%S9f+jt88?1pa7IWbdc9c'9:l31^)bbZ`b;D$pS5"p=`,`DuA5$t$<$qfj[NZ"CoAn\K;m^KQ(M?pmI
%Bo8AI2:m)U<gn_cH5/ks$>bia323OImoMuGhUObTXV)iF7b^@M@s;G:nDga;Mt)HtVC^iK=_3KAp,jE4]4[iUL["+;KON4/Vq]/V
%QImJ3;6*p3-q0e@i(uCO:aCQ$7:5mBbsI`PKgn6MIop]><4^u>AOP2$mKmWn&8=)WRXpI&g>2>j;bq$;`WA_uJcc@]Q^fBUCZu\d
%9oa>k2H1o7!CGP<a/1E0+?M"ROr!k%"aScFDN"Q-7^QBOR_H,,X+JgOU+^Ds0g(4F,"-+?.8S23%hu2)7pXI4@G7124l5smnIg4X
%;"tgC`;u;W7>"OmSmZ.1_IuTmJB1TXWbu<KP_CZd$RI.XjD1U.+3u%L.uZ0aX)ESn%7Jp0WlEEDn['6=_J/4FMH_J1]d!&GVY_m1
%a4Q2VKUMA#.bLDaU::p_bT`@@Kd%TGXNO.es%#>AM0UjTjq.op<X"V/U['\H*;c,U;Xh=f.j=MET3c5o2f2",I%Cktl>S3%%s!*.
%6sgcF#ruu:K]oOEAVAXAa*S+:lt5.46,?ahH>LLI/@<m,.'e+Bdt86fXEXV&BjjEnea<`YPn7Xgg)@lhD<o29I(JIj?=6'2>FPFL
%m=Ujk.jm'S9OaFn_?n@FA">Qa$t<q=@"]n%HrsOC'5d*;0S8au>nbS,?Y!HM>SbpAa('m07OUm%AP_<1T,\2"PnbnBGs4o[j70de
%8o#_s$,SB0iREk2l\[bS\=qc8AV>oJ&S6oQZ0q6hR\a/#VcM3$"O?Yr2WBP"=ANgES_RuS"LUjXZl<ka`H<dgY]1?4-%a",."DLL
%6=`XURMUN]mH*7Q8iUsD;l(gN?kbU`Zd2[@Ke,.j7@A,M,oL_%WL\Al:#9PE2aFEpLq6H+g0N^"4asLK5O>Or4reOOe+@Hf;Xs@+
%R!)Pn<Ft2+KaTLF(^;Qo7$<_3d?LsGeDeouX\4l4<h-Yd*7pa^<gnT*Sed=,C/Q-S*5&&l"$T2Ah:4YSXV)iF7U'AH[FJca_aX$>
%5J'2/`T%.?'jQBGnml!#D9O]NbX@I][I'(@0NqTmfNB(o7/.^5s!<JC:%%'f\]K\O9Mj2b&U%/p)-fc"&0'g:0Qn$Vk.mQa[#<"6
%E&MH[Se'<.BG#2WFGS2Q6spk=N+%=pLShVjF50AY.3c.]\=oEh1$UN>82H@(G+fKh2sFbin`K-Sc&;q=g-%a(&gH^4gIX'C,4)(\
%@EeNa!c?3%Gc"oeM1(9BnD4+Lgt'&2PfTBGlM5>+BYg%n,uTLsn_hWFP?ShM\#njuI'drKV6ifMd*Abf\Di+tJe8eY=crYd6($EW
%4`+hr:ha!Jc!]r_DA+$oLN8,V=L=b!De3gDf:]!?g9ESHKXjAYCL:m>R_<cCLT2NB5aImn`[=OVBr$G[944YEKh79t:>6X,7+bMk
%ATbE%=@N9B5NIqfRau`iguJ7.UE8Xp0F\OGkhYa^e)`F0J-B"sNN!AUpc-67*4@OFb[sH(V<sAb5'JMm+dU^d,!-52-]K\<]%^j0
%6%i>(RPnC+='6=kQbC5C-eEt`Qd--NM\bA`,u3CU5L\aTGEUt@,c0%Z&<GQh(L'a\d3.ZR("l_e1r@)54KLACf_PK:,m_u*HDg.h
%$7bGCla4.\\,lbaIYO1bD1-ZTQ82>o'WhRc5,c$V0sfi)(eA9BL.)JZHioR:S;&');N:i-7[Vti(m/RfdAA>C\4JK<ATsiXQb\T2
%&VhoJqcZQ&@9:(=m>MZ-mAd:n47<_]Dn1EtCQ9c$$SBFtR$\h]^1EPJGh?;d]9WGX\`ca<d^M/XNZXu(ZkK3J`(/k*8dkF\8PEub
%)"!g$1E*4!X/aA0_MAesfoCL'6DNe4pLs3M%)^/^+R&VTbmr9b_a/.lU5$G95ks%U:8DLW5fn=+oQm%;0I#")8].Rq>^hjkcmiiT
%QIuR6X<[Y\apNsFWB7AD0X7Zsg28@4_Cg.<HgBp`k;!g@(KM;Ti7cqQQ85LoL([9cMX8Ujk-AYtAC[@WDm7XuA;OG;.W-CF`J?lN
%Vu7`)&7J&?VsTEU.da8'1-'ZSO(DR7,:n^1/u'[?ND_s0.U!/NI$cf.\1Zl<04$53H55NCLn3c>72&aWd#S8F7YKWg1r\Kg8$"Qa
%2JEBLkuBRW`O%h1\:=Y+-b[c!HF8+Rc7#C7Y1afC$cC$/E0K2iEgc2.>*,K^41'Z;0,\J7+NKlV,Jm/jWRuAbY2f/.4ert:EjJSQ
%9>R10&Vo^6qpDGebg#FE[PLOS[&^XYoP,C$._%D!f52JK!Ke?]\m]7bK6KLQdmKD0h=Mn]OA9sH=HGC'1:aqGB>pLu(-)I-8/]si
%D<Gjo?EL;_=CrotOh2%*OX5nk]C<CFQ&\G2eTVaM;/oK+6WRM5V=V\BgW2KHF68A-7,S>+g](N+epP]+fX@D<Hko/65D5h2a$\7C
%5<dTWW.bhWPcMlmFq.`*h9QLD#22XK1l`Ol<a7neW.S++S#st-/#.ZQ\uKMb0dl\NLnWX$4!QF18ua.I8#YsW#?BFLGau,p,/gjk
%"HIX8g"lQQbs7S^Kd$^N4fgJN3SA=*"^u"Dn$JY56%iNd>pdVD93dXmE*5:_]+;Zr>)/l,hN(q`VU]\_ZAi+l$ZVR[(Q,M5=F3m=
%F41.^1/Dqsgdq_b5UtX!,L0KBe!hN*5WcN6&g*X-hhVXb3Q'-[Q5b(t4`+hr:ha!JNT"kPL4buERs&3D=b)p+@+.gi7jX*"/\1(,
%B!aq6M,]G8"W0uM8/gIn^l%,N'.5(X:J-45E%rcgS"_(l<,l&Fm:@+P%7`U;lF$+c`&6_uEO+-t4WgQ/EMV:-.$B6gf>n>R%mK]i
%'jbj*mFqI*GpA-lg8(O2[dscC)MbgPbs7TJKgm=Z8.R3\0r=i9j;;<?=80(m;*q*b[5HNY]$U_bi-E=<=>Ze5Bjttc<,NqOF$7(U
%P3aT)Wm^dcdE^e+hJL[LZu_uj%Qom2`e_P&<'615(_LYmHeQanU!g*t:=Eu2NH]0a_n.WaH@,1&KbhRRn>V[=c\H4[OooF'bLu:;
%3R8R",<iLh]-0'%`opjgp^/53k#.+Sk6#@3ZI0.lfj-#sTX9K>(5?2U:2U`39%,k=B64\n='_raorub_8Cj%'8^%=B,=K8XlC[-`
%$Hq#V[oF!5V2pLsZQ3a1Ng;/1+Zh,Ih4SeB"1s[!Dh!7u_?c>\];EhRpJod5b@PRbl3,_XgnJ<[TfI2<CK_PHI$jV^j]jfJNA7"\
%SO&)?oG#DDBD>6V1Caio)KJU%(/6=*YI%[_)8rhl:_XDXT#Ct&"Elt(=Vq`So*cHSm7dO[g/V![CpetFP/Al#35[-qRP=gJjs>tL
%\^3=+jsKW[&V4Wl53>m0+`_lBAKXXi66je"o>=0FKj-c:8Ji%KZu=[DBV<eVW\0LY4q:5,NME/@b@Lf8[Q5&K(+fr@5"q.bC0a$5
%otFe1\:roR#]B_h-?bi^W4"ii6kEe9]C'Mt@]f9#XY^.IoI:d<4;T)?>ej4V5qaHVn*6LQ1J4UQX1$%9NiUmL*j4\fc2pQP:7Y3i
%!&G*Hmh&0D0JP6]p"15NHq$G3.r6ApQ3e`>!![4LOg_eA-R=WV/(uq![hMYI(Hn,,e]'!(nD>:a=7`rRl#)lT<WkQ-VSUZ?/aim6
%1QP1q3GtP3R#'-e3Aa2M*dp+qokj8gCUY\t@t.Z,bs4@sMFQAlonO9;4=U7h#[g'!ea@-5UP)7OC-0P6[h!i)dkFP`;\iY7*7]l$
%---$"XU0;;/:.%I[.qA^cYs;N&g&Os)@Bf7b%5:6'W3(jDYJHN3nel39A?6[aKiES<:7W.TFlre`I+o5#X3"7VsTEU.da8')U<:U
%5,LBb0((LF/MuK5dPEiKG!:#nHgn3]bRIJ$]40M<U+YMAV&@?pZdAJHi@SKW_*R0jVC4+O[F*!9?fbPc>W.pp+/W'`qtnUI8(Z_[
%pu!il;&](S:n)6j#@clH>o1TrbVZY8mOd&u#Zna1SGG!$btW+f7ludc7[p?1m#2:m8QO9Wb!P/k3Y#:0&Q8;@4Bel4X/Lr:f$J_-
%VRVHK)ODmjTc&1dP$5)2S5ErO*"+brKG:S7Cta.[a`5-h1Q\GETd[7$[>bcRVfqRH#kP@5VsTEU.da8'1,mpPNKm-1A!QCj)9&Fd
%O$.l;Zm=l20[7k?ZqkZqr%ei#U)>Dk$F@pRWe7^dBAjDTfu9)/3e!-5*Xi"Z8Me`=Y+iE;a*M\r$ZHD8%U'\]Ej^,FcKHCfY.>O`
%6NZk,0Z221(M4@MD%^)?'qC=R)._EuP8Tu>1V!a/gEDA#VeW%Ga>1*KLgf$Z<a:`4WZ*g$P22MnBfi)C9"Si=G*e"$Nq/msc&Gl/
%,Yg_eO[*<uBi5lAI$eLnDd:2_J!-5OOupMX`0E>TV%)dM#AWZdB443,m@bl]%O!/F(g.5#]Ijb`UMsIG6m99Tc`\T"e%3,fm8is]
%fL8GCE.LqGm$,"Z/ed&-1LAR^=ijfp5>s&Pq$84h$8)C37A2Ap+07:$mDLCkZ)toG>iH;+O\TL\R`si<W&NEJ,uiSugLY>DUn=LZ
%D,bG4^*gW,o.K,:0q_N4c\H4S0qe6>V&'lWc>X2MAuma$e'!R`#&X@ppbF&ck-!"`UKtZ<DV:g'aO7[s+p:K2X>lrVms3ss&ULj3
%g<M+?d]V:Be&1"pApPje)T+Se))RCXiM#0t.EFc4[2n$V,2Df-Mets6pD0fpAtY\677iu-o.)$q=U"O6L4V*<X*`RG.&#(lg+LiA
%i1ce&,'@O_W5V1Whsb<Qd.:\7hH;Uu*Qp+]:^bL'Yc1<6f(DZu?R&G*,.ON%4F>ijcL'Fl5mss):6<ZU@<8kF_7RCNXHkVESaW/t
%D"V(F>u[>Yd[HOR2TENuep'`JSLs&R_GNHlAc?Uf8.1d?6lWFBT!P1X8U1hJPQH%A]sNg&+%Ii?#a*)?8FgH7DVHaFBa1kJ/i;RD
%X$3UEG205^R>_E>g-':cPYc'qD9_Q=<qh&^j89dD@F:$t6L;[1@\fS3U#ptH7YI6po2(KkJQ"(:dL<L(UM.U>1dA(O.*eM*2c6j]
%S*juPUP)7OC:e;AhYgs6dQ$/21;0q^OY\'t08Qs##sBB-l".RiZLl"R,[P*'Kk?io8#A3mVbXJ<+,;D+0YL/[\*X5(WeP8b)9C7<
%:a1Q?!$a+*7%a+;2X/c[Bfi)C9"ShR9s</YC.#GJE`+\ZqF1Tgj/[g]7!J!C\MN7kT6S:4eKrs&j<rcO%9X@KX=-PA@-qA+7AR6T
%4"#sm-e^:l[sG6p/kRaKP8ZqnD%(c,_^boD?.^qUCN\"q@G2ZU-m+uUeh0nW68S0Xj+RLU@EfnPCHP^16s/hSl;QF@\B39/V&<rZ
%<`,Td%Veu^r&g$s0$8C,^.BiMJ4R7$C.sV>-T5/d;gF4j0PJHhE+<'l9WE!sa6<jS9FFIDC-;E-(YF"]P@bq1b<dGV\?R2]i_TWt
%+2!C?MWpY<1)d*iX/aY.BPn`d!,?5T7.0E,i_`YcZ_++/]0&cN@oosqgGI@r=Deq43ocg276M9Wbak)3N!Qh=ggo-Tf1n(NLbOJJ
%bUsT@Sf^uOI-pJj/L/-7p.j@ZM@F9$?&dD)IG)H\-+_o_H/.e@K#!d";nB%/+GLIOVJ"e'])_<iDM9[\nmXj#E3<Y\7BH4#5tdFL
%32UWJc>#4i?1_A;QP(BTP0M'J)6MgV<s@u:$9KtS/J!.k9T,*R8&K,<YN_BFDP7r)K+]tu"?42"XN.o>&S;g;?IN>?gBCb0A3C&4
%dL9Zs[4#,SZ/T^J(Jf'eSE+GZ[,%V5OET1*fGpd"G&ZL5Fi1H1N&'FI\NpjCdFlM!I"W*jVTeh\d4V)n5hr.QB]j!$N[$393-[1F
%mOs.t2qgE3\#D9]?+$6#(O[-da*W),^;,#,4Yg+.g.c@9Se'<>3iB*gjJ"+q^.`YW71jA2E0NWRSLO`JQe`<H&0\OGk&!1>l;Uie
%1]pm$/a=7%@#[,i/c"FoKb5YUF\gb/WXWZDD&9aid,g6iEeST/ido;PqS5[lE8;tn0[GMCDskYnku"keA9WVC0%-<4bot.HZ,b[Q
%:(S`g1"e;7FobHoS$7V5e5"@P/3o.Fpn[!2KS:"H<r8c]XB%^@7F*ia]5oEVK9R3++W(DP/S?&d'EmslZE1[OZBQIu9*rk;\D'dl
%m]+\DA;JpcOZV9QMmSK2#;_;E1Oc4')=9?4L:""ibN<P`_rdm`)@rEH(`n="QcGQ^pj>o-l\K*+r3e,rAR+B@Kk:IC@"X43'4*?3
%pX7at&9>AcB1f5gT3Mnr-j*Ui/a=">+cWi7pWVZ^Kb<HjohF1XH4=Ri<NY)",RN4^nbs/N@8PB!,@n#$>tIoVM0M^:9jT%N/m>ik
%j&QcNqRp'0#24o:W(4Q%.h*<mp"2eh,/e0P[,%V2OEOWH)BHKkr33Tqa*FsS^n$5k%'gWV4WgQKd;("D7Yf/sG6VD*&?16m6;`hW
%a3352p:^1++MquP\dTSG,#V-7.r6Ap=p#taabiE-?[iX1L_-Umdrnb@Q?CU'QlDPm2KLCi8ofc\0IZ/di^:NgT3gm9Z6'>Y,,Fk2
%mKB:*Y$8RLc6:Ft4"Uj5=>!]q\8TX45m\c0bj(e.gJf-?Y1bLdMa!1\C)s]rjo^TPa)PZnCP88ie)G&8hPWBhjRl.[L-ae6OdOtk
%-Yq,#lpcj,8tNB9gNL)+%,M=ILaCZIJK5,W1a9'qj2?W`+]j#gm5Dq<[&^@Ln3S`(4BF"Q/Y)F&5r29W!`S-[N\^<ggSeOKW8S*a
%dk9YQeuG!I+Noa5Bs(2A.us=44s&K5,2?l+[,%V5OET/t).';JVX%CAYJ#n4p69;1':[JY4WgQ[71ME8l+JWS-C/X=O$tO9<V5BL
%b'li*Leuj,^1p,!@][RYKe6g_G(P:g'H1,apc?E9P?Gir9Ni<fL7hI4@r+]RZl9t4bZuD@%%:&9TeI_Eku>Xlc9!7:glN.X$GAlJ
%@SSGK@&4a^EamFH*L;g'Z0sjd9:@p0Rbhbj9f!Q.eTI<aG+?449?)tCX$.XBpNW`RER=;cR[TK$1?;o`FU>l<.+'c^(H]>*kA_oI
%MN(k1KNssIK5HD0M!R$6#271)BOJ#3,7aG[j^=De@9:(=m5ELL[&^XTn.Nmk*8JnAnhSB?Pb+g8849O@-5tV&+Jsqs6UDu+h1:Q/
%&W&>%H6R0T\#`[g_C*:E_O7qr%SIXI<`\+bh58\`G1CXO?&Tc-9mbLYZ@/A^DAY$-/JEFo9V^XBdi5R5s*D[l/21S%1mh!C2u5P!
%PM%(H8eU\]keY)K(D0N6Xg!L]C(2#B:XR<O.ee$)[<,,2CAOgpXB%^@7F/qgDW?Brl`%0RpoHt;&s^-0\O]-m]n9:N/ggZ(c#C@Q
%9WKgmop'h_2BRk`XX3:egLqCc#ZF)EL,9#"`%Ekn"N;:!e0i!mZj@r#CA5*kVV7,Te^f]?ZV1W7`b:!KRH53AnkL/eM_+n>KV=+`
%ED46*E7::/:.DjOCtF*!Ag#9V73ds+=`MMF*DULXA=kX5drq3q6eYPpATt6dcWOGuE>8=unAn>IUK:*BSe'<BOT0Pa4a8to_CuBj
%KT&ejW(l7Dloh0)\:kNl(F)J'Yspepdl"f@(t&i"e%<uJKnYJq1_R._oE#VN[<pVF;f,(;C26KRl.sLubp@;.!AeV/3]"ZBXVcrO
%*R$2]b`pnHD&<)u7#%q"=C)E'i72aW@0sVoM@1W8B]$1feS5B%kW*L_KTLu6NHOZ8n?d%EpTgl36I1F$F3&L/gRLd\d:KmnBLZME
%B]Lirh8&/_;&CVM/"m#?1*@[*3;qVDAKXA,L8KKR,U89cbNWOq9=c@s2f6%g25FMX2$Sgq]Q+SDga.cnTG]2.+qp0/\o`!JR%9Wf
%Yp'LP+mK[og*J_=[nW<BG&A(a&gf.S0&\k&*o$`-DR=cEDGtCC]5"tEDIaE>-$E#s)G;!oAtCnt*#k!I>j1u;c*$leqkC<AmU`+s
%BL^^Z`8(3j_,6oVK3LfugJW'sm:_QG]Uf`EBa1lu=u>21_2:l&Nc!sF&`Hd&VsQCmL:""i`pVK=_K(i;U$8@bJJh4p(^I!6VsD!W
%j)J2<#]#3R1HjG2m:b&9_Bs(BQ59Yo1q+`=qcQZlZK+)&4e(ht:?hQN@;Oa/:FOGc5p!O`K<L)+@G?qPU$'>#2B4+ePkoP0`@r^'
%"0pHV7OE<78GIWRZS3T!`i(94UE)6pF*%q,#23cs.#RIUX>oRNp([+M#d`6ug!6TUUg:Ack/Q`CNLTX+lQqX%6b,['`aVVi.S0P)
%%3n26WTl)jg*J_t<@_lQ(,H`NG\pSt=F2"qN[U#EVJk22p4%n0.QV85O3dfV9s:i2=BslGp\!Gpr?K'O[9Vqk0MHD3Z"B5^\\qom
%W$HpgR+l2*d_Im"XGehrW"WCKD3o2oUd5eag'1\p(RhV-[Gm"LI+V[<O%Rk]D.PRAU9:L+CB*;&T7$@pLS'(pjUY^Jp[--_s7H(#
%fLMS4m.&3Trp](9Dh%NVk\ktNnfM2OGl?p^YC?<<LYr-kk<F=k4)XX3T5F1Ds7?i*Ut,L%s7=^3r;*<Ul&UmSp@um^q<:[=qWt9O
%rr1FM%3PM1msi>A$a/'18^.nU#gnn*]USpYQeYrqJ!L#jcTcX.IjqO5qRF0701]#kql_Ohs3\m[ECpbnk0:U7X7JRJ9"t6a<eUq-
%g3PJ?LHiQMktd2biu\4,[U,]sD,aaIPtrJ5Lrq)NZtoCs%*"9i#5(H4cAum_nguR!<3*oPYi$Lk-?(__gATLWQ']+?^*]'[)BlE>
%.I%SY9Z"d^VCpBD=AVD'R,N_*cpE(`o_Z$"l,*[E([ES\Jrb8,XKEuBV<t[B,V:?JgZ&-(_3j1(h3RgBBI=p<2U_$-[\0Y.Ueg)j
%\9lu_q;a;u?@Mk;Vn[QNjUX#ZrS?d@B$^PXip2)A`Im@&:]J>UDngVslHS5!r'gq;7?i:Lo&@:M?9`UqT76Y4lgMRc+91run+D;T
%IJ3EmJ+rf[+3nd\+8OH25CWJEr<(()Vk41h+>."tf\hs#]m=tq2;c+Cp=5X>^&70]+2;0Tq1HH+km.7N]/SW[I/Wu``qPH'`=MpU
%\>`Nc9=5;qi<OePJ#HQM"+INNRE$\iq"BJ9j'R32oabEEI/T[eI/2<^Qf%f3+mOH2*U+)f"CVU0bPMhKQ`n1#iV1bWKoV=bl'\FK
%iRQPpqn;^<TpT?1o^bah?@D^gX#IdrXkdspH!BV7>?\XO>(&:uqKN*K#5Tu[^3TP!pWrd/rndR^5@Pt[lGl,<Nn4?\drUg#H:Ntt
%"koF[5,JgtG7H/rRPu[06CY=pg4\M"i%aV.,0j[R`G;/eC"'f30?.4IP=\Hpe+.$Cl^9P)G_=A]Rue<\F3OX6]I76+J]02t2;Hp:
%a81NiU:b\^:F>_EmIWe<@Y?\!j-)o#@no(ubBGL*qZ;$MC9PB+R-M,uX8Z2g5*n_9cggh@^;qP$k;O/M.-ZF0jDZ)s]]@&2dWjT`
%.>9Fp'`*4T-CgiPU&:YgAFZoHpS=f%.pla.m0s"ID>dSX:\0:ZYg>e&rqZhP4n-c]H_Q>o,brfqatGN7;fEABi[5jsq#$/_0::=?
%qs/I/X2Zcc_YnF!XK-2;WX(b^&-Zos"/c,A\Pf>L4kMNUk7I02`ER:mladQ<G3W(df1g5KM[$!&dor7$%20B.pgTqQK[f%(Cn\d7
%77uCf(<e0HL([bf%1s2hnY*XX^OBlX.hL8kE&UPX6SoP)pYu*K`@aQnS_$LAcAoWq:t97%T5%^NqpSh(\P^l9:N=(dWl735p!OqT
%f"^3jkmt"n[9eH/*_ij,ZX/NF(3j^oo?Ubs4hK/>f3L!hRC>?Z5Kr4;XQUX**Is%Y^P*7C5GA2ri]31Yp5q-f1)(E"^QGMskBS)E
%o-T&LZAgEa$fj;\`N<Hb-ss6Sk1Poi3C-AdQsM35j`mu)&JCcc^KKhM[]iSh4+gDB8\`2/g)ESQW-8*H"][e_$7.t6&bPPI20e\[
%-7Biu&o5VH&JrRDAH)Jh=7X+NbA0@l_&rLQc[@g,qGbU>4Xl1[:>EeW3Xp3SOFuU3<!@Yh-^DI`Iufl48&,&s>C)?Xp%[>^)J*Hd
%O7ono9DIDbr'r1V,_Y_Za@-6k?Mk:Fa6un?AGS81=<3_^oNH*Ef7*<#2l9#Ra'DTWD-g-e[SZ&H`L#B8ER[I+QgbeY3;k<J1"=N+
%`k>Epg,L3E"RGCN`^g2.QJg]rpV1Xi@HH2Y(H)c40)'3EdZLp`\5rX">dCYcHc+MpHEQ.MhjB<sCKibZFj?h2h\]*STrchIV>)Ub
%>\Z7BI_>V,>Sd$"&,'ACGcq:tj-.7RmK]1!^O,Pe=ej30D_XJJ;#gA<]kRHf[!d>oq.IJ;pL;$ipYY402#_@:Sp^>0gWt>rInO)C
%gE6FZorHuQn(1X.kA,lYPBi)"Gk'IR?iKiFYJ0nm-!HoSYNJhXN2H+<dH'JhE\_l)brktfLTYH`[S`'*IQX26[oh?<CPRg(6%*9#
%_Z?$'W-kY,_<G1E20+#1O*9=2d*q0%hu/iI,6-U87,cr&NKZ&tV9eRf;VV,rfKJ9CqD(5'oZtg`DilS_>I_U>H_rB0c-h&Ag-ud)
%9$bStHcXO1#h^X#h'L?D=!Z+3Q8HnMVC>Oe`OC8W4i>28NW)&Y:4%B/&:8RFrDA=T'"u?B[nlTjk=9>ii?!`["-5hqLh-?o6R/TR
%oJk,6E!c1Q<$cp3/,(WjZL4J#s-Lq8Kck&5H]C\'nFiOD7+2jq*mMObi25,tg%+8g?!K\7j_%$-=%u7('sb"P'+3*SGBlN+g:Ls^
%hMOs4/HH/bY71kKR-*m.C'!DZ]PH+d1uIU$P+,_1+m]sL"RDUMj"]A;0lBU&+hKRS*[*\uL@F9(Gr<gE`,rn*6*dodfA,l>ca(dU
%O#/RR@mg9c9FLO,VhJXU+g]u`Q_B;T))>0T;mb";5gbNB#,1]=U.d.+(&lrI8W:^mBKceOop!L2jQ4SBs5!Rt;%?A;gl75_XIca^
%gH_t0ddf0?_p_.&qRjoFY&guM\S[.%4EV.D^u;<TY$iDtg@_:9Y@plG^,De]+t!bh/,PK,:Z:$3+G]dH00H</qBc,'OT(pIlalO+
%%+:aBS'--ekSKT[iuDB(_EDWZ4?#aXk\n6)0OB1+&VEs$5C,FR2b!s599@T)?X#G^Xn*^YYb2/;Ep9I['KI_ikE5-$VB*<LBI>+n
%E+W#=9tQ).#'6L';,OF6Rs'2Ede+pY(0/qq[?ggXk8$%UpQf;Q(H@d.JF6'u>BEL4i`>K^liK\(2!7$]'6bf'N!56!I-1R/,,d'*
%F+JsAQ,kcNc34\UMM:Wh"\tmSY4ZukE)=##+i*eW$QLe:M%dRH/T=NFO\<X,COq+m*J#grhXRp'1\pXTr.,6G_-f8>33_BVcNR'4
%r(fNn3(Tg#Z_b(F6)istOHoKAI#n#N?f9-]rtf&#W'8s$:[+LX^ep6_>i8TBg5>@(^hJU\O7-E5TVfA?p"]uqN+!^fm/uTBmIa-M
%Gp%On!f%Xeq,lQKoS^oiE=T1_Pds5bKKo#/B8V/!"\u7?&p`XAB8V)W!XC@fe3A<C!iI7m.(jnXK@cpBn$Bftj7^/%38Sj!'S^+K
%j(RB#<f[F04fT./\<Zs3>2XY.!e,1pTUjN1O7lE&jBP^i2f"rI3BZP/On2!_EL(pW-?5E6SQS>0aI0B<%3tH!=c(3'F/KJqm('Y`
%5hRfDX^'U(R`!mf#4:jTc$BgV3"VH8)lA-8Vq6)_<S*](U#Ru@G7?'SM.a`QlJ:o\"5Qf9ZK^'"AXU]5kN3:<`F/sl4Vg%3j&XGo
%%\^#hQ?4a"\>4H?p(YOlI<FrN'F2$'i;<3CmC3,#<]M#^JIU^G6)[9-=E!lgb8cT&]!l;t.WV[L>RouH[36Mqf33gm\_]2Rf$#^X
%lSVpo8?<R&.bcWmV#S2DL^]h'mfVfDl1IFAGp%P!.1R1'iZ#MEbCV^omdJ4W]V^@/e4BA=71R*3b2)r$7DHkea7U&949bs%01OWY
%59k6:>U=qMqR^oiUNLRbK4AT+CW?b0V&;M<Ejs2b1$3GBnEs<%*4F1qEo,nFC6q;;"A_o@\Z&gLSF^5I?;PY'+XBaMi9QM(18ABr
%"HffGAV:[?-lU3#-@jkW8Lr>_i9LijI1kOSVtfW;)AF6n(Q*TSqlAZ@Ojl%Xf'E/`l>^<&ZfEdXo^)^o[\0WX`D=`3XSp9;Nu#[m
%r[E/S^;".W)u5N.^Jb)XStkc3-iI`j<SH5LJPap7e>"#Lqtc8cQb-q-V8AT,r]f?pqW#XTf/PRL:/]tc@)j3tPUB)5X8EeP*&U_l
%6QG&Q^AOtkV1to1C?FL/]8;u4R4B)02)hEc<)Eqj/^8[:!&@uDDTtYWk>T[*i0VbC2gh9\KpWea+!"[3+9=eu@`ds,""D7JQ.)?p
%0L)l%YmuK:K[/*QQ5D7$$hVlO+U_u*^!#^$SJ#;B9-Wn&CJ=U<^ceX2TD\A_mskB4c+fBtrVq3:k'NQ_+2@V9Gj>>,jdR>uIK/u`
%D]bTZJ-l-\j!4O^)NS8*^P[F0o9V\Se:/bok[/g"s%7e:eSP!F+2@gGeZ\uNMoR3;s6XWRV'";6+/PU>>R.1[5p[M<#j2cXhk!KV
%+`/H/,tA%"N!tHYOD"kghtB"t&<-5619<5'+h-EY%2k_&eW5h[.?EQrEc]Vn4p:c"3Vr]Q@En>LJa\\s0-$_34YH(mMFrf6[i&9s
%aFfbg`o*]:[upi6TLP5G=r?LI,$#_GiXm7\>Qj,E@?4("eJQE#r8md'r:^#\%#[&/dN?nmj84'<o-Ot-WgE:*g>2:b@ii:n;Tn*d
%b?_CmC!oJn.`Z['OE%ADW)$_NW6.4fMg#%^ZHm#Dk&B/PDRm-Ip2C+h_`4Q%.L:dKi;fAtMc`fK0pbB\)URm)?R+pP"qBV&ru1@Z
%KB(_+mh=BH*>kdN@>n4,N1jE1_Q3*,I&C3X3Mc@6`euHi8)a7PheUrO%(SN$n\7SNSG*oFQmJ,Fe?Wg64]aoV(A,m\]e;Nd,+7a"
%h>\8iR(8;#1%2lrqb8Ie/Vs&*R%VhUIlGK^LN4d\N;OBD;[/8n:7[<N&E6No@-"j,lj/Yj__K7V3?fgfQa%Q"Clq\m_#4u3o@B#H
%UIOO9:tdV^U>F\H*>Zd&&*@B=@tk$lc>foage?i(RHii,RAI&nIt#r(o^Y;,Ts>[,!(dMI=l$B.1,b<_Pro[V[?:(2Go:^ae'*mf
%e5^.&jT8idD6PJ!A"urcLCNBUWZ1SLl9TeZXR<Wk,/!<@Gcu&#I+-pDnpu2]SAt3LOEo72EVLT<1#=kq'M3h'd'5GR3uiEY;85+c
%jU[p]NiC=J)Ybq/N8sS(KQE<.e*D?S;V/ITN*<lJ$bkn*E_J.T0hIKj+s$YdVP-!I>hc=Ld]aR/4`YPUO5,WjDoJk<n8`*V%>D41
%:p./f9@^+r5&_nl'A_knj>Ug@28s3XNOMY[n,;qV=5?S'+37RWEn3'J@s9K<QXj9!<4h!8:ZM)*qM?2T6Z>UfM)uM>+#K9:oA&8:
%9I)2Q2aN/,:JgNYjn=W#AsNrOX%Jte\Ic@rn3'9FZV);IX";F4jS9j;44j7sbF]<8pPq7/k)23"Co-!kB0Z48Dnk;V,Tg@MUi>=Y
%f\!@]K7sUI<1A_SIY?74[g.e<XaRo+?]JCH[Fn$JS@]/tLcne++JM)QInW-br/Yb07#j!t;mY0Dp_7i8pXXD>o^'-*a5]^Arh.f#
%CFBs*&^9MoB]1rF3t67'SGS8"5'Hk#/HTU$(A.I,Z"kE+#0rNO30%#Q3;%HO0A\!p9VV3@iedC^)ZF;#fKL?@@ZQ#?$b!PCddO\c
%qf18hD"_::WG)A9!TA.@2*AC__`/<cfT3?VF/BdC^6Fl?S5+5bUE?$Wa=gC(O`(s2T:cR0$kj4QO>JoLD\PToWH;r71E)+K;oc?V
%S/fNXT]``>al(2?f1d[?-@[5aU8*Q?s("h*U2,[:8nB!aOn*&1&JZtCe+(Q>3%#*;Tc<-(Ulp;"J*`<_S`X5Vo:=cqEV(u`fH9@?
%jl-%rP$$d(jSYf,hRBid-s(WO?Q,VogPAhg<gesIh\qo[89j\%B+-E+jbfRW:3Pq@':&K,]Kr&o5n5P-Hi*Z`I/'2Gro2PEpc6TQ
%++6miGk:L8S6OB"?RnIU4kZHcJY%a0?-Kgp/BFngZSqd'aoD'I%nq)[n.'NpY@haqo/8O4IXg6c`E@flq@e`PIf5l:p^nO4),,C[
%D'AIS`5:8:e'*SFG#8o%o6!6jm^X2!'SQ@.+78e/+s3%ec"<j=,&5`u4b*8Ehr5S@X*-+_q&"!\r0ND)'#[$%h7rm`lb%GZd4\5O
%WlqQFs83&W]q>6Is-As_?bH<7=)U;%R"2sHjicPpqR\[>^OH.Hbtii[]C0,+j/^5DDnj97mF=GJ57mq"^Am0(2m4:[s8KY1#m;?=
%+8Cc/pri^0=$QZ*rrN1.6J;~>
%AI9_PrivateDataEnd
